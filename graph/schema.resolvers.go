package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"
	"fractale/fractal6.go/graph/generated"
	"fractale/fractal6.go/graph/model"
)

// AddNode is the resolver for the addNode field.
func (r *mutationResolver) AddNode(ctx context.Context, input []*model.AddNodeInput, upsert *bool) (data *model.AddNodePayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateNode is the resolver for the updateNode field.
func (r *mutationResolver) UpdateNode(ctx context.Context, input model.UpdateNodeInput) (data *model.UpdateNodePayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteNode is the resolver for the deleteNode field.
func (r *mutationResolver) DeleteNode(ctx context.Context, filter model.NodeFilter) (data *model.DeleteNodePayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddNodeFragment is the resolver for the addNodeFragment field.
func (r *mutationResolver) AddNodeFragment(ctx context.Context, input []*model.AddNodeFragmentInput) (data *model.AddNodeFragmentPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateNodeFragment is the resolver for the updateNodeFragment field.
func (r *mutationResolver) UpdateNodeFragment(ctx context.Context, input model.UpdateNodeFragmentInput) (data *model.UpdateNodeFragmentPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteNodeFragment is the resolver for the deleteNodeFragment field.
func (r *mutationResolver) DeleteNodeFragment(ctx context.Context, filter model.NodeFragmentFilter) (data *model.DeleteNodeFragmentPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddMandate is the resolver for the addMandate field.
func (r *mutationResolver) AddMandate(ctx context.Context, input []*model.AddMandateInput) (data *model.AddMandatePayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateMandate is the resolver for the updateMandate field.
func (r *mutationResolver) UpdateMandate(ctx context.Context, input model.UpdateMandateInput) (data *model.UpdateMandatePayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteMandate is the resolver for the deleteMandate field.
func (r *mutationResolver) DeleteMandate(ctx context.Context, filter model.MandateFilter) (data *model.DeleteMandatePayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddLabel is the resolver for the addLabel field.
func (r *mutationResolver) AddLabel(ctx context.Context, input []*model.AddLabelInput) (data *model.AddLabelPayload, errors error) {
	errors = r.DgraphAddBridge(ctx, input, nil, &data)
	return data, errors
}

// UpdateLabel is the resolver for the updateLabel field.
func (r *mutationResolver) UpdateLabel(ctx context.Context, input model.UpdateLabelInput) (data *model.UpdateLabelPayload, errors error) {
	errors = r.DgraphUpdateBridge(ctx, input, &data)
	return data, errors
}

// DeleteLabel is the resolver for the deleteLabel field.
func (r *mutationResolver) DeleteLabel(ctx context.Context, filter model.LabelFilter) (data *model.DeleteLabelPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddRoleExt is the resolver for the addRoleExt field.
func (r *mutationResolver) AddRoleExt(ctx context.Context, input []*model.AddRoleExtInput) (data *model.AddRoleExtPayload, errors error) {
	errors = r.DgraphAddBridge(ctx, input, nil, &data)
	return data, errors
}

// UpdateRoleExt is the resolver for the updateRoleExt field.
func (r *mutationResolver) UpdateRoleExt(ctx context.Context, input model.UpdateRoleExtInput) (data *model.UpdateRoleExtPayload, errors error) {
	errors = r.DgraphUpdateBridge(ctx, input, &data)
	return data, errors
}

// DeleteRoleExt is the resolver for the deleteRoleExt field.
func (r *mutationResolver) DeleteRoleExt(ctx context.Context, filter model.RoleExtFilter) (data *model.DeleteRoleExtPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddProject is the resolver for the addProject field.
func (r *mutationResolver) AddProject(ctx context.Context, input []*model.AddProjectInput) (data *model.AddProjectPayload, errors error) {
	errors = r.DgraphAddBridge(ctx, input, nil, &data)
	return data, errors
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, input model.UpdateProjectInput) (data *model.UpdateProjectPayload, errors error) {
	errors = r.DgraphUpdateBridge(ctx, input, &data)
	return data, errors
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, filter model.ProjectFilter) (data *model.DeleteProjectPayload, errors error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// AddProjectColumn is the resolver for the addProjectColumn field.
func (r *mutationResolver) AddProjectColumn(ctx context.Context, input []*model.AddProjectColumnInput) (data *model.AddProjectColumnPayload, errors error) {
	errors = r.DgraphAddBridge(ctx, input, nil, &data)
	return data, errors
}

// UpdateProjectColumn is the resolver for the updateProjectColumn field.
func (r *mutationResolver) UpdateProjectColumn(ctx context.Context, input model.UpdateProjectColumnInput) (data *model.UpdateProjectColumnPayload, errors error) {
	panic(fmt.Errorf("not implemented: UpdateProjectColumn - updateProjectColumn"))
}

// DeleteProjectColumn is the resolver for the deleteProjectColumn field.
func (r *mutationResolver) DeleteProjectColumn(ctx context.Context, filter model.ProjectColumnFilter) (data *model.DeleteProjectColumnPayload, errors error) {
	panic(fmt.Errorf("not implemented: DeleteProjectColumn - deleteProjectColumn"))
}

// AddProjectCard is the resolver for the addProjectCard field.
func (r *mutationResolver) AddProjectCard(ctx context.Context, input []*model.AddProjectCardInput) (data *model.AddProjectCardPayload, errors error) {
	errors = r.DgraphAddBridge(ctx, input, nil, &data)
	return data, errors
}

// UpdateProjectCard is the resolver for the updateProjectCard field.
func (r *mutationResolver) UpdateProjectCard(ctx context.Context, input model.UpdateProjectCardInput) (*model.UpdateProjectCardPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectCard - updateProjectCard"))
}

// DeleteProjectCard is the resolver for the deleteProjectCard field.
func (r *mutationResolver) DeleteProjectCard(ctx context.Context, filter model.ProjectCardFilter) (*model.DeleteProjectCardPayload, error) {
	panic(fmt.Errorf("not implemented: DeleteProjectCard - deleteProjectCard"))
}

// AddProjectField is the resolver for the addProjectField field.
func (r *mutationResolver) AddProjectField(ctx context.Context, input []*model.AddProjectFieldInput) (*model.AddProjectFieldPayload, error) {
	panic(fmt.Errorf("not implemented: AddProjectField - addProjectField"))
}

// UpdateProjectField is the resolver for the updateProjectField field.
func (r *mutationResolver) UpdateProjectField(ctx context.Context, input model.UpdateProjectFieldInput) (*model.UpdateProjectFieldPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectField - updateProjectField"))
}

// DeleteProjectField is the resolver for the deleteProjectField field.
func (r *mutationResolver) DeleteProjectField(ctx context.Context, filter model.ProjectFieldFilter) (*model.DeleteProjectFieldPayload, error) {
	panic(fmt.Errorf("not implemented: DeleteProjectField - deleteProjectField"))
}

// AddProjectFieldValue is the resolver for the addProjectFieldValue field.
func (r *mutationResolver) AddProjectFieldValue(ctx context.Context, input []*model.AddProjectFieldValueInput) (*model.AddProjectFieldValuePayload, error) {
	panic(fmt.Errorf("not implemented: AddProjectFieldValue - addProjectFieldValue"))
}

// UpdateProjectFieldValue is the resolver for the updateProjectFieldValue field.
func (r *mutationResolver) UpdateProjectFieldValue(ctx context.Context, input model.UpdateProjectFieldValueInput) (*model.UpdateProjectFieldValuePayload, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectFieldValue - updateProjectFieldValue"))
}

// DeleteProjectFieldValue is the resolver for the deleteProjectFieldValue field.
func (r *mutationResolver) DeleteProjectFieldValue(ctx context.Context, filter model.ProjectFieldValueFilter) (*model.DeleteProjectFieldValuePayload, error) {
	panic(fmt.Errorf("not implemented: DeleteProjectFieldValue - deleteProjectFieldValue"))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, input model.UpdatePostInput) (data *model.UpdatePostPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, filter model.PostFilter) (data *model.DeletePostPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddProjectDraft is the resolver for the addProjectDraft field.
func (r *mutationResolver) AddProjectDraft(ctx context.Context, input []*model.AddProjectDraftInput) (*model.AddProjectDraftPayload, error) {
	panic(fmt.Errorf("not implemented: AddProjectDraft - addProjectDraft"))
}

// UpdateProjectDraft is the resolver for the updateProjectDraft field.
func (r *mutationResolver) UpdateProjectDraft(ctx context.Context, input model.UpdateProjectDraftInput) (*model.UpdateProjectDraftPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectDraft - updateProjectDraft"))
}

// DeleteProjectDraft is the resolver for the deleteProjectDraft field.
func (r *mutationResolver) DeleteProjectDraft(ctx context.Context, filter model.ProjectDraftFilter) (*model.DeleteProjectDraftPayload, error) {
	panic(fmt.Errorf("not implemented: DeleteProjectDraft - deleteProjectDraft"))
}

// AddTension is the resolver for the addTension field.
func (r *mutationResolver) AddTension(ctx context.Context, input []*model.AddTensionInput) (data *model.AddTensionPayload, errors error) {
	errors = r.DgraphAddBridge(ctx, input, nil, &data)
	return data, errors
}

// UpdateTension is the resolver for the updateTension field.
func (r *mutationResolver) UpdateTension(ctx context.Context, input model.UpdateTensionInput) (data *model.UpdateTensionPayload, errors error) {
	errors = r.DgraphUpdateBridge(ctx, input, &data)
	return data, errors
}

// DeleteTension is the resolver for the deleteTension field.
func (r *mutationResolver) DeleteTension(ctx context.Context, filter model.TensionFilter) (data *model.DeleteTensionPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddComment is the resolver for the addComment field.
func (r *mutationResolver) AddComment(ctx context.Context, input []*model.AddCommentInput) (data *model.AddCommentPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, input model.UpdateCommentInput) (data *model.UpdateCommentPayload, errors error) {
	errors = r.DgraphUpdateBridge(ctx, input, &data)
	return data, errors
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, filter model.CommentFilter) (data *model.DeleteCommentPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddReaction is the resolver for the addReaction field.
func (r *mutationResolver) AddReaction(ctx context.Context, input []*model.AddReactionInput, upsert *bool) (data *model.AddReactionPayload, errors error) {
	errors = r.DgraphAddBridge(ctx, input, upsert, &data)
	return data, errors
}

// UpdateReaction is the resolver for the updateReaction field.
func (r *mutationResolver) UpdateReaction(ctx context.Context, input model.UpdateReactionInput) (data *model.UpdateReactionPayload, errors error) {
	panic(fmt.Errorf("not implemented: UpdateReaction - updateReaction"))
}

// DeleteReaction is the resolver for the deleteReaction field.
func (r *mutationResolver) DeleteReaction(ctx context.Context, filter model.ReactionFilter) (data *model.DeleteReactionPayload, errors error) {
	errors = r.DgraphDeleteBridge(ctx, filter, &data)
	return data, errors
}

// AddBlob is the resolver for the addBlob field.
func (r *mutationResolver) AddBlob(ctx context.Context, input []*model.AddBlobInput) (data *model.AddBlobPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateBlob is the resolver for the updateBlob field.
func (r *mutationResolver) UpdateBlob(ctx context.Context, input model.UpdateBlobInput) (data *model.UpdateBlobPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteBlob is the resolver for the deleteBlob field.
func (r *mutationResolver) DeleteBlob(ctx context.Context, filter model.BlobFilter) (data *model.DeleteBlobPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddEvent is the resolver for the addEvent field.
func (r *mutationResolver) AddEvent(ctx context.Context, input []*model.AddEventInput) (data *model.AddEventPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, input model.UpdateEventInput) (data *model.UpdateEventPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, filter model.EventFilter) (data *model.DeleteEventPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddEventFragment is the resolver for the addEventFragment field.
func (r *mutationResolver) AddEventFragment(ctx context.Context, input []*model.AddEventFragmentInput) (data *model.AddEventFragmentPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateEventFragment is the resolver for the updateEventFragment field.
func (r *mutationResolver) UpdateEventFragment(ctx context.Context, input model.UpdateEventFragmentInput) (data *model.UpdateEventFragmentPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteEventFragment is the resolver for the deleteEventFragment field.
func (r *mutationResolver) DeleteEventFragment(ctx context.Context, filter model.EventFragmentFilter) (data *model.DeleteEventFragmentPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddContract is the resolver for the addContract field.
func (r *mutationResolver) AddContract(ctx context.Context, input []*model.AddContractInput, upsert *bool) (data *model.AddContractPayload, errors error) {
	errors = r.DgraphAddBridge(ctx, input, upsert, &data)
	return data, errors
}

// UpdateContract is the resolver for the updateContract field.
func (r *mutationResolver) UpdateContract(ctx context.Context, input model.UpdateContractInput) (data *model.UpdateContractPayload, errors error) {
	errors = r.DgraphUpdateBridge(ctx, input, &data)
	return data, errors
}

// DeleteContract is the resolver for the deleteContract field.
func (r *mutationResolver) DeleteContract(ctx context.Context, filter model.ContractFilter) (data *model.DeleteContractPayload, errors error) {
	errors = r.DgraphDeleteBridge(ctx, filter, &data)
	return data, errors
}

// AddVote is the resolver for the addVote field.
func (r *mutationResolver) AddVote(ctx context.Context, input []*model.AddVoteInput, upsert *bool) (data *model.AddVotePayload, errors error) {
	errors = r.DgraphAddBridge(ctx, input, upsert, &data)
	return data, errors
}

// UpdateVote is the resolver for the updateVote field.
func (r *mutationResolver) UpdateVote(ctx context.Context, input model.UpdateVoteInput) (data *model.UpdateVotePayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteVote is the resolver for the deleteVote field.
func (r *mutationResolver) DeleteVote(ctx context.Context, filter model.VoteFilter) (data *model.DeleteVotePayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, input []*model.AddUserInput, upsert *bool) (data *model.AddUserPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (data *model.UpdateUserPayload, errors error) {
	errors = r.DgraphUpdateBridge(ctx, input, &data)
	return data, errors
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, filter model.UserFilter) (data *model.DeleteUserPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddPendingUser is the resolver for the addPendingUser field.
func (r *mutationResolver) AddPendingUser(ctx context.Context, input []*model.AddPendingUserInput, upsert *bool) (data *model.AddPendingUserPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdatePendingUser is the resolver for the updatePendingUser field.
func (r *mutationResolver) UpdatePendingUser(ctx context.Context, input model.UpdatePendingUserInput) (data *model.UpdatePendingUserPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeletePendingUser is the resolver for the deletePendingUser field.
func (r *mutationResolver) DeletePendingUser(ctx context.Context, filter model.PendingUserFilter) (data *model.DeletePendingUserPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddUserRights is the resolver for the addUserRights field.
func (r *mutationResolver) AddUserRights(ctx context.Context, input []*model.AddUserRightsInput) (data *model.AddUserRightsPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateUserRights is the resolver for the updateUserRights field.
func (r *mutationResolver) UpdateUserRights(ctx context.Context, input model.UpdateUserRightsInput) (data *model.UpdateUserRightsPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteUserRights is the resolver for the deleteUserRights field.
func (r *mutationResolver) DeleteUserRights(ctx context.Context, filter model.UserRightsFilter) (data *model.DeleteUserRightsPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddUserEvent is the resolver for the addUserEvent field.
func (r *mutationResolver) AddUserEvent(ctx context.Context, input []*model.AddUserEventInput) (data *model.AddUserEventPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateUserEvent is the resolver for the updateUserEvent field.
func (r *mutationResolver) UpdateUserEvent(ctx context.Context, input model.UpdateUserEventInput) (data *model.UpdateUserEventPayload, errors error) {
	errors = r.DgraphUpdateBridge(ctx, input, &data)
	return data, errors
}

// DeleteUserEvent is the resolver for the deleteUserEvent field.
func (r *mutationResolver) DeleteUserEvent(ctx context.Context, filter model.UserEventFilter) (data *model.DeleteUserEventPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddNotif is the resolver for the addNotif field.
func (r *mutationResolver) AddNotif(ctx context.Context, input []*model.AddNotifInput) (data *model.AddNotifPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateNotif is the resolver for the updateNotif field.
func (r *mutationResolver) UpdateNotif(ctx context.Context, input model.UpdateNotifInput) (data *model.UpdateNotifPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteNotif is the resolver for the deleteNotif field.
func (r *mutationResolver) DeleteNotif(ctx context.Context, filter model.NotifFilter) (data *model.DeleteNotifPayload, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AddEventCount is the resolver for the addEventCount field.
func (r *mutationResolver) AddEventCount(ctx context.Context, input []*model.AddEventCountInput) (data *model.AddEventCountPayload, errors error) {
	panic(fmt.Errorf("not implemented: AddEventCount - addEventCount"))
}

// UpdateEventCount is the resolver for the updateEventCount field.
func (r *mutationResolver) UpdateEventCount(ctx context.Context, input model.UpdateEventCountInput) (data *model.UpdateEventCountPayload, errors error) {
	panic(fmt.Errorf("not implemented: UpdateEventCount - updateEventCount"))
}

// DeleteEventCount is the resolver for the deleteEventCount field.
func (r *mutationResolver) DeleteEventCount(ctx context.Context, filter model.EventCountFilter) (data *model.DeleteEventCountPayload, errors error) {
	panic(fmt.Errorf("not implemented: DeleteEventCount - deleteEventCount"))
}

// GetNode is the resolver for the getNode field.
func (r *queryResolver) GetNode(ctx context.Context, id *string, nameid *string) (data *model.Node, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// QueryNode is the resolver for the queryNode field.
func (r *queryResolver) QueryNode(ctx context.Context, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) (data []*model.Node, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// AggregateNode is the resolver for the aggregateNode field.
func (r *queryResolver) AggregateNode(ctx context.Context, filter *model.NodeFilter) (data *model.NodeAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetNodeFragment is the resolver for the getNodeFragment field.
func (r *queryResolver) GetNodeFragment(ctx context.Context, id string) (data *model.NodeFragment, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryNodeFragment is the resolver for the queryNodeFragment field.
func (r *queryResolver) QueryNodeFragment(ctx context.Context, filter *model.NodeFragmentFilter, order *model.NodeFragmentOrder, first *int, offset *int) (data []*model.NodeFragment, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateNodeFragment is the resolver for the aggregateNodeFragment field.
func (r *queryResolver) AggregateNodeFragment(ctx context.Context, filter *model.NodeFragmentFilter) (data *model.NodeFragmentAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetMandate is the resolver for the getMandate field.
func (r *queryResolver) GetMandate(ctx context.Context, id string) (data *model.Mandate, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryMandate is the resolver for the queryMandate field.
func (r *queryResolver) QueryMandate(ctx context.Context, filter *model.MandateFilter, order *model.MandateOrder, first *int, offset *int) (data []*model.Mandate, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateMandate is the resolver for the aggregateMandate field.
func (r *queryResolver) AggregateMandate(ctx context.Context, filter *model.MandateFilter) (data *model.MandateAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetLabel is the resolver for the getLabel field.
func (r *queryResolver) GetLabel(ctx context.Context, id string) (data *model.Label, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryLabel is the resolver for the queryLabel field.
func (r *queryResolver) QueryLabel(ctx context.Context, filter *model.LabelFilter, order *model.LabelOrder, first *int, offset *int) (data []*model.Label, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// AggregateLabel is the resolver for the aggregateLabel field.
func (r *queryResolver) AggregateLabel(ctx context.Context, filter *model.LabelFilter) (data *model.LabelAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetRoleExt is the resolver for the getRoleExt field.
func (r *queryResolver) GetRoleExt(ctx context.Context, id string) (data *model.RoleExt, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryRoleExt is the resolver for the queryRoleExt field.
func (r *queryResolver) QueryRoleExt(ctx context.Context, filter *model.RoleExtFilter, order *model.RoleExtOrder, first *int, offset *int) (data []*model.RoleExt, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateRoleExt is the resolver for the aggregateRoleExt field.
func (r *queryResolver) AggregateRoleExt(ctx context.Context, filter *model.RoleExtFilter) (data *model.RoleExtAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetProject is the resolver for the getProject field.
func (r *queryResolver) GetProject(ctx context.Context, id string) (data *model.Project, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// QueryProject is the resolver for the queryProject field.
func (r *queryResolver) QueryProject(ctx context.Context, filter *model.ProjectFilter, order *model.ProjectOrder, first *int, offset *int) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: QueryProject - queryProject"))
}

// AggregateProject is the resolver for the aggregateProject field.
func (r *queryResolver) AggregateProject(ctx context.Context, filter *model.ProjectFilter) (data *model.ProjectAggregateResult, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// GetProjectColumn is the resolver for the getProjectColumn field.
func (r *queryResolver) GetProjectColumn(ctx context.Context, id string) (*model.ProjectColumn, error) {
	panic(fmt.Errorf("not implemented: GetProjectColumn - getProjectColumn"))
}

// QueryProjectColumn is the resolver for the queryProjectColumn field.
func (r *queryResolver) QueryProjectColumn(ctx context.Context, filter *model.ProjectColumnFilter, order *model.ProjectColumnOrder, first *int, offset *int) ([]*model.ProjectColumn, error) {
	panic(fmt.Errorf("not implemented: QueryProjectColumn - queryProjectColumn"))
}

// AggregateProjectColumn is the resolver for the aggregateProjectColumn field.
func (r *queryResolver) AggregateProjectColumn(ctx context.Context, filter *model.ProjectColumnFilter) (*model.ProjectColumnAggregateResult, error) {
	panic(fmt.Errorf("not implemented: AggregateProjectColumn - aggregateProjectColumn"))
}

// GetProjectCard is the resolver for the getProjectCard field.
func (r *queryResolver) GetProjectCard(ctx context.Context, id string) (*model.ProjectCard, error) {
	panic(fmt.Errorf("not implemented: GetProjectCard - getProjectCard"))
}

// QueryProjectCard is the resolver for the queryProjectCard field.
func (r *queryResolver) QueryProjectCard(ctx context.Context, filter *model.ProjectCardFilter, order *model.ProjectCardOrder, first *int, offset *int) ([]*model.ProjectCard, error) {
	panic(fmt.Errorf("not implemented: QueryProjectCard - queryProjectCard"))
}

// AggregateProjectCard is the resolver for the aggregateProjectCard field.
func (r *queryResolver) AggregateProjectCard(ctx context.Context, filter *model.ProjectCardFilter) (*model.ProjectCardAggregateResult, error) {
	panic(fmt.Errorf("not implemented: AggregateProjectCard - aggregateProjectCard"))
}

// QueryProjectField is the resolver for the queryProjectField field.
func (r *queryResolver) QueryProjectField(ctx context.Context, filter *model.ProjectFieldFilter, first *int, offset *int) ([]*model.ProjectField, error) {
	panic(fmt.Errorf("not implemented: QueryProjectField - queryProjectField"))
}

// AggregateProjectField is the resolver for the aggregateProjectField field.
func (r *queryResolver) AggregateProjectField(ctx context.Context, filter *model.ProjectFieldFilter) (*model.ProjectFieldAggregateResult, error) {
	panic(fmt.Errorf("not implemented: AggregateProjectField - aggregateProjectField"))
}

// QueryProjectFieldValue is the resolver for the queryProjectFieldValue field.
func (r *queryResolver) QueryProjectFieldValue(ctx context.Context, filter *model.ProjectFieldValueFilter, order *model.ProjectFieldValueOrder, first *int, offset *int) ([]*model.ProjectFieldValue, error) {
	panic(fmt.Errorf("not implemented: QueryProjectFieldValue - queryProjectFieldValue"))
}

// AggregateProjectFieldValue is the resolver for the aggregateProjectFieldValue field.
func (r *queryResolver) AggregateProjectFieldValue(ctx context.Context, filter *model.ProjectFieldValueFilter) (*model.ProjectFieldValueAggregateResult, error) {
	panic(fmt.Errorf("not implemented: AggregateProjectFieldValue - aggregateProjectFieldValue"))
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string) (data *model.Post, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryPost is the resolver for the queryPost field.
func (r *queryResolver) QueryPost(ctx context.Context, filter *model.PostFilter, order *model.PostOrder, first *int, offset *int) (data []*model.Post, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregatePost is the resolver for the aggregatePost field.
func (r *queryResolver) AggregatePost(ctx context.Context, filter *model.PostFilter) (data *model.PostAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetProjectDraft is the resolver for the getProjectDraft field.
func (r *queryResolver) GetProjectDraft(ctx context.Context, id string) (*model.ProjectDraft, error) {
	panic(fmt.Errorf("not implemented: GetProjectDraft - getProjectDraft"))
}

// QueryProjectDraft is the resolver for the queryProjectDraft field.
func (r *queryResolver) QueryProjectDraft(ctx context.Context, filter *model.ProjectDraftFilter, order *model.ProjectDraftOrder, first *int, offset *int) ([]*model.ProjectDraft, error) {
	panic(fmt.Errorf("not implemented: QueryProjectDraft - queryProjectDraft"))
}

// AggregateProjectDraft is the resolver for the aggregateProjectDraft field.
func (r *queryResolver) AggregateProjectDraft(ctx context.Context, filter *model.ProjectDraftFilter) (*model.ProjectDraftAggregateResult, error) {
	panic(fmt.Errorf("not implemented: AggregateProjectDraft - aggregateProjectDraft"))
}

// GetTension is the resolver for the getTension field.
func (r *queryResolver) GetTension(ctx context.Context, id string) (data *model.Tension, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// QueryTension is the resolver for the queryTension field.
func (r *queryResolver) QueryTension(ctx context.Context, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) (data []*model.Tension, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// AggregateTension is the resolver for the aggregateTension field.
func (r *queryResolver) AggregateTension(ctx context.Context, filter *model.TensionFilter) (data *model.TensionAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetComment is the resolver for the getComment field.
func (r *queryResolver) GetComment(ctx context.Context, id string) (data *model.Comment, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryComment is the resolver for the queryComment field.
func (r *queryResolver) QueryComment(ctx context.Context, filter *model.CommentFilter, order *model.CommentOrder, first *int, offset *int) (data []*model.Comment, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateComment is the resolver for the aggregateComment field.
func (r *queryResolver) AggregateComment(ctx context.Context, filter *model.CommentFilter) (data *model.CommentAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetReaction is the resolver for the getReaction field.
func (r *queryResolver) GetReaction(ctx context.Context, id *string, reactionid *string) (data *model.Reaction, errors error) {
	panic(fmt.Errorf("not implemented: GetReaction - getReaction"))
}

// QueryReaction is the resolver for the queryReaction field.
func (r *queryResolver) QueryReaction(ctx context.Context, filter *model.ReactionFilter, order *model.ReactionOrder, first *int, offset *int) (data []*model.Reaction, errors error) {
	panic(fmt.Errorf("not implemented: QueryReaction - queryReaction"))
}

// AggregateReaction is the resolver for the aggregateReaction field.
func (r *queryResolver) AggregateReaction(ctx context.Context, filter *model.ReactionFilter) (data *model.ReactionAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented: AggregateReaction - aggregateReaction"))
}

// GetBlob is the resolver for the getBlob field.
func (r *queryResolver) GetBlob(ctx context.Context, id string) (data *model.Blob, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryBlob is the resolver for the queryBlob field.
func (r *queryResolver) QueryBlob(ctx context.Context, filter *model.BlobFilter, order *model.BlobOrder, first *int, offset *int) (data []*model.Blob, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateBlob is the resolver for the aggregateBlob field.
func (r *queryResolver) AggregateBlob(ctx context.Context, filter *model.BlobFilter) (data *model.BlobAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetEvent is the resolver for the getEvent field.
func (r *queryResolver) GetEvent(ctx context.Context, id string) (data *model.Event, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryEvent is the resolver for the queryEvent field.
func (r *queryResolver) QueryEvent(ctx context.Context, filter *model.EventFilter, order *model.EventOrder, first *int, offset *int) (data []*model.Event, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateEvent is the resolver for the aggregateEvent field.
func (r *queryResolver) AggregateEvent(ctx context.Context, filter *model.EventFilter) (data *model.EventAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryEventFragment is the resolver for the queryEventFragment field.
func (r *queryResolver) QueryEventFragment(ctx context.Context, filter *model.EventFragmentFilter, order *model.EventFragmentOrder, first *int, offset *int) (data []*model.EventFragment, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateEventFragment is the resolver for the aggregateEventFragment field.
func (r *queryResolver) AggregateEventFragment(ctx context.Context, filter *model.EventFragmentFilter) (data *model.EventFragmentAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetContract is the resolver for the getContract field.
func (r *queryResolver) GetContract(ctx context.Context, id *string, contractid *string) (data *model.Contract, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// QueryContract is the resolver for the queryContract field.
func (r *queryResolver) QueryContract(ctx context.Context, filter *model.ContractFilter, order *model.ContractOrder, first *int, offset *int) (data []*model.Contract, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateContract is the resolver for the aggregateContract field.
func (r *queryResolver) AggregateContract(ctx context.Context, filter *model.ContractFilter) (data *model.ContractAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetVote is the resolver for the getVote field.
func (r *queryResolver) GetVote(ctx context.Context, id *string, voteid *string) (data *model.Vote, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryVote is the resolver for the queryVote field.
func (r *queryResolver) QueryVote(ctx context.Context, filter *model.VoteFilter, order *model.VoteOrder, first *int, offset *int) (data []*model.Vote, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateVote is the resolver for the aggregateVote field.
func (r *queryResolver) AggregateVote(ctx context.Context, filter *model.VoteFilter) (data *model.VoteAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id *string, username *string, email *string) (data *model.User, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// QueryUser is the resolver for the queryUser field.
func (r *queryResolver) QueryUser(ctx context.Context, filter *model.UserFilter, order *model.UserOrder, first *int, offset *int) (data []*model.User, errors error) {
	errors = r.DgraphBridgeRaw(ctx, &data)
	return data, errors
}

// AggregateUser is the resolver for the aggregateUser field.
func (r *queryResolver) AggregateUser(ctx context.Context, filter *model.UserFilter) (data *model.UserAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetPendingUser is the resolver for the getPendingUser field.
func (r *queryResolver) GetPendingUser(ctx context.Context, id *string, username *string, email *string) (data *model.PendingUser, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryPendingUser is the resolver for the queryPendingUser field.
func (r *queryResolver) QueryPendingUser(ctx context.Context, filter *model.PendingUserFilter, order *model.PendingUserOrder, first *int, offset *int) (data []*model.PendingUser, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregatePendingUser is the resolver for the aggregatePendingUser field.
func (r *queryResolver) AggregatePendingUser(ctx context.Context, filter *model.PendingUserFilter) (data *model.PendingUserAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryUserRights is the resolver for the queryUserRights field.
func (r *queryResolver) QueryUserRights(ctx context.Context, filter *model.UserRightsFilter, order *model.UserRightsOrder, first *int, offset *int) (data []*model.UserRights, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateUserRights is the resolver for the aggregateUserRights field.
func (r *queryResolver) AggregateUserRights(ctx context.Context, filter *model.UserRightsFilter) (data *model.UserRightsAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetUserEvent is the resolver for the getUserEvent field.
func (r *queryResolver) GetUserEvent(ctx context.Context, id string) (data *model.UserEvent, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryUserEvent is the resolver for the queryUserEvent field.
func (r *queryResolver) QueryUserEvent(ctx context.Context, filter *model.UserEventFilter, order *model.UserEventOrder, first *int, offset *int) (data []*model.UserEvent, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateUserEvent is the resolver for the aggregateUserEvent field.
func (r *queryResolver) AggregateUserEvent(ctx context.Context, filter *model.UserEventFilter) (data *model.UserEventAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// GetNotif is the resolver for the getNotif field.
func (r *queryResolver) GetNotif(ctx context.Context, id string) (data *model.Notif, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryNotif is the resolver for the queryNotif field.
func (r *queryResolver) QueryNotif(ctx context.Context, filter *model.NotifFilter, order *model.NotifOrder, first *int, offset *int) (data []*model.Notif, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// AggregateNotif is the resolver for the aggregateNotif field.
func (r *queryResolver) AggregateNotif(ctx context.Context, filter *model.NotifFilter) (data *model.NotifAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented"))
}

// QueryEventCount is the resolver for the queryEventCount field.
func (r *queryResolver) QueryEventCount(ctx context.Context, filter *model.EventCountFilter, order *model.EventCountOrder, first *int, offset *int) (data []*model.EventCount, errors error) {
	panic(fmt.Errorf("not implemented: QueryEventCount - queryEventCount"))
}

// AggregateEventCount is the resolver for the aggregateEventCount field.
func (r *queryResolver) AggregateEventCount(ctx context.Context, filter *model.EventCountFilter) (data *model.EventCountAggregateResult, errors error) {
	panic(fmt.Errorf("not implemented: AggregateEventCount - aggregateEventCount"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
