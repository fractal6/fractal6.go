// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"fractale/fractal6.go/graph/model"
	"strconv"
	"sync"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type MutationResolver interface {
	AddNode(ctx context.Context, input []*model.AddNodeInput, upsert *bool) (*model.AddNodePayload, error)
	UpdateNode(ctx context.Context, input model.UpdateNodeInput) (*model.UpdateNodePayload, error)
	DeleteNode(ctx context.Context, filter model.NodeFilter) (*model.DeleteNodePayload, error)
	AddNodeFragment(ctx context.Context, input []*model.AddNodeFragmentInput) (*model.AddNodeFragmentPayload, error)
	UpdateNodeFragment(ctx context.Context, input model.UpdateNodeFragmentInput) (*model.UpdateNodeFragmentPayload, error)
	DeleteNodeFragment(ctx context.Context, filter model.NodeFragmentFilter) (*model.DeleteNodeFragmentPayload, error)
	AddMandate(ctx context.Context, input []*model.AddMandateInput) (*model.AddMandatePayload, error)
	UpdateMandate(ctx context.Context, input model.UpdateMandateInput) (*model.UpdateMandatePayload, error)
	DeleteMandate(ctx context.Context, filter model.MandateFilter) (*model.DeleteMandatePayload, error)
	AddLabel(ctx context.Context, input []*model.AddLabelInput) (*model.AddLabelPayload, error)
	UpdateLabel(ctx context.Context, input model.UpdateLabelInput) (*model.UpdateLabelPayload, error)
	DeleteLabel(ctx context.Context, filter model.LabelFilter) (*model.DeleteLabelPayload, error)
	AddRoleExt(ctx context.Context, input []*model.AddRoleExtInput) (*model.AddRoleExtPayload, error)
	UpdateRoleExt(ctx context.Context, input model.UpdateRoleExtInput) (*model.UpdateRoleExtPayload, error)
	DeleteRoleExt(ctx context.Context, filter model.RoleExtFilter) (*model.DeleteRoleExtPayload, error)
	AddProject(ctx context.Context, input []*model.AddProjectInput) (*model.AddProjectPayload, error)
	UpdateProject(ctx context.Context, input model.UpdateProjectInput) (*model.UpdateProjectPayload, error)
	DeleteProject(ctx context.Context, filter model.ProjectFilter) (*model.DeleteProjectPayload, error)
	AddProjectTension(ctx context.Context, input []*model.AddProjectTensionInput) (*model.AddProjectTensionPayload, error)
	UpdateProjectTension(ctx context.Context, input model.UpdateProjectTensionInput) (*model.UpdateProjectTensionPayload, error)
	DeleteProjectTension(ctx context.Context, filter model.ProjectTensionFilter) (*model.DeleteProjectTensionPayload, error)
	AddProjectColumn(ctx context.Context, input []*model.AddProjectColumnInput, upsert *bool) (*model.AddProjectColumnPayload, error)
	UpdateProjectColumn(ctx context.Context, input model.UpdateProjectColumnInput) (*model.UpdateProjectColumnPayload, error)
	DeleteProjectColumn(ctx context.Context, filter model.ProjectColumnFilter) (*model.DeleteProjectColumnPayload, error)
	AddOrgaAgg(ctx context.Context, input []*model.AddOrgaAggInput) (*model.AddOrgaAggPayload, error)
	UpdateOrgaAgg(ctx context.Context, input model.UpdateOrgaAggInput) (*model.UpdateOrgaAggPayload, error)
	DeleteOrgaAgg(ctx context.Context, filter model.OrgaAggFilter) (*model.DeleteOrgaAggPayload, error)
	UpdatePost(ctx context.Context, input model.UpdatePostInput) (*model.UpdatePostPayload, error)
	DeletePost(ctx context.Context, filter model.PostFilter) (*model.DeletePostPayload, error)
	AddTension(ctx context.Context, input []*model.AddTensionInput) (*model.AddTensionPayload, error)
	UpdateTension(ctx context.Context, input model.UpdateTensionInput) (*model.UpdateTensionPayload, error)
	DeleteTension(ctx context.Context, filter model.TensionFilter) (*model.DeleteTensionPayload, error)
	AddComment(ctx context.Context, input []*model.AddCommentInput) (*model.AddCommentPayload, error)
	UpdateComment(ctx context.Context, input model.UpdateCommentInput) (*model.UpdateCommentPayload, error)
	DeleteComment(ctx context.Context, filter model.CommentFilter) (*model.DeleteCommentPayload, error)
	AddReaction(ctx context.Context, input []*model.AddReactionInput, upsert *bool) (*model.AddReactionPayload, error)
	UpdateReaction(ctx context.Context, input model.UpdateReactionInput) (*model.UpdateReactionPayload, error)
	DeleteReaction(ctx context.Context, filter model.ReactionFilter) (*model.DeleteReactionPayload, error)
	AddBlob(ctx context.Context, input []*model.AddBlobInput) (*model.AddBlobPayload, error)
	UpdateBlob(ctx context.Context, input model.UpdateBlobInput) (*model.UpdateBlobPayload, error)
	DeleteBlob(ctx context.Context, filter model.BlobFilter) (*model.DeleteBlobPayload, error)
	AddEvent(ctx context.Context, input []*model.AddEventInput) (*model.AddEventPayload, error)
	UpdateEvent(ctx context.Context, input model.UpdateEventInput) (*model.UpdateEventPayload, error)
	DeleteEvent(ctx context.Context, filter model.EventFilter) (*model.DeleteEventPayload, error)
	AddEventFragment(ctx context.Context, input []*model.AddEventFragmentInput) (*model.AddEventFragmentPayload, error)
	UpdateEventFragment(ctx context.Context, input model.UpdateEventFragmentInput) (*model.UpdateEventFragmentPayload, error)
	DeleteEventFragment(ctx context.Context, filter model.EventFragmentFilter) (*model.DeleteEventFragmentPayload, error)
	AddContract(ctx context.Context, input []*model.AddContractInput, upsert *bool) (*model.AddContractPayload, error)
	UpdateContract(ctx context.Context, input model.UpdateContractInput) (*model.UpdateContractPayload, error)
	DeleteContract(ctx context.Context, filter model.ContractFilter) (*model.DeleteContractPayload, error)
	AddVote(ctx context.Context, input []*model.AddVoteInput, upsert *bool) (*model.AddVotePayload, error)
	UpdateVote(ctx context.Context, input model.UpdateVoteInput) (*model.UpdateVotePayload, error)
	DeleteVote(ctx context.Context, filter model.VoteFilter) (*model.DeleteVotePayload, error)
	AddUser(ctx context.Context, input []*model.AddUserInput, upsert *bool) (*model.AddUserPayload, error)
	UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.UpdateUserPayload, error)
	DeleteUser(ctx context.Context, filter model.UserFilter) (*model.DeleteUserPayload, error)
	AddPendingUser(ctx context.Context, input []*model.AddPendingUserInput, upsert *bool) (*model.AddPendingUserPayload, error)
	UpdatePendingUser(ctx context.Context, input model.UpdatePendingUserInput) (*model.UpdatePendingUserPayload, error)
	DeletePendingUser(ctx context.Context, filter model.PendingUserFilter) (*model.DeletePendingUserPayload, error)
	AddUserRights(ctx context.Context, input []*model.AddUserRightsInput) (*model.AddUserRightsPayload, error)
	UpdateUserRights(ctx context.Context, input model.UpdateUserRightsInput) (*model.UpdateUserRightsPayload, error)
	DeleteUserRights(ctx context.Context, filter model.UserRightsFilter) (*model.DeleteUserRightsPayload, error)
	AddUserEvent(ctx context.Context, input []*model.AddUserEventInput) (*model.AddUserEventPayload, error)
	UpdateUserEvent(ctx context.Context, input model.UpdateUserEventInput) (*model.UpdateUserEventPayload, error)
	DeleteUserEvent(ctx context.Context, filter model.UserEventFilter) (*model.DeleteUserEventPayload, error)
	AddNotif(ctx context.Context, input []*model.AddNotifInput) (*model.AddNotifPayload, error)
	UpdateNotif(ctx context.Context, input model.UpdateNotifInput) (*model.UpdateNotifPayload, error)
	DeleteNotif(ctx context.Context, filter model.NotifFilter) (*model.DeleteNotifPayload, error)
	AddEventCount(ctx context.Context, input []*model.AddEventCountInput) (*model.AddEventCountPayload, error)
	UpdateEventCount(ctx context.Context, input model.UpdateEventCountInput) (*model.UpdateEventCountPayload, error)
	DeleteEventCount(ctx context.Context, filter model.EventCountFilter) (*model.DeleteEventCountPayload, error)
}
type QueryResolver interface {
	GetNode(ctx context.Context, id *string, nameid *string) (*model.Node, error)
	QueryNode(ctx context.Context, filter *model.NodeFilter, order *model.NodeOrder, first *int, offset *int) ([]*model.Node, error)
	AggregateNode(ctx context.Context, filter *model.NodeFilter) (*model.NodeAggregateResult, error)
	GetNodeFragment(ctx context.Context, id string) (*model.NodeFragment, error)
	QueryNodeFragment(ctx context.Context, filter *model.NodeFragmentFilter, order *model.NodeFragmentOrder, first *int, offset *int) ([]*model.NodeFragment, error)
	AggregateNodeFragment(ctx context.Context, filter *model.NodeFragmentFilter) (*model.NodeFragmentAggregateResult, error)
	GetMandate(ctx context.Context, id string) (*model.Mandate, error)
	QueryMandate(ctx context.Context, filter *model.MandateFilter, order *model.MandateOrder, first *int, offset *int) ([]*model.Mandate, error)
	AggregateMandate(ctx context.Context, filter *model.MandateFilter) (*model.MandateAggregateResult, error)
	GetLabel(ctx context.Context, id string) (*model.Label, error)
	QueryLabel(ctx context.Context, filter *model.LabelFilter, order *model.LabelOrder, first *int, offset *int) ([]*model.Label, error)
	AggregateLabel(ctx context.Context, filter *model.LabelFilter) (*model.LabelAggregateResult, error)
	GetRoleExt(ctx context.Context, id string) (*model.RoleExt, error)
	QueryRoleExt(ctx context.Context, filter *model.RoleExtFilter, order *model.RoleExtOrder, first *int, offset *int) ([]*model.RoleExt, error)
	AggregateRoleExt(ctx context.Context, filter *model.RoleExtFilter) (*model.RoleExtAggregateResult, error)
	GetProject(ctx context.Context, id string) (*model.Project, error)
	QueryProject(ctx context.Context, filter *model.ProjectFilter, order *model.ProjectOrder, first *int, offset *int) ([]*model.Project, error)
	AggregateProject(ctx context.Context, filter *model.ProjectFilter) (*model.ProjectAggregateResult, error)
	GetProjectTension(ctx context.Context, id string) (*model.ProjectTension, error)
	QueryProjectTension(ctx context.Context, filter *model.ProjectTensionFilter, order *model.ProjectTensionOrder, first *int, offset *int) ([]*model.ProjectTension, error)
	AggregateProjectTension(ctx context.Context, filter *model.ProjectTensionFilter) (*model.ProjectTensionAggregateResult, error)
	GetProjectColumn(ctx context.Context, id *string, name *string) (*model.ProjectColumn, error)
	QueryProjectColumn(ctx context.Context, filter *model.ProjectColumnFilter, order *model.ProjectColumnOrder, first *int, offset *int) ([]*model.ProjectColumn, error)
	AggregateProjectColumn(ctx context.Context, filter *model.ProjectColumnFilter) (*model.ProjectColumnAggregateResult, error)
	QueryOrgaAgg(ctx context.Context, filter *model.OrgaAggFilter, order *model.OrgaAggOrder, first *int, offset *int) ([]*model.OrgaAgg, error)
	AggregateOrgaAgg(ctx context.Context, filter *model.OrgaAggFilter) (*model.OrgaAggAggregateResult, error)
	GetPost(ctx context.Context, id string) (*model.Post, error)
	QueryPost(ctx context.Context, filter *model.PostFilter, order *model.PostOrder, first *int, offset *int) ([]*model.Post, error)
	AggregatePost(ctx context.Context, filter *model.PostFilter) (*model.PostAggregateResult, error)
	GetTension(ctx context.Context, id string) (*model.Tension, error)
	QueryTension(ctx context.Context, filter *model.TensionFilter, order *model.TensionOrder, first *int, offset *int) ([]*model.Tension, error)
	AggregateTension(ctx context.Context, filter *model.TensionFilter) (*model.TensionAggregateResult, error)
	GetComment(ctx context.Context, id string) (*model.Comment, error)
	QueryComment(ctx context.Context, filter *model.CommentFilter, order *model.CommentOrder, first *int, offset *int) ([]*model.Comment, error)
	AggregateComment(ctx context.Context, filter *model.CommentFilter) (*model.CommentAggregateResult, error)
	GetReaction(ctx context.Context, id *string, reactionid *string) (*model.Reaction, error)
	QueryReaction(ctx context.Context, filter *model.ReactionFilter, order *model.ReactionOrder, first *int, offset *int) ([]*model.Reaction, error)
	AggregateReaction(ctx context.Context, filter *model.ReactionFilter) (*model.ReactionAggregateResult, error)
	GetBlob(ctx context.Context, id string) (*model.Blob, error)
	QueryBlob(ctx context.Context, filter *model.BlobFilter, order *model.BlobOrder, first *int, offset *int) ([]*model.Blob, error)
	AggregateBlob(ctx context.Context, filter *model.BlobFilter) (*model.BlobAggregateResult, error)
	GetEvent(ctx context.Context, id string) (*model.Event, error)
	QueryEvent(ctx context.Context, filter *model.EventFilter, order *model.EventOrder, first *int, offset *int) ([]*model.Event, error)
	AggregateEvent(ctx context.Context, filter *model.EventFilter) (*model.EventAggregateResult, error)
	QueryEventFragment(ctx context.Context, filter *model.EventFragmentFilter, order *model.EventFragmentOrder, first *int, offset *int) ([]*model.EventFragment, error)
	AggregateEventFragment(ctx context.Context, filter *model.EventFragmentFilter) (*model.EventFragmentAggregateResult, error)
	GetContract(ctx context.Context, id *string, contractid *string) (*model.Contract, error)
	QueryContract(ctx context.Context, filter *model.ContractFilter, order *model.ContractOrder, first *int, offset *int) ([]*model.Contract, error)
	AggregateContract(ctx context.Context, filter *model.ContractFilter) (*model.ContractAggregateResult, error)
	GetVote(ctx context.Context, id *string, voteid *string) (*model.Vote, error)
	QueryVote(ctx context.Context, filter *model.VoteFilter, order *model.VoteOrder, first *int, offset *int) ([]*model.Vote, error)
	AggregateVote(ctx context.Context, filter *model.VoteFilter) (*model.VoteAggregateResult, error)
	GetUser(ctx context.Context, id *string, username *string, email *string) (*model.User, error)
	QueryUser(ctx context.Context, filter *model.UserFilter, order *model.UserOrder, first *int, offset *int) ([]*model.User, error)
	AggregateUser(ctx context.Context, filter *model.UserFilter) (*model.UserAggregateResult, error)
	GetPendingUser(ctx context.Context, id *string, username *string, email *string) (*model.PendingUser, error)
	QueryPendingUser(ctx context.Context, filter *model.PendingUserFilter, order *model.PendingUserOrder, first *int, offset *int) ([]*model.PendingUser, error)
	AggregatePendingUser(ctx context.Context, filter *model.PendingUserFilter) (*model.PendingUserAggregateResult, error)
	QueryUserRights(ctx context.Context, filter *model.UserRightsFilter, order *model.UserRightsOrder, first *int, offset *int) ([]*model.UserRights, error)
	AggregateUserRights(ctx context.Context, filter *model.UserRightsFilter) (*model.UserRightsAggregateResult, error)
	GetUserEvent(ctx context.Context, id string) (*model.UserEvent, error)
	QueryUserEvent(ctx context.Context, filter *model.UserEventFilter, order *model.UserEventOrder, first *int, offset *int) ([]*model.UserEvent, error)
	AggregateUserEvent(ctx context.Context, filter *model.UserEventFilter) (*model.UserEventAggregateResult, error)
	GetNotif(ctx context.Context, id string) (*model.Notif, error)
	QueryNotif(ctx context.Context, filter *model.NotifFilter, order *model.NotifOrder, first *int, offset *int) ([]*model.Notif, error)
	AggregateNotif(ctx context.Context, filter *model.NotifFilter) (*model.NotifAggregateResult, error)
	QueryEventCount(ctx context.Context, filter *model.EventCountFilter, order *model.EventCountOrder, first *int, offset *int) ([]*model.EventCount, error)
	AggregateEventCount(ctx context.Context, filter *model.EventCountFilter) (*model.EventCountAggregateResult, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_auth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AuthRule
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg0, err = ec.unmarshalOAuthRule2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg0
	var arg1 *model.AuthRule
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalOAuthRule2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	var arg2 *model.AuthRule
	if tmp, ok := rawArgs["add"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add"))
		arg2, err = ec.unmarshalOAuthRule2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["add"] = arg2
	var arg3 *model.AuthRule
	if tmp, ok := rawArgs["update"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
		arg3, err = ec.unmarshalOAuthRule2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["update"] = arg3
	var arg4 *model.AuthRule
	if tmp, ok := rawArgs["delete"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete"))
		arg4, err = ec.unmarshalOAuthRule2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["delete"] = arg4
	return args, nil
}

func (ec *executionContext) dir_cacheControl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["maxAge"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxAge"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["maxAge"] = arg0
	return args, nil
}

func (ec *executionContext) dir_cascade_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*string
	if tmp, ok := rawArgs["fields"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fields"))
		arg0, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fields"] = arg0
	return args, nil
}

func (ec *executionContext) dir_custom_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CustomHTTP
	if tmp, ok := rawArgs["http"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("http"))
		arg0, err = ec.unmarshalOCustomHTTP2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCustomHTTP(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["http"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["dql"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dql"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dql"] = arg1
	return args, nil
}

func (ec *executionContext) dir_dgraph_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["pred"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pred"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pred"] = arg1
	return args, nil
}

func (ec *executionContext) dir_generate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GenerateQueryParams
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOGenerateQueryParams2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐGenerateQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 *model.GenerateMutationParams
	if tmp, ok := rawArgs["mutation"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mutation"))
		arg1, err = ec.unmarshalOGenerateMutationParams2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐGenerateMutationParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mutation"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["subscription"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscription"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subscription"] = arg2
	return args, nil
}

func (ec *executionContext) dir_hasInverse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["field"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["field"] = arg0
	return args, nil
}

func (ec *executionContext) dir_lambdaOnMutate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["add"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["add"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["update"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["update"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["delete"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["delete"] = arg2
	return args, nil
}

func (ec *executionContext) dir_meta_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["f"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("f"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["k"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("k"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["k"] = arg1
	return args, nil
}

func (ec *executionContext) dir_remoteResponse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) dir_search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DgraphIndex
	if tmp, ok := rawArgs["by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("by"))
		arg0, err = ec.unmarshalODgraphIndex2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["by"] = arg0
	return args, nil
}

func (ec *executionContext) dir_secret_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["field"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["field"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["pred"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pred"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pred"] = arg1
	return args, nil
}

func (ec *executionContext) dir_w_add_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["a"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("a"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["a"] = arg0
	return args, nil
}

func (ec *executionContext) dir_w_alter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["a"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("a"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["a"] = arg0
	return args, nil
}

func (ec *executionContext) dir_w_meta_patch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["f"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("f"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["k"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("k"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["k"] = arg1
	return args, nil
}

func (ec *executionContext) dir_w_patch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["a"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("a"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["a"] = arg0
	return args, nil
}

func (ec *executionContext) dir_w_remove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["a"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("a"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["a"] = arg0
	return args, nil
}

func (ec *executionContext) dir_w_set_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["a"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("a"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["a"] = arg0
	return args, nil
}

func (ec *executionContext) dir_x_add_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["r"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("r"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["r"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["f"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("f"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg1
	var arg2 []model.TensionEvent
	if tmp, ok := rawArgs["e"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("e"))
		arg2, err = ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["e"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["n"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg3
	return args, nil
}

func (ec *executionContext) dir_x_alter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["r"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("r"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["r"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["f"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("f"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg1
	var arg2 []model.TensionEvent
	if tmp, ok := rawArgs["e"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("e"))
		arg2, err = ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["e"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["n"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg3
	return args, nil
}

func (ec *executionContext) dir_x_patch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["r"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("r"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["r"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["f"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("f"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg1
	var arg2 []model.TensionEvent
	if tmp, ok := rawArgs["e"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("e"))
		arg2, err = ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["e"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["n"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg3
	return args, nil
}

func (ec *executionContext) dir_x_remove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["r"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("r"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["r"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["f"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("f"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg1
	var arg2 []model.TensionEvent
	if tmp, ok := rawArgs["e"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("e"))
		arg2, err = ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["e"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["n"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg3
	return args, nil
}

func (ec *executionContext) dir_x_set_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["r"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("r"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["r"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["f"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("f"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["f"] = arg1
	var arg2 []model.TensionEvent
	if tmp, ok := rawArgs["e"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("e"))
		arg2, err = ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["e"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["n"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["n"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddBlobPayload_blob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOBlobOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddCommentPayload_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOCommentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddContractPayload_contract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ContractOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOContractOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddEventCountPayload_eventCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventCountFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventCountOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventCountOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddEventFragmentPayload_eventFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddEventPayload_event_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddLabelPayload_label_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOLabelOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddMandatePayload_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.MandateOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOMandateOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddNodeFragmentPayload_nodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddNodePayload_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddNotifPayload_notif_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NotifFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NotifOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONotifOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddOrgaAggPayload_orgaAgg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OrgaAggFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.OrgaAggOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOOrgaAggOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddPendingUserPayload_pendingUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PendingUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PendingUserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOPendingUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddProjectColumnPayload_projectColumn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectColumnFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectColumnOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectColumnOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddProjectPayload_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddProjectTensionPayload_projectTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectTensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddReactionPayload_reaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ReactionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOReactionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddRoleExtPayload_roleExt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RoleExtFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.RoleExtOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalORoleExtOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddTensionPayload_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddUserEventPayload_userEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserEventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserEventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddUserPayload_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddUserRightsPayload_userRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserRightsFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserRightsOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserRightsOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_AddVotePayload_vote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.VoteOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOVoteOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Blob_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Blob_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Blob_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Comment_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Comment_reactionsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Comment_reactions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ReactionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOReactionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Contract_candidatesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contract_candidates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Contract_commentsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contract_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOCommentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Contract_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contract_event_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contract_participantsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contract_participants_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.VoteOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOVoteOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Contract_pending_candidatesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PendingUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contract_pending_candidates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PendingUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PendingUserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOPendingUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Contract_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_DeleteBlobPayload_blob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOBlobOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteCommentPayload_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOCommentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteContractPayload_contract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ContractOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOContractOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteEventCountPayload_eventCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventCountFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventCountOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventCountOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteEventFragmentPayload_eventFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteEventPayload_event_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteLabelPayload_label_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOLabelOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteMandatePayload_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.MandateOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOMandateOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteNodeFragmentPayload_nodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteNodePayload_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteNotifPayload_notif_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NotifFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NotifOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONotifOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteOrgaAggPayload_orgaAgg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OrgaAggFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.OrgaAggOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOOrgaAggOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeletePendingUserPayload_pendingUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PendingUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PendingUserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOPendingUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeletePostPayload_post_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPostFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PostOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOPostOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteProjectColumnPayload_projectColumn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectColumnFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectColumnOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectColumnOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteProjectPayload_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteProjectTensionPayload_projectTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectTensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteReactionPayload_reaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ReactionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOReactionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteRoleExtPayload_roleExt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RoleExtFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.RoleExtOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalORoleExtOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteTensionPayload_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteUserEventPayload_userEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserEventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserEventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteUserPayload_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteUserRightsPayload_userRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserRightsFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserRightsOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserRightsOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_DeleteVotePayload_vote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.VoteOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOVoteOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Event_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Event_mentioned_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Event_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Label_nodesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Label_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Label_tensionsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Label_tensions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_addBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddBlobInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddBlobInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddCommentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddCommentInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addCommentInput == nil {
				return nil, errors.New("directive hook_addCommentInput is not implemented")
			}
			return ec.directives.Hook_addCommentInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]*model.AddCommentInput); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.AddCommentInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddContractInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddContractInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddContractInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addContractInput == nil {
				return nil, errors.New("directive hook_addContractInput is not implemented")
			}
			return ec.directives.Hook_addContractInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]*model.AddContractInput); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.AddContractInput`, tmp))
		}
	}
	args["input"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["upsert"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upsert"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["upsert"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addEventCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddEventCountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddEventCountInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventCountInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addEventFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddEventFragmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddEventFragmentInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventFragmentInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddEventInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddEventInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddLabelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddLabelInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addLabelInput == nil {
				return nil, errors.New("directive hook_addLabelInput is not implemented")
			}
			return ec.directives.Hook_addLabelInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]*model.AddLabelInput); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.AddLabelInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddMandateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddMandateInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddNodeFragmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddNodeFragmentInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddNodeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddNodeInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["upsert"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upsert"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["upsert"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addNotif_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddNotifInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddNotifInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNotifInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrgaAgg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddOrgaAggInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddOrgaAggInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddOrgaAggInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addPendingUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddPendingUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddPendingUserInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddPendingUserInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["upsert"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upsert"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["upsert"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addProjectColumn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddProjectColumnInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddProjectColumnInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectColumnInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["upsert"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upsert"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["upsert"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addProjectTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddProjectTensionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddProjectTensionInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectTensionInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddProjectInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddProjectInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addProjectInput == nil {
				return nil, errors.New("directive hook_addProjectInput is not implemented")
			}
			return ec.directives.Hook_addProjectInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]*model.AddProjectInput); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.AddProjectInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addReaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddReactionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddReactionInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddReactionInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addReactionInput == nil {
				return nil, errors.New("directive hook_addReactionInput is not implemented")
			}
			return ec.directives.Hook_addReactionInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]*model.AddReactionInput); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.AddReactionInput`, tmp))
		}
	}
	args["input"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["upsert"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upsert"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["upsert"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addRoleExt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddRoleExtInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddRoleExtInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddRoleExtInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addRoleExtInput == nil {
				return nil, errors.New("directive hook_addRoleExtInput is not implemented")
			}
			return ec.directives.Hook_addRoleExtInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]*model.AddRoleExtInput); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.AddRoleExtInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddTensionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddTensionInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addTensionInput == nil {
				return nil, errors.New("directive hook_addTensionInput is not implemented")
			}
			return ec.directives.Hook_addTensionInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]*model.AddTensionInput); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.AddTensionInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddUserEventInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddUserEventInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserEventInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddUserRightsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddUserRightsInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddUserInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addUserInput == nil {
				return nil, errors.New("directive hook_addUserInput is not implemented")
			}
			return ec.directives.Hook_addUserInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]*model.AddUserInput); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.AddUserInput`, tmp))
		}
	}
	args["input"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["upsert"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upsert"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["upsert"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addVote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AddVoteInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNAddVoteInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddVoteInputᚄ(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addVoteInput == nil {
				return nil, errors.New("directive hook_addVoteInput is not implemented")
			}
			return ec.directives.Hook_addVoteInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.([]*model.AddVoteInput); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.AddVoteInput`, tmp))
		}
	}
	args["input"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["upsert"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upsert"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["upsert"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNBlobFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNCommentFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteCommentInput == nil {
				return nil, errors.New("directive hook_deleteCommentInput is not implemented")
			}
			return ec.directives.Hook_deleteCommentInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.CommentFilter); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.CommentFilter`, tmp))
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNContractFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteContractInput == nil {
				return nil, errors.New("directive hook_deleteContractInput is not implemented")
			}
			return ec.directives.Hook_deleteContractInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.ContractFilter); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.ContractFilter`, tmp))
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEventCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EventCountFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNEventCountFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEventFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EventFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNEventFragmentFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNEventFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNLabelFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteLabelInput == nil {
				return nil, errors.New("directive hook_deleteLabelInput is not implemented")
			}
			return ec.directives.Hook_deleteLabelInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.LabelFilter); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.LabelFilter`, tmp))
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNMandateFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNNodeFragmentFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNNodeFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteNotif_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NotifFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNNotifFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrgaAgg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrgaAggFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNOrgaAggFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePendingUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PendingUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNPendingUserFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNPostFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectColumn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProjectColumnFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNProjectColumnFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProjectTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNProjectTensionFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNProjectFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteProjectInput == nil {
				return nil, errors.New("directive hook_deleteProjectInput is not implemented")
			}
			return ec.directives.Hook_deleteProjectInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.ProjectFilter); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.ProjectFilter`, tmp))
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteReaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNReactionFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteReactionInput == nil {
				return nil, errors.New("directive hook_deleteReactionInput is not implemented")
			}
			return ec.directives.Hook_deleteReactionInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.ReactionFilter); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.ReactionFilter`, tmp))
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRoleExt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RoleExtFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNRoleExtFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteRoleExtInput == nil {
				return nil, errors.New("directive hook_deleteRoleExtInput is not implemented")
			}
			return ec.directives.Hook_deleteRoleExtInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.RoleExtFilter); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.RoleExtFilter`, tmp))
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNTensionFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteTensionInput == nil {
				return nil, errors.New("directive hook_deleteTensionInput is not implemented")
			}
			return ec.directives.Hook_deleteTensionInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.TensionFilter); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.TensionFilter`, tmp))
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserEventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserEventFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserRightsFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNUserRightsFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUserFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteUserInput == nil {
				return nil, errors.New("directive hook_deleteUserInput is not implemented")
			}
			return ec.directives.Hook_deleteUserInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UserFilter); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UserFilter`, tmp))
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteVote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNVoteFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteVoteInput == nil {
				return nil, errors.New("directive hook_deleteVoteInput is not implemented")
			}
			return ec.directives.Hook_deleteVoteInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.VoteFilter); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.VoteFilter`, tmp))
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateBlobInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateBlobInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateBlobInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateCommentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateCommentInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateCommentInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateCommentInput == nil {
				return nil, errors.New("directive hook_updateCommentInput is not implemented")
			}
			return ec.directives.Hook_updateCommentInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UpdateCommentInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UpdateCommentInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateContractInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateContractInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateContractInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateContractInput == nil {
				return nil, errors.New("directive hook_updateContractInput is not implemented")
			}
			return ec.directives.Hook_updateContractInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UpdateContractInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UpdateContractInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEventCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateEventCountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateEventCountInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventCountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEventFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateEventFragmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateEventFragmentInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventFragmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateEventInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateEventInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateLabelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateLabelInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateLabelInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateLabelInput == nil {
				return nil, errors.New("directive hook_updateLabelInput is not implemented")
			}
			return ec.directives.Hook_updateLabelInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UpdateLabelInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UpdateLabelInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMandateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateMandateInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateMandateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateNodeFragmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateNodeFragmentInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeFragmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateNodeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateNodeInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNotif_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateNotifInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateNotifInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNotifInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrgaAgg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateOrgaAggInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateOrgaAggInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateOrgaAggInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePendingUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdatePendingUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePendingUserInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePendingUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdatePostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePostInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectColumn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateProjectColumnInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateProjectColumnInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectColumnInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProjectTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateProjectTensionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateProjectTensionInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectTensionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateProjectInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateProjectInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateProjectInput == nil {
				return nil, errors.New("directive hook_updateProjectInput is not implemented")
			}
			return ec.directives.Hook_updateProjectInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UpdateProjectInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UpdateProjectInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateReactionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateReactionInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateReactionInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateReactionInput == nil {
				return nil, errors.New("directive hook_updateReactionInput is not implemented")
			}
			return ec.directives.Hook_updateReactionInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UpdateReactionInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UpdateReactionInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRoleExt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateRoleExtInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateRoleExtInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateRoleExtInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateRoleExtInput == nil {
				return nil, errors.New("directive hook_updateRoleExtInput is not implemented")
			}
			return ec.directives.Hook_updateRoleExtInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UpdateRoleExtInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UpdateRoleExtInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateTensionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateTensionInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateTensionInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateTensionInput == nil {
				return nil, errors.New("directive hook_updateTensionInput is not implemented")
			}
			return ec.directives.Hook_updateTensionInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UpdateTensionInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UpdateTensionInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateUserEventInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateUserEventInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserEventInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateUserRightsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateUserRightsInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserRightsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateUserInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateUserInput == nil {
				return nil, errors.New("directive hook_updateUserInput is not implemented")
			}
			return ec.directives.Hook_updateUserInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UpdateUserInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UpdateUserInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateVoteInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNUpdateVoteInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateVoteInput(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateVoteInput == nil {
				return nil, errors.New("directive hook_updateVoteInput is not implemented")
			}
			return ec.directives.Hook_updateVoteInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(model.UpdateVoteInput); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.UpdateVoteInput`, tmp))
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_NodeFragment_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_childrenAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_children_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_contractsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_contracts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.VoteOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOVoteOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_events_historyAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_events_history_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_first_link_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_labelsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_labels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOLabelOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_orga_agg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OrgaAggFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_parent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_pinnedAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_pinned_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_projectsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_projects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_role_ext_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RoleExtFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_rolesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RoleExtFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RoleExtFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.RoleExtOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalORoleExtOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_second_link_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_source_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_tensions_inAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_tensions_in_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_tensions_outAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_tensions_out_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Node_watchersAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Node_watchers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Notif_contract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Notif_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Notif_tension__args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_PendingUser_contractsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_PendingUser_contracts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ContractOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOContractOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Post_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_ProjectColumn_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_ProjectColumn_tensionsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_ProjectColumn_tensions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectTensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_ProjectTension_pc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectColumnFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_ProjectTension_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Project_columnsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectColumnFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Project_columns_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectColumnFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectColumnOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectColumnOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Project_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Project_leadersAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Project_leaders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Project_nodesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Project_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateEventCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventCountFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateEventFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateNotif_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NotifFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateOrgaAgg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OrgaAggFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregatePendingUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PendingUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregatePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPostFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateProjectColumn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectColumnFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateProjectTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateReaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateRoleExt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RoleExtFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateUserEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserEventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateUserRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserRightsFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aggregateVote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["contractid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractid"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contractid"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["nameid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nameid"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getNotif_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPendingUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProjectColumn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getProjectTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getReaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["reactionid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactionid"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reactionid"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getRoleExt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getVote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["voteid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voteid"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["voteid"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_queryBlob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOBlobOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_queryCommentInput == nil {
				return nil, errors.New("directive hook_queryCommentInput is not implemented")
			}
			return ec.directives.Hook_queryCommentInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*model.CommentFilter); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.CommentFilter`, tmp))
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOCommentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_queryContractInput == nil {
				return nil, errors.New("directive hook_queryContractInput is not implemented")
			}
			return ec.directives.Hook_queryContractInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*model.ContractFilter); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ContractFilter`, tmp))
		}
	}
	args["filter"] = arg0
	var arg1 *model.ContractOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOContractOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryEventCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventCountFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventCountOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventCountOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryEventFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryLabel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_queryLabelInput == nil {
				return nil, errors.New("directive hook_queryLabelInput is not implemented")
			}
			return ec.directives.Hook_queryLabelInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*model.LabelFilter); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.LabelFilter`, tmp))
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOLabelOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryMandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.MandateOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOMandateOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryNodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryNotif_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NotifFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NotifOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONotifOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryOrgaAgg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OrgaAggFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.OrgaAggOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOOrgaAggOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryPendingUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PendingUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PendingUserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOPendingUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPostFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PostOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOPostOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryProjectColumn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectColumnFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectColumnOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectColumnOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryProjectTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectTensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_queryProjectInput == nil {
				return nil, errors.New("directive hook_queryProjectInput is not implemented")
			}
			return ec.directives.Hook_queryProjectInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*model.ProjectFilter); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ProjectFilter`, tmp))
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryReaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_queryReactionInput == nil {
				return nil, errors.New("directive hook_queryReactionInput is not implemented")
			}
			return ec.directives.Hook_queryReactionInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*model.ReactionFilter); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ReactionFilter`, tmp))
		}
	}
	args["filter"] = arg0
	var arg1 *model.ReactionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOReactionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryRoleExt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RoleExtFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_queryRoleExtInput == nil {
				return nil, errors.New("directive hook_queryRoleExtInput is not implemented")
			}
			return ec.directives.Hook_queryRoleExtInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*model.RoleExtFilter); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.RoleExtFilter`, tmp))
		}
	}
	args["filter"] = arg0
	var arg1 *model.RoleExtOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalORoleExtOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_queryTensionInput == nil {
				return nil, errors.New("directive hook_queryTensionInput is not implemented")
			}
			return ec.directives.Hook_queryTensionInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*model.TensionFilter); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionFilter`, tmp))
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryUserEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserEventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserEventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryUserRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserRightsFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserRightsOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserRightsOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_queryUserInput == nil {
				return nil, errors.New("directive hook_queryUserInput is not implemented")
			}
			return ec.directives.Hook_queryUserInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*model.UserFilter); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserFilter`, tmp))
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_queryVote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_queryVoteInput == nil {
				return nil, errors.New("directive hook_queryVoteInput is not implemented")
			}
			return ec.directives.Hook_queryVoteInput(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*model.VoteFilter); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.VoteFilter`, tmp))
		}
	}
	args["filter"] = arg0
	var arg1 *model.VoteOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOVoteOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Reaction_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Reaction_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_RoleExt_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_RoleExt_nodesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_RoleExt_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_RoleExt_rolesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_RoleExt_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_assigneesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_assignees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_blobsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_blobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOBlobOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_commentsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOCommentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_contractsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_contracts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ContractOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOContractOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_emitter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_historyAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_history_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_labelsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_labels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOLabelOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_mentionsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_mentions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_projectsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_projects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectTensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Tension_receiver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_subscribersAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tension_subscribers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateBlobPayload_blob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.BlobOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOBlobOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateCommentPayload_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.CommentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOCommentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateContractPayload_contract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ContractOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOContractOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateEventCountPayload_eventCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventCountFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventCountOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventCountOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateEventFragmentPayload_eventFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateEventPayload_event_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.EventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateLabelPayload_label_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LabelFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.LabelOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOLabelOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateMandatePayload_mandate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MandateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.MandateOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOMandateOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateNodeFragmentPayload_nodeFragment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFragmentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeFragmentOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateNodePayload_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateNotifPayload_notif_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NotifFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NotifOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONotifOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateOrgaAggPayload_orgaAgg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OrgaAggFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.OrgaAggOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOOrgaAggOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdatePendingUserPayload_pendingUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PendingUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PendingUserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOPendingUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdatePostPayload_post_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOPostFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.PostOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOPostOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateProjectColumnPayload_projectColumn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectColumnFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectColumnOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectColumnOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateProjectPayload_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateProjectTensionPayload_projectTension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProjectTensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ProjectTensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOProjectTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateReactionPayload_reaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ReactionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOReactionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateRoleExtPayload_roleExt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RoleExtFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.RoleExtOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalORoleExtOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateTensionPayload_tension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateUserEventPayload_userEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserEventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserEventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateUserPayload_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateUserRightsPayload_userRights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserRightsFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserRightsOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserRightsOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UpdateVotePayload_vote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.VoteOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOVoteOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_UserEvent_event_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventKindFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventKindFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_UserEvent_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_backed_rolesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_backed_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_contractsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_contracts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ContractOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOContractOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_event_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventCountFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_eventsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserEventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserEventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.UserEventOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOUserEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_reactionsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_reactions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReactionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.ReactionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOReactionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_rights_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserRightsFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_rolesAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_subscriptionsAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_subscriptions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_tensions_assignedAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_tensions_assigned_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_tensions_createdAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_tensions_created_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TensionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.TensionOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_watchingAggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_watching_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *model.NodeOrder
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg1, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Vote_contract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContractFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Vote_createdBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Vote_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NodeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

func (ec *executionContext) _queryMiddleware(ctx context.Context, obj *ast.OperationDefinition, next func(ctx context.Context) (interface{}, error)) graphql.Marshaler {

	for _, d := range obj.Directives {
		switch d.Name {
		case "cacheControl":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_cacheControl_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.CacheControl == nil {
					return nil, errors.New("directive cacheControl is not implemented")
				}
				return ec.directives.CacheControl(ctx, obj, n, args["maxAge"].(int))
			}
		}
	}
	tmp, err := next(ctx)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if data, ok := tmp.(graphql.Marshaler); ok {
		return data
	}
	ec.Errorf(ctx, `unexpected type %T from directive, should be graphql.Marshaler`, tmp)
	return graphql.Null

}

func (ec *executionContext) _fieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) interface{} {
	fc := graphql.GetFieldContext(ctx)
	for _, d := range fc.Field.Directives {
		switch d.Name {
		case "cascade":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_cascade_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return nil
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Cascade == nil {
					return nil, errors.New("directive cascade is not implemented")
				}
				return ec.directives.Cascade(ctx, obj, n, args["fields"].([]*string))
			}
		}
	}
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AddBlobPayload_blob(ctx context.Context, field graphql.CollectedField, obj *model.AddBlobPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddBlobPayload_blob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blob, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddBlobPayload_blob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddBlobPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Blob_tension(ctx, field)
			case "blob_type":
				return ec.fieldContext_Blob_blob_type(ctx, field)
			case "pushedFlag":
				return ec.fieldContext_Blob_pushedFlag(ctx, field)
			case "archivedFlag":
				return ec.fieldContext_Blob_archivedFlag(ctx, field)
			case "node":
				return ec.fieldContext_Blob_node(ctx, field)
			case "md":
				return ec.fieldContext_Blob_md(ctx, field)
			case "id":
				return ec.fieldContext_Blob_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Blob_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Blob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Blob_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Blob_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blob", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddBlobPayload_blob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddBlobPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddBlobPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddBlobPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddBlobPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddBlobPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddCommentPayload_comment(ctx context.Context, field graphql.CollectedField, obj *model.AddCommentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddCommentPayload_comment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddCommentPayload_comment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddCommentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_Comment_message(ctx, field)
			case "reactions":
				return ec.fieldContext_Comment_reactions(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Comment_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Comment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Comment_updatedAt(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_Comment_reactionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddCommentPayload_comment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddCommentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddCommentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddCommentPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddCommentPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddCommentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddContractPayload_contract(ctx context.Context, field graphql.CollectedField, obj *model.AddContractPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddContractPayload_contract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contract, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddContractPayload_contract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddContractPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddContractPayload_contract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddContractPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddContractPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddContractPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddContractPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddContractPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddEventCountPayload_eventCount(ctx context.Context, field graphql.CollectedField, obj *model.AddEventCountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddEventCountPayload_eventCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventCount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventCount)
	fc.Result = res
	return ec.marshalOEventCount2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddEventCountPayload_eventCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddEventCountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "unread_events":
				return ec.fieldContext_EventCount_unread_events(ctx, field)
			case "pending_contracts":
				return ec.fieldContext_EventCount_pending_contracts(ctx, field)
			case "assigned_tensions":
				return ec.fieldContext_EventCount_assigned_tensions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventCount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddEventCountPayload_eventCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddEventCountPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddEventCountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddEventCountPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddEventCountPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddEventCountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddEventFragmentPayload_eventFragment(ctx context.Context, field graphql.CollectedField, obj *model.AddEventFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddEventFragmentPayload_eventFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventFragment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventFragment)
	fc.Result = res
	return ec.marshalOEventFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddEventFragmentPayload_eventFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddEventFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "event_type":
				return ec.fieldContext_EventFragment_event_type(ctx, field)
			case "old":
				return ec.fieldContext_EventFragment_old(ctx, field)
			case "new":
				return ec.fieldContext_EventFragment_new(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddEventFragmentPayload_eventFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddEventFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddEventFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddEventFragmentPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddEventFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddEventFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddEventPayload_event(ctx context.Context, field graphql.CollectedField, obj *model.AddEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddEventPayload_event(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddEventPayload_event(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Event_tension(ctx, field)
			case "event_type":
				return ec.fieldContext_Event_event_type(ctx, field)
			case "mentioned":
				return ec.fieldContext_Event_mentioned(ctx, field)
			case "old":
				return ec.fieldContext_Event_old(ctx, field)
			case "new":
				return ec.fieldContext_Event_new(ctx, field)
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Event_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Event_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Event_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Event_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddEventPayload_event_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddEventPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddEventPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddEventPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddLabelPayload_label(ctx context.Context, field graphql.CollectedField, obj *model.AddLabelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddLabelPayload_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddLabelPayload_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddLabelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Label_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Label_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_Label_name(ctx, field)
			case "description":
				return ec.fieldContext_Label_description(ctx, field)
			case "color":
				return ec.fieldContext_Label_color(ctx, field)
			case "tensions":
				return ec.fieldContext_Label_tensions(ctx, field)
			case "nodes":
				return ec.fieldContext_Label_nodes(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_Label_tensionsAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Label_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Label", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddLabelPayload_label_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddLabelPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddLabelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddLabelPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddLabelPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddLabelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddMandatePayload_mandate(ctx context.Context, field graphql.CollectedField, obj *model.AddMandatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddMandatePayload_mandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddMandatePayload_mandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddMandatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Mandate_id(ctx, field)
			case "purpose":
				return ec.fieldContext_Mandate_purpose(ctx, field)
			case "responsabilities":
				return ec.fieldContext_Mandate_responsabilities(ctx, field)
			case "domains":
				return ec.fieldContext_Mandate_domains(ctx, field)
			case "policies":
				return ec.fieldContext_Mandate_policies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Mandate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddMandatePayload_mandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddMandatePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddMandatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddMandatePayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddMandatePayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddMandatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddNodeFragmentPayload_nodeFragment(ctx context.Context, field graphql.CollectedField, obj *model.AddNodeFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddNodeFragmentPayload_nodeFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeFragment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddNodeFragmentPayload_nodeFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddNodeFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NodeFragment_id(ctx, field)
			case "nameid":
				return ec.fieldContext_NodeFragment_nameid(ctx, field)
			case "name":
				return ec.fieldContext_NodeFragment_name(ctx, field)
			case "about":
				return ec.fieldContext_NodeFragment_about(ctx, field)
			case "mandate":
				return ec.fieldContext_NodeFragment_mandate(ctx, field)
			case "skills":
				return ec.fieldContext_NodeFragment_skills(ctx, field)
			case "visibility":
				return ec.fieldContext_NodeFragment_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_NodeFragment_mode(ctx, field)
			case "type_":
				return ec.fieldContext_NodeFragment_type_(ctx, field)
			case "first_link":
				return ec.fieldContext_NodeFragment_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_NodeFragment_second_link(ctx, field)
			case "role_ext":
				return ec.fieldContext_NodeFragment_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_NodeFragment_role_type(ctx, field)
			case "color":
				return ec.fieldContext_NodeFragment_color(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddNodeFragmentPayload_nodeFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddNodeFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddNodeFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddNodeFragmentPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddNodeFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddNodeFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddNodePayload_node(ctx context.Context, field graphql.CollectedField, obj *model.AddNodePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddNodePayload_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddNodePayload_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddNodePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddNodePayload_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddNodePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddNodePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddNodePayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddNodePayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddNodePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddNotifPayload_notif(ctx context.Context, field graphql.CollectedField, obj *model.AddNotifPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddNotifPayload_notif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notif, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Notif)
	fc.Result = res
	return ec.marshalONotif2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotif(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddNotifPayload_notif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddNotifPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension_":
				return ec.fieldContext_Notif_tension_(ctx, field)
			case "contract":
				return ec.fieldContext_Notif_contract(ctx, field)
			case "link":
				return ec.fieldContext_Notif_link(ctx, field)
			case "id":
				return ec.fieldContext_Notif_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Notif_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notif_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notif_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Notif_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notif", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddNotifPayload_notif_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddNotifPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddNotifPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddNotifPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddNotifPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddNotifPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddOrgaAggPayload_orgaAgg(ctx context.Context, field graphql.CollectedField, obj *model.AddOrgaAggPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddOrgaAggPayload_orgaAgg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgaAgg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OrgaAgg)
	fc.Result = res
	return ec.marshalOOrgaAgg2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAgg(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddOrgaAggPayload_orgaAgg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddOrgaAggPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "n_members":
				return ec.fieldContext_OrgaAgg_n_members(ctx, field)
			case "n_guests":
				return ec.fieldContext_OrgaAgg_n_guests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgaAgg", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddOrgaAggPayload_orgaAgg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddOrgaAggPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddOrgaAggPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddOrgaAggPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddOrgaAggPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddOrgaAggPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddPendingUserPayload_pendingUser(ctx context.Context, field graphql.CollectedField, obj *model.AddPendingUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddPendingUserPayload_pendingUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingUser, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PendingUser)
	fc.Result = res
	return ec.marshalOPendingUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddPendingUserPayload_pendingUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddPendingUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PendingUser_id(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PendingUser_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_PendingUser_username(ctx, field)
			case "password":
				return ec.fieldContext_PendingUser_password(ctx, field)
			case "email":
				return ec.fieldContext_PendingUser_email(ctx, field)
			case "email_token":
				return ec.fieldContext_PendingUser_email_token(ctx, field)
			case "token":
				return ec.fieldContext_PendingUser_token(ctx, field)
			case "contracts":
				return ec.fieldContext_PendingUser_contracts(ctx, field)
			case "subscribe":
				return ec.fieldContext_PendingUser_subscribe(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_PendingUser_contractsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PendingUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddPendingUserPayload_pendingUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddPendingUserPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddPendingUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddPendingUserPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddPendingUserPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddPendingUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddProjectColumnPayload_projectColumn(ctx context.Context, field graphql.CollectedField, obj *model.AddProjectColumnPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddProjectColumnPayload_projectColumn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectColumn, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectColumn)
	fc.Result = res
	return ec.marshalOProjectColumn2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddProjectColumnPayload_projectColumn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddProjectColumnPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectColumn_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectColumn_name(ctx, field)
			case "about":
				return ec.fieldContext_ProjectColumn_about(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectColumn_pos(ctx, field)
			case "tensions":
				return ec.fieldContext_ProjectColumn_tensions(ctx, field)
			case "project":
				return ec.fieldContext_ProjectColumn_project(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_ProjectColumn_tensionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectColumn", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddProjectColumnPayload_projectColumn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddProjectColumnPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddProjectColumnPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddProjectColumnPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddProjectColumnPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddProjectColumnPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddProjectPayload_project(ctx context.Context, field graphql.CollectedField, obj *model.AddProjectPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddProjectPayload_project(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddProjectPayload_project(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddProjectPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Project_rootnameid(ctx, field)
			case "parentnameid":
				return ec.fieldContext_Project_parentnameid(ctx, field)
			case "nameid":
				return ec.fieldContext_Project_nameid(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "columns":
				return ec.fieldContext_Project_columns(ctx, field)
			case "leaders":
				return ec.fieldContext_Project_leaders(ctx, field)
			case "nodes":
				return ec.fieldContext_Project_nodes(ctx, field)
			case "columnsAggregate":
				return ec.fieldContext_Project_columnsAggregate(ctx, field)
			case "leadersAggregate":
				return ec.fieldContext_Project_leadersAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Project_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddProjectPayload_project_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddProjectPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddProjectPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddProjectPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddProjectPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddProjectPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddProjectTensionPayload_projectTension(ctx context.Context, field graphql.CollectedField, obj *model.AddProjectTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddProjectTensionPayload_projectTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTension, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectTension)
	fc.Result = res
	return ec.marshalOProjectTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddProjectTensionPayload_projectTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddProjectTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTension_id(ctx, field)
			case "tension":
				return ec.fieldContext_ProjectTension_tension(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectTension_pos(ctx, field)
			case "pc":
				return ec.fieldContext_ProjectTension_pc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddProjectTensionPayload_projectTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddProjectTensionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddProjectTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddProjectTensionPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddProjectTensionPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddProjectTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddReactionPayload_reaction(ctx context.Context, field graphql.CollectedField, obj *model.AddReactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddReactionPayload_reaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reaction, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Reaction)
	fc.Result = res
	return ec.marshalOReaction2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddReactionPayload_reaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddReactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reaction_id(ctx, field)
			case "reactionid":
				return ec.fieldContext_Reaction_reactionid(ctx, field)
			case "user":
				return ec.fieldContext_Reaction_user(ctx, field)
			case "comment":
				return ec.fieldContext_Reaction_comment(ctx, field)
			case "type_":
				return ec.fieldContext_Reaction_type_(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddReactionPayload_reaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddReactionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddReactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddReactionPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddReactionPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddReactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddRoleExtPayload_roleExt(ctx context.Context, field graphql.CollectedField, obj *model.AddRoleExtPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddRoleExtPayload_roleExt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleExt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RoleExt)
	fc.Result = res
	return ec.marshalORoleExt2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddRoleExtPayload_roleExt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddRoleExtPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleExt_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_RoleExt_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_RoleExt_name(ctx, field)
			case "about":
				return ec.fieldContext_RoleExt_about(ctx, field)
			case "role_type":
				return ec.fieldContext_RoleExt_role_type(ctx, field)
			case "color":
				return ec.fieldContext_RoleExt_color(ctx, field)
			case "mandate":
				return ec.fieldContext_RoleExt_mandate(ctx, field)
			case "roles":
				return ec.fieldContext_RoleExt_roles(ctx, field)
			case "nodes":
				return ec.fieldContext_RoleExt_nodes(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_RoleExt_rolesAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_RoleExt_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleExt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddRoleExtPayload_roleExt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddRoleExtPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddRoleExtPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddRoleExtPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddRoleExtPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddRoleExtPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddTensionPayload_tension(ctx context.Context, field graphql.CollectedField, obj *model.AddTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddTensionPayload_tension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tension, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddTensionPayload_tension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddTensionPayload_tension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddTensionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddTensionPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddTensionPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddUserEventPayload_userEvent(ctx context.Context, field graphql.CollectedField, obj *model.AddUserEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddUserEventPayload_userEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEvent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserEvent)
	fc.Result = res
	return ec.marshalOUserEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddUserEventPayload_userEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddUserEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserEvent_createdAt(ctx, field)
			case "isRead":
				return ec.fieldContext_UserEvent_isRead(ctx, field)
			case "user":
				return ec.fieldContext_UserEvent_user(ctx, field)
			case "event":
				return ec.fieldContext_UserEvent_event(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddUserEventPayload_userEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddUserEventPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddUserEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddUserEventPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddUserEventPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddUserEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddUserPayload_user(ctx context.Context, field graphql.CollectedField, obj *model.AddUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddUserPayload_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddUserPayload_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddUserPayload_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddUserPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddUserPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddUserPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddUserRightsPayload_userRights(ctx context.Context, field graphql.CollectedField, obj *model.AddUserRightsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddUserRightsPayload_userRights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRights, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserRights)
	fc.Result = res
	return ec.marshalOUserRights2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddUserRightsPayload_userRights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddUserRightsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type_":
				return ec.fieldContext_UserRights_type_(ctx, field)
			case "canLogin":
				return ec.fieldContext_UserRights_canLogin(ctx, field)
			case "canCreateRoot":
				return ec.fieldContext_UserRights_canCreateRoot(ctx, field)
			case "maxPublicOrga":
				return ec.fieldContext_UserRights_maxPublicOrga(ctx, field)
			case "maxPrivateOrga":
				return ec.fieldContext_UserRights_maxPrivateOrga(ctx, field)
			case "hasEmailNotifications":
				return ec.fieldContext_UserRights_hasEmailNotifications(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRights", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddUserRightsPayload_userRights_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddUserRightsPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddUserRightsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddUserRightsPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddUserRightsPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddUserRightsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddVotePayload_vote(ctx context.Context, field graphql.CollectedField, obj *model.AddVotePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddVotePayload_vote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vote, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Vote)
	fc.Result = res
	return ec.marshalOVote2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddVotePayload_vote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddVotePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "voteid":
				return ec.fieldContext_Vote_voteid(ctx, field)
			case "contract":
				return ec.fieldContext_Vote_contract(ctx, field)
			case "node":
				return ec.fieldContext_Vote_node(ctx, field)
			case "data":
				return ec.fieldContext_Vote_data(ctx, field)
			case "id":
				return ec.fieldContext_Vote_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Vote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vote_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vote_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Vote_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AddVotePayload_vote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AddVotePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.AddVotePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddVotePayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddVotePayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddVotePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_tension(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_tension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tension, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tension)
	fc.Result = res
	return ec.marshalNTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_tension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Blob_tension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Blob_blob_type(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_blob_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlobType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.BlobType)
	fc.Result = res
	return ec.marshalNBlobType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_blob_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BlobType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_pushedFlag(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_pushedFlag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushedFlag, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_pushedFlag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_archivedFlag(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_archivedFlag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchivedFlag, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_archivedFlag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_node(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NodeFragment_id(ctx, field)
			case "nameid":
				return ec.fieldContext_NodeFragment_nameid(ctx, field)
			case "name":
				return ec.fieldContext_NodeFragment_name(ctx, field)
			case "about":
				return ec.fieldContext_NodeFragment_about(ctx, field)
			case "mandate":
				return ec.fieldContext_NodeFragment_mandate(ctx, field)
			case "skills":
				return ec.fieldContext_NodeFragment_skills(ctx, field)
			case "visibility":
				return ec.fieldContext_NodeFragment_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_NodeFragment_mode(ctx, field)
			case "type_":
				return ec.fieldContext_NodeFragment_type_(ctx, field)
			case "first_link":
				return ec.fieldContext_NodeFragment_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_NodeFragment_second_link(ctx, field)
			case "role_ext":
				return ec.fieldContext_NodeFragment_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_NodeFragment_role_type(ctx, field)
			case "color":
				return ec.fieldContext_NodeFragment_color(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Blob_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Blob_md(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_md(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Md, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_md(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_id(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Blob_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Blob_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_message(ctx context.Context, field graphql.CollectedField, obj *model.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_messageMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_messageMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_pushedFlagMin(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_pushedFlagMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushedFlagMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_pushedFlagMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_pushedFlagMax(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_pushedFlagMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushedFlagMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_pushedFlagMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_archivedFlagMin(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_archivedFlagMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchivedFlagMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_archivedFlagMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_archivedFlagMax(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_archivedFlagMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchivedFlagMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_archivedFlagMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_mdMin(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_mdMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MdMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_mdMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobAggregateResult_mdMax(ctx context.Context, field graphql.CollectedField, obj *model.BlobAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobAggregateResult_mdMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MdMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobAggregateResult_mdMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_message(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_reactions(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_reactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reactions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Reaction)
	fc.Result = res
	return ec.marshalOReaction2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_reactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reaction_id(ctx, field)
			case "reactionid":
				return ec.fieldContext_Reaction_reactionid(ctx, field)
			case "user":
				return ec.fieldContext_Reaction_user(ctx, field)
			case "comment":
				return ec.fieldContext_Reaction_comment(ctx, field)
			case "type_":
				return ec.fieldContext_Reaction_type_(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Comment_reactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Comment_id(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Comment_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Comment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_reactionsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_reactionsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReactionsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ReactionAggregateResult)
	fc.Result = res
	return ec.marshalOReactionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_reactionsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ReactionAggregateResult_count(ctx, field)
			case "reactionidMin":
				return ec.fieldContext_ReactionAggregateResult_reactionidMin(ctx, field)
			case "reactionidMax":
				return ec.fieldContext_ReactionAggregateResult_reactionidMax(ctx, field)
			case "type_Min":
				return ec.fieldContext_ReactionAggregateResult_type_Min(ctx, field)
			case "type_Max":
				return ec.fieldContext_ReactionAggregateResult_type_Max(ctx, field)
			case "type_Sum":
				return ec.fieldContext_ReactionAggregateResult_type_Sum(ctx, field)
			case "type_Avg":
				return ec.fieldContext_ReactionAggregateResult_type_Avg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReactionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Comment_reactionsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _CommentAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.CommentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.CommentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.CommentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.CommentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.CommentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField, obj *model.CommentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentAggregateResult_messageMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommentAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField, obj *model.CommentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommentAggregateResult_messageMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommentAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_contractid(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_contractid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contractid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_contractid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_tension(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_tension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tension, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tension)
	fc.Result = res
	return ec.marshalNTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_tension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_tension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_status(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContractStatus)
	fc.Result = res
	return ec.marshalNContractStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_contract_type(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_contract_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContractType)
	fc.Result = res
	return ec.marshalNContractType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_contract_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_closedAt(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_closedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClosedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_closedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_event(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_event(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EventFragment)
	fc.Result = res
	return ec.marshalNEventFragment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_event(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "event_type":
				return ec.fieldContext_EventFragment_event_type(ctx, field)
			case "old":
				return ec.fieldContext_EventFragment_old(ctx, field)
			case "new":
				return ec.fieldContext_EventFragment_new(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_event_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_participants(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_participants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participants, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Vote)
	fc.Result = res
	return ec.marshalNVote2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_participants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "voteid":
				return ec.fieldContext_Vote_voteid(ctx, field)
			case "contract":
				return ec.fieldContext_Vote_contract(ctx, field)
			case "node":
				return ec.fieldContext_Vote_node(ctx, field)
			case "data":
				return ec.fieldContext_Vote_data(ctx, field)
			case "id":
				return ec.fieldContext_Vote_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Vote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vote_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vote_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Vote_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_participants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_candidates(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_candidates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Candidates, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_candidates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_candidates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_pending_candidates(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_pending_candidates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingCandidates, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PendingUser)
	fc.Result = res
	return ec.marshalOPendingUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_pending_candidates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PendingUser_id(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PendingUser_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_PendingUser_username(ctx, field)
			case "password":
				return ec.fieldContext_PendingUser_password(ctx, field)
			case "email":
				return ec.fieldContext_PendingUser_email(ctx, field)
			case "email_token":
				return ec.fieldContext_PendingUser_email_token(ctx, field)
			case "token":
				return ec.fieldContext_PendingUser_token(ctx, field)
			case "contracts":
				return ec.fieldContext_PendingUser_contracts(ctx, field)
			case "subscribe":
				return ec.fieldContext_PendingUser_subscribe(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_PendingUser_contractsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PendingUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_pending_candidates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_comments(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_Comment_message(ctx, field)
			case "reactions":
				return ec.fieldContext_Comment_reactions(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Comment_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Comment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Comment_updatedAt(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_Comment_reactionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_comments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_isValidator(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_isValidator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.IsValidator, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsContractValidator == nil {
				return nil, errors.New("directive isContractValidator is not implemented")
			}
			return ec.directives.IsContractValidator(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_isValidator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_id(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_message(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_participantsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_participantsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoteAggregateResult)
	fc.Result = res
	return ec.marshalOVoteAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_participantsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_VoteAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_VoteAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_VoteAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_VoteAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_VoteAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_VoteAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_VoteAggregateResult_messageMax(ctx, field)
			case "voteidMin":
				return ec.fieldContext_VoteAggregateResult_voteidMin(ctx, field)
			case "voteidMax":
				return ec.fieldContext_VoteAggregateResult_voteidMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VoteAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_participantsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_candidatesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_candidatesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CandidatesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserAggregateResult)
	fc.Result = res
	return ec.marshalOUserAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_candidatesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_UserAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_UserAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_UserAggregateResult_createdAtMax(ctx, field)
			case "lastAckMin":
				return ec.fieldContext_UserAggregateResult_lastAckMin(ctx, field)
			case "lastAckMax":
				return ec.fieldContext_UserAggregateResult_lastAckMax(ctx, field)
			case "usernameMin":
				return ec.fieldContext_UserAggregateResult_usernameMin(ctx, field)
			case "usernameMax":
				return ec.fieldContext_UserAggregateResult_usernameMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_UserAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_UserAggregateResult_nameMax(ctx, field)
			case "emailMin":
				return ec.fieldContext_UserAggregateResult_emailMin(ctx, field)
			case "emailMax":
				return ec.fieldContext_UserAggregateResult_emailMax(ctx, field)
			case "passwordMin":
				return ec.fieldContext_UserAggregateResult_passwordMin(ctx, field)
			case "passwordMax":
				return ec.fieldContext_UserAggregateResult_passwordMax(ctx, field)
			case "bioMin":
				return ec.fieldContext_UserAggregateResult_bioMin(ctx, field)
			case "bioMax":
				return ec.fieldContext_UserAggregateResult_bioMax(ctx, field)
			case "locationMin":
				return ec.fieldContext_UserAggregateResult_locationMin(ctx, field)
			case "locationMax":
				return ec.fieldContext_UserAggregateResult_locationMax(ctx, field)
			case "utcMin":
				return ec.fieldContext_UserAggregateResult_utcMin(ctx, field)
			case "utcMax":
				return ec.fieldContext_UserAggregateResult_utcMax(ctx, field)
			case "markAllAsReadMin":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMin(ctx, field)
			case "markAllAsReadMax":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_candidatesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_pending_candidatesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingCandidatesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PendingUserAggregateResult)
	fc.Result = res
	return ec.marshalOPendingUserAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_pending_candidatesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_PendingUserAggregateResult_count(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_PendingUserAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_PendingUserAggregateResult_updatedAtMax(ctx, field)
			case "usernameMin":
				return ec.fieldContext_PendingUserAggregateResult_usernameMin(ctx, field)
			case "usernameMax":
				return ec.fieldContext_PendingUserAggregateResult_usernameMax(ctx, field)
			case "passwordMin":
				return ec.fieldContext_PendingUserAggregateResult_passwordMin(ctx, field)
			case "passwordMax":
				return ec.fieldContext_PendingUserAggregateResult_passwordMax(ctx, field)
			case "emailMin":
				return ec.fieldContext_PendingUserAggregateResult_emailMin(ctx, field)
			case "emailMax":
				return ec.fieldContext_PendingUserAggregateResult_emailMax(ctx, field)
			case "email_tokenMin":
				return ec.fieldContext_PendingUserAggregateResult_email_tokenMin(ctx, field)
			case "email_tokenMax":
				return ec.fieldContext_PendingUserAggregateResult_email_tokenMax(ctx, field)
			case "tokenMin":
				return ec.fieldContext_PendingUserAggregateResult_tokenMin(ctx, field)
			case "tokenMax":
				return ec.fieldContext_PendingUserAggregateResult_tokenMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PendingUserAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_pending_candidatesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Contract_commentsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_commentsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommentAggregateResult)
	fc.Result = res
	return ec.marshalOCommentAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_commentsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_CommentAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_CommentAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_CommentAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_CommentAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_CommentAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_CommentAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_CommentAggregateResult_messageMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommentAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contract_commentsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_messageMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_messageMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_contractidMin(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_contractidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_contractidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_contractidMax(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_contractidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_contractidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_closedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_closedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClosedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_closedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractAggregateResult_closedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.ContractAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractAggregateResult_closedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClosedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractAggregateResult_closedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteBlobPayload_blob(ctx context.Context, field graphql.CollectedField, obj *model.DeleteBlobPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteBlobPayload_blob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blob, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteBlobPayload_blob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteBlobPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Blob_tension(ctx, field)
			case "blob_type":
				return ec.fieldContext_Blob_blob_type(ctx, field)
			case "pushedFlag":
				return ec.fieldContext_Blob_pushedFlag(ctx, field)
			case "archivedFlag":
				return ec.fieldContext_Blob_archivedFlag(ctx, field)
			case "node":
				return ec.fieldContext_Blob_node(ctx, field)
			case "md":
				return ec.fieldContext_Blob_md(ctx, field)
			case "id":
				return ec.fieldContext_Blob_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Blob_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Blob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Blob_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Blob_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blob", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteBlobPayload_blob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteBlobPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteBlobPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteBlobPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteBlobPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteBlobPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteBlobPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteBlobPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteBlobPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteBlobPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteBlobPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteCommentPayload_comment(ctx context.Context, field graphql.CollectedField, obj *model.DeleteCommentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteCommentPayload_comment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteCommentPayload_comment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteCommentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_Comment_message(ctx, field)
			case "reactions":
				return ec.fieldContext_Comment_reactions(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Comment_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Comment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Comment_updatedAt(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_Comment_reactionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteCommentPayload_comment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteCommentPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteCommentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteCommentPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteCommentPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteCommentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteCommentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteCommentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteCommentPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteCommentPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteCommentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteContractPayload_contract(ctx context.Context, field graphql.CollectedField, obj *model.DeleteContractPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteContractPayload_contract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contract, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteContractPayload_contract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteContractPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteContractPayload_contract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteContractPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteContractPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteContractPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteContractPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteContractPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteContractPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteContractPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteContractPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteContractPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteContractPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteEventCountPayload_eventCount(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventCountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteEventCountPayload_eventCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventCount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventCount)
	fc.Result = res
	return ec.marshalOEventCount2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteEventCountPayload_eventCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteEventCountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "unread_events":
				return ec.fieldContext_EventCount_unread_events(ctx, field)
			case "pending_contracts":
				return ec.fieldContext_EventCount_pending_contracts(ctx, field)
			case "assigned_tensions":
				return ec.fieldContext_EventCount_assigned_tensions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventCount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteEventCountPayload_eventCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteEventCountPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventCountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteEventCountPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteEventCountPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteEventCountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteEventCountPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventCountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteEventCountPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteEventCountPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteEventCountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteEventFragmentPayload_eventFragment(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteEventFragmentPayload_eventFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventFragment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventFragment)
	fc.Result = res
	return ec.marshalOEventFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteEventFragmentPayload_eventFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteEventFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "event_type":
				return ec.fieldContext_EventFragment_event_type(ctx, field)
			case "old":
				return ec.fieldContext_EventFragment_old(ctx, field)
			case "new":
				return ec.fieldContext_EventFragment_new(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteEventFragmentPayload_eventFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteEventFragmentPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteEventFragmentPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteEventFragmentPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteEventFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteEventFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteEventFragmentPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteEventFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteEventFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteEventPayload_event(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteEventPayload_event(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteEventPayload_event(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Event_tension(ctx, field)
			case "event_type":
				return ec.fieldContext_Event_event_type(ctx, field)
			case "mentioned":
				return ec.fieldContext_Event_mentioned(ctx, field)
			case "old":
				return ec.fieldContext_Event_old(ctx, field)
			case "new":
				return ec.fieldContext_Event_new(ctx, field)
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Event_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Event_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Event_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Event_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteEventPayload_event_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteEventPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteEventPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteEventPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteEventPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteEventPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteEventPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteLabelPayload_label(ctx context.Context, field graphql.CollectedField, obj *model.DeleteLabelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteLabelPayload_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteLabelPayload_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteLabelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Label_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Label_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_Label_name(ctx, field)
			case "description":
				return ec.fieldContext_Label_description(ctx, field)
			case "color":
				return ec.fieldContext_Label_color(ctx, field)
			case "tensions":
				return ec.fieldContext_Label_tensions(ctx, field)
			case "nodes":
				return ec.fieldContext_Label_nodes(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_Label_tensionsAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Label_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Label", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteLabelPayload_label_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteLabelPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteLabelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteLabelPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteLabelPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteLabelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteLabelPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteLabelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteLabelPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteLabelPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteLabelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMandatePayload_mandate(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMandatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMandatePayload_mandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMandatePayload_mandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMandatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Mandate_id(ctx, field)
			case "purpose":
				return ec.fieldContext_Mandate_purpose(ctx, field)
			case "responsabilities":
				return ec.fieldContext_Mandate_responsabilities(ctx, field)
			case "domains":
				return ec.fieldContext_Mandate_domains(ctx, field)
			case "policies":
				return ec.fieldContext_Mandate_policies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Mandate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteMandatePayload_mandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMandatePayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMandatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMandatePayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMandatePayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMandatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMandatePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMandatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMandatePayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMandatePayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMandatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteNodeFragmentPayload_nodeFragment(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodeFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteNodeFragmentPayload_nodeFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeFragment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteNodeFragmentPayload_nodeFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteNodeFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NodeFragment_id(ctx, field)
			case "nameid":
				return ec.fieldContext_NodeFragment_nameid(ctx, field)
			case "name":
				return ec.fieldContext_NodeFragment_name(ctx, field)
			case "about":
				return ec.fieldContext_NodeFragment_about(ctx, field)
			case "mandate":
				return ec.fieldContext_NodeFragment_mandate(ctx, field)
			case "skills":
				return ec.fieldContext_NodeFragment_skills(ctx, field)
			case "visibility":
				return ec.fieldContext_NodeFragment_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_NodeFragment_mode(ctx, field)
			case "type_":
				return ec.fieldContext_NodeFragment_type_(ctx, field)
			case "first_link":
				return ec.fieldContext_NodeFragment_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_NodeFragment_second_link(ctx, field)
			case "role_ext":
				return ec.fieldContext_NodeFragment_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_NodeFragment_role_type(ctx, field)
			case "color":
				return ec.fieldContext_NodeFragment_color(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteNodeFragmentPayload_nodeFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteNodeFragmentPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodeFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteNodeFragmentPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteNodeFragmentPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteNodeFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteNodeFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodeFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteNodeFragmentPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteNodeFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteNodeFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteNodePayload_node(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteNodePayload_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteNodePayload_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteNodePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteNodePayload_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteNodePayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteNodePayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteNodePayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteNodePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteNodePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNodePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteNodePayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteNodePayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteNodePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteNotifPayload_notif(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNotifPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteNotifPayload_notif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notif, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Notif)
	fc.Result = res
	return ec.marshalONotif2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotif(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteNotifPayload_notif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteNotifPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension_":
				return ec.fieldContext_Notif_tension_(ctx, field)
			case "contract":
				return ec.fieldContext_Notif_contract(ctx, field)
			case "link":
				return ec.fieldContext_Notif_link(ctx, field)
			case "id":
				return ec.fieldContext_Notif_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Notif_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notif_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notif_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Notif_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notif", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteNotifPayload_notif_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteNotifPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNotifPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteNotifPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteNotifPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteNotifPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteNotifPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteNotifPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteNotifPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteNotifPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteNotifPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteOrgaAggPayload_orgaAgg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteOrgaAggPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteOrgaAggPayload_orgaAgg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgaAgg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OrgaAgg)
	fc.Result = res
	return ec.marshalOOrgaAgg2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAgg(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteOrgaAggPayload_orgaAgg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteOrgaAggPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "n_members":
				return ec.fieldContext_OrgaAgg_n_members(ctx, field)
			case "n_guests":
				return ec.fieldContext_OrgaAgg_n_guests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgaAgg", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteOrgaAggPayload_orgaAgg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteOrgaAggPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteOrgaAggPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteOrgaAggPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteOrgaAggPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteOrgaAggPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteOrgaAggPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteOrgaAggPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteOrgaAggPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteOrgaAggPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteOrgaAggPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePendingUserPayload_pendingUser(ctx context.Context, field graphql.CollectedField, obj *model.DeletePendingUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePendingUserPayload_pendingUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingUser, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PendingUser)
	fc.Result = res
	return ec.marshalOPendingUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePendingUserPayload_pendingUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePendingUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PendingUser_id(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PendingUser_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_PendingUser_username(ctx, field)
			case "password":
				return ec.fieldContext_PendingUser_password(ctx, field)
			case "email":
				return ec.fieldContext_PendingUser_email(ctx, field)
			case "email_token":
				return ec.fieldContext_PendingUser_email_token(ctx, field)
			case "token":
				return ec.fieldContext_PendingUser_token(ctx, field)
			case "contracts":
				return ec.fieldContext_PendingUser_contracts(ctx, field)
			case "subscribe":
				return ec.fieldContext_PendingUser_subscribe(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_PendingUser_contractsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PendingUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeletePendingUserPayload_pendingUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeletePendingUserPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeletePendingUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePendingUserPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePendingUserPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePendingUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePendingUserPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeletePendingUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePendingUserPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePendingUserPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePendingUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePostPayload_post(ctx context.Context, field graphql.CollectedField, obj *model.DeletePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePostPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Post)
	fc.Result = res
	return ec.marshalOPost2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePostPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Post_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Post_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Post_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeletePostPayload_post_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeletePostPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeletePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePostPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePostPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePostPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeletePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePostPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePostPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProjectColumnPayload_projectColumn(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProjectColumnPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProjectColumnPayload_projectColumn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectColumn, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectColumn)
	fc.Result = res
	return ec.marshalOProjectColumn2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProjectColumnPayload_projectColumn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProjectColumnPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectColumn_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectColumn_name(ctx, field)
			case "about":
				return ec.fieldContext_ProjectColumn_about(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectColumn_pos(ctx, field)
			case "tensions":
				return ec.fieldContext_ProjectColumn_tensions(ctx, field)
			case "project":
				return ec.fieldContext_ProjectColumn_project(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_ProjectColumn_tensionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectColumn", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteProjectColumnPayload_projectColumn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProjectColumnPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProjectColumnPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProjectColumnPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProjectColumnPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProjectColumnPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProjectColumnPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProjectColumnPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProjectColumnPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProjectColumnPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProjectColumnPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProjectPayload_project(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProjectPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProjectPayload_project(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProjectPayload_project(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProjectPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Project_rootnameid(ctx, field)
			case "parentnameid":
				return ec.fieldContext_Project_parentnameid(ctx, field)
			case "nameid":
				return ec.fieldContext_Project_nameid(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "columns":
				return ec.fieldContext_Project_columns(ctx, field)
			case "leaders":
				return ec.fieldContext_Project_leaders(ctx, field)
			case "nodes":
				return ec.fieldContext_Project_nodes(ctx, field)
			case "columnsAggregate":
				return ec.fieldContext_Project_columnsAggregate(ctx, field)
			case "leadersAggregate":
				return ec.fieldContext_Project_leadersAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Project_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteProjectPayload_project_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProjectPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProjectPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProjectPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProjectPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProjectPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProjectPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProjectPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProjectPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProjectPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProjectPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProjectTensionPayload_projectTension(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProjectTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProjectTensionPayload_projectTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTension, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectTension)
	fc.Result = res
	return ec.marshalOProjectTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProjectTensionPayload_projectTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProjectTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTension_id(ctx, field)
			case "tension":
				return ec.fieldContext_ProjectTension_tension(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectTension_pos(ctx, field)
			case "pc":
				return ec.fieldContext_ProjectTension_pc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteProjectTensionPayload_projectTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProjectTensionPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProjectTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProjectTensionPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProjectTensionPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProjectTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProjectTensionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProjectTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProjectTensionPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProjectTensionPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProjectTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteReactionPayload_reaction(ctx context.Context, field graphql.CollectedField, obj *model.DeleteReactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteReactionPayload_reaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reaction, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Reaction)
	fc.Result = res
	return ec.marshalOReaction2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteReactionPayload_reaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteReactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reaction_id(ctx, field)
			case "reactionid":
				return ec.fieldContext_Reaction_reactionid(ctx, field)
			case "user":
				return ec.fieldContext_Reaction_user(ctx, field)
			case "comment":
				return ec.fieldContext_Reaction_comment(ctx, field)
			case "type_":
				return ec.fieldContext_Reaction_type_(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteReactionPayload_reaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteReactionPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteReactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteReactionPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteReactionPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteReactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteReactionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteReactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteReactionPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteReactionPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteReactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteRoleExtPayload_roleExt(ctx context.Context, field graphql.CollectedField, obj *model.DeleteRoleExtPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteRoleExtPayload_roleExt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleExt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RoleExt)
	fc.Result = res
	return ec.marshalORoleExt2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteRoleExtPayload_roleExt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteRoleExtPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleExt_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_RoleExt_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_RoleExt_name(ctx, field)
			case "about":
				return ec.fieldContext_RoleExt_about(ctx, field)
			case "role_type":
				return ec.fieldContext_RoleExt_role_type(ctx, field)
			case "color":
				return ec.fieldContext_RoleExt_color(ctx, field)
			case "mandate":
				return ec.fieldContext_RoleExt_mandate(ctx, field)
			case "roles":
				return ec.fieldContext_RoleExt_roles(ctx, field)
			case "nodes":
				return ec.fieldContext_RoleExt_nodes(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_RoleExt_rolesAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_RoleExt_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleExt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteRoleExtPayload_roleExt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteRoleExtPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteRoleExtPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteRoleExtPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteRoleExtPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteRoleExtPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteRoleExtPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteRoleExtPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteRoleExtPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteRoleExtPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteRoleExtPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteTensionPayload_tension(ctx context.Context, field graphql.CollectedField, obj *model.DeleteTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteTensionPayload_tension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tension, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteTensionPayload_tension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteTensionPayload_tension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteTensionPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteTensionPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteTensionPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteTensionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteTensionPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteTensionPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteUserEventPayload_userEvent(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteUserEventPayload_userEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEvent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserEvent)
	fc.Result = res
	return ec.marshalOUserEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteUserEventPayload_userEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteUserEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserEvent_createdAt(ctx, field)
			case "isRead":
				return ec.fieldContext_UserEvent_isRead(ctx, field)
			case "user":
				return ec.fieldContext_UserEvent_user(ctx, field)
			case "event":
				return ec.fieldContext_UserEvent_event(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteUserEventPayload_userEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteUserEventPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteUserEventPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteUserEventPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteUserEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteUserEventPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteUserEventPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteUserEventPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteUserEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteUserPayload_user(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteUserPayload_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteUserPayload_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteUserPayload_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteUserPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteUserPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteUserPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteUserPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteUserPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteUserPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteUserRightsPayload_userRights(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserRightsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteUserRightsPayload_userRights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRights, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserRights)
	fc.Result = res
	return ec.marshalOUserRights2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteUserRightsPayload_userRights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteUserRightsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type_":
				return ec.fieldContext_UserRights_type_(ctx, field)
			case "canLogin":
				return ec.fieldContext_UserRights_canLogin(ctx, field)
			case "canCreateRoot":
				return ec.fieldContext_UserRights_canCreateRoot(ctx, field)
			case "maxPublicOrga":
				return ec.fieldContext_UserRights_maxPublicOrga(ctx, field)
			case "maxPrivateOrga":
				return ec.fieldContext_UserRights_maxPrivateOrga(ctx, field)
			case "hasEmailNotifications":
				return ec.fieldContext_UserRights_hasEmailNotifications(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRights", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteUserRightsPayload_userRights_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteUserRightsPayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserRightsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteUserRightsPayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteUserRightsPayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteUserRightsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteUserRightsPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteUserRightsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteUserRightsPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteUserRightsPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteUserRightsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteVotePayload_vote(ctx context.Context, field graphql.CollectedField, obj *model.DeleteVotePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteVotePayload_vote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vote, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Vote)
	fc.Result = res
	return ec.marshalOVote2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteVotePayload_vote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteVotePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "voteid":
				return ec.fieldContext_Vote_voteid(ctx, field)
			case "contract":
				return ec.fieldContext_Vote_contract(ctx, field)
			case "node":
				return ec.fieldContext_Vote_node(ctx, field)
			case "data":
				return ec.fieldContext_Vote_data(ctx, field)
			case "id":
				return ec.fieldContext_Vote_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Vote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vote_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vote_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Vote_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeleteVotePayload_vote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DeleteVotePayload_msg(ctx context.Context, field graphql.CollectedField, obj *model.DeleteVotePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteVotePayload_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteVotePayload_msg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteVotePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteVotePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.DeleteVotePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteVotePayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteVotePayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteVotePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_tension(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_tension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tension, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tension)
	fc.Result = res
	return ec.marshalNTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_tension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Event_tension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Event_event_type(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_event_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TensionEvent)
	fc.Result = res
	return ec.marshalNTensionEvent2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_event_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TensionEvent does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_mentioned(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_mentioned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mentioned, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_mentioned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Event_mentioned_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Event_old(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_old(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Old, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_old(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_new(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_new(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.New, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_new(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_id(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Event_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Event_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_message(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_messageMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_messageMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_oldMin(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_oldMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_oldMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_oldMax(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_oldMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_oldMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_newMin(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_newMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_newMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventAggregateResult_newMax(ctx context.Context, field graphql.CollectedField, obj *model.EventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventAggregateResult_newMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventAggregateResult_newMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCount_unread_events(ctx context.Context, field graphql.CollectedField, obj *model.EventCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCount_unread_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnreadEvents, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCount_unread_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCount_pending_contracts(ctx context.Context, field graphql.CollectedField, obj *model.EventCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCount_pending_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingContracts, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCount_pending_contracts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCount_assigned_tensions(ctx context.Context, field graphql.CollectedField, obj *model.EventCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCount_assigned_tensions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedTensions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCount_assigned_tensions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_unread_eventsMin(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_unread_eventsMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnreadEventsMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_unread_eventsMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_unread_eventsMax(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_unread_eventsMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnreadEventsMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_unread_eventsMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_unread_eventsSum(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_unread_eventsSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnreadEventsSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_unread_eventsSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_unread_eventsAvg(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_unread_eventsAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnreadEventsAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_unread_eventsAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_pending_contractsMin(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_pending_contractsMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingContractsMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_pending_contractsMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_pending_contractsMax(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_pending_contractsMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingContractsMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_pending_contractsMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_pending_contractsSum(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_pending_contractsSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingContractsSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_pending_contractsSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_pending_contractsAvg(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_pending_contractsAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingContractsAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_pending_contractsAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_assigned_tensionsMin(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_assigned_tensionsMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedTensionsMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_assigned_tensionsMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_assigned_tensionsMax(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_assigned_tensionsMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedTensionsMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_assigned_tensionsMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_assigned_tensionsSum(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_assigned_tensionsSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedTensionsSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_assigned_tensionsSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventCountAggregateResult_assigned_tensionsAvg(ctx context.Context, field graphql.CollectedField, obj *model.EventCountAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventCountAggregateResult_assigned_tensionsAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedTensionsAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventCountAggregateResult_assigned_tensionsAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventCountAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFragment_event_type(ctx context.Context, field graphql.CollectedField, obj *model.EventFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFragment_event_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TensionEvent)
	fc.Result = res
	return ec.marshalNTensionEvent2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFragment_event_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TensionEvent does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFragment_old(ctx context.Context, field graphql.CollectedField, obj *model.EventFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFragment_old(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Old, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFragment_old(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFragment_new(ctx context.Context, field graphql.CollectedField, obj *model.EventFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFragment_new(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.New, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFragment_new(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFragmentAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.EventFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFragmentAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFragmentAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFragmentAggregateResult_oldMin(ctx context.Context, field graphql.CollectedField, obj *model.EventFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFragmentAggregateResult_oldMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFragmentAggregateResult_oldMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFragmentAggregateResult_oldMax(ctx context.Context, field graphql.CollectedField, obj *model.EventFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFragmentAggregateResult_oldMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFragmentAggregateResult_oldMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFragmentAggregateResult_newMin(ctx context.Context, field graphql.CollectedField, obj *model.EventFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFragmentAggregateResult_newMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFragmentAggregateResult_newMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFragmentAggregateResult_newMax(ctx context.Context, field graphql.CollectedField, obj *model.EventFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFragmentAggregateResult_newMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFragmentAggregateResult_newMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Label_id(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Label_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Label_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Label_rootnameid(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Label_rootnameid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rootnameid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Label_rootnameid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Label_name(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Label_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Label_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Label_description(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Label_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Label_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Label_color(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Label_color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Label_color(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Label_tensions(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Label_tensions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tensions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Label_tensions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Label_tensions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Label_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Label_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Label_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Label_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Label_tensionsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Label_tensionsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TensionsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAggregateResult)
	fc.Result = res
	return ec.marshalOTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Label_tensionsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_TensionAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_TensionAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_TensionAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_TensionAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_TensionAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_TensionAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_TensionAggregateResult_messageMax(ctx, field)
			case "emitteridMin":
				return ec.fieldContext_TensionAggregateResult_emitteridMin(ctx, field)
			case "emitteridMax":
				return ec.fieldContext_TensionAggregateResult_emitteridMax(ctx, field)
			case "receiveridMin":
				return ec.fieldContext_TensionAggregateResult_receiveridMin(ctx, field)
			case "receiveridMax":
				return ec.fieldContext_TensionAggregateResult_receiveridMax(ctx, field)
			case "titleMin":
				return ec.fieldContext_TensionAggregateResult_titleMin(ctx, field)
			case "titleMax":
				return ec.fieldContext_TensionAggregateResult_titleMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx, field)
			case "n_commentsMin":
				return ec.fieldContext_TensionAggregateResult_n_commentsMin(ctx, field)
			case "n_commentsMax":
				return ec.fieldContext_TensionAggregateResult_n_commentsMax(ctx, field)
			case "n_commentsSum":
				return ec.fieldContext_TensionAggregateResult_n_commentsSum(ctx, field)
			case "n_commentsAvg":
				return ec.fieldContext_TensionAggregateResult_n_commentsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Label_tensionsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Label_nodesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Label_nodesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Label_nodesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Label_nodesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _LabelAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.LabelAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LabelAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LabelAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LabelAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LabelAggregateResult_rootnameidMin(ctx context.Context, field graphql.CollectedField, obj *model.LabelAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LabelAggregateResult_rootnameidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootnameidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LabelAggregateResult_rootnameidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LabelAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LabelAggregateResult_rootnameidMax(ctx context.Context, field graphql.CollectedField, obj *model.LabelAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LabelAggregateResult_rootnameidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootnameidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LabelAggregateResult_rootnameidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LabelAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LabelAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField, obj *model.LabelAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LabelAggregateResult_nameMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LabelAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LabelAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LabelAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField, obj *model.LabelAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LabelAggregateResult_nameMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LabelAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LabelAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LabelAggregateResult_descriptionMin(ctx context.Context, field graphql.CollectedField, obj *model.LabelAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LabelAggregateResult_descriptionMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LabelAggregateResult_descriptionMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LabelAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LabelAggregateResult_descriptionMax(ctx context.Context, field graphql.CollectedField, obj *model.LabelAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LabelAggregateResult_descriptionMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LabelAggregateResult_descriptionMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LabelAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LabelAggregateResult_colorMin(ctx context.Context, field graphql.CollectedField, obj *model.LabelAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LabelAggregateResult_colorMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LabelAggregateResult_colorMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LabelAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LabelAggregateResult_colorMax(ctx context.Context, field graphql.CollectedField, obj *model.LabelAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LabelAggregateResult_colorMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LabelAggregateResult_colorMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LabelAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mandate_id(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mandate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mandate_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mandate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mandate_purpose(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mandate_purpose(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Purpose, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mandate_purpose(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mandate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mandate_responsabilities(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mandate_responsabilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Responsabilities, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mandate_responsabilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mandate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mandate_domains(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mandate_domains(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domains, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mandate_domains(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mandate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mandate_policies(ctx context.Context, field graphql.CollectedField, obj *model.Mandate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mandate_policies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Policies, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mandate_policies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mandate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MandateAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.MandateAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MandateAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MandateAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MandateAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MandateAggregateResult_purposeMin(ctx context.Context, field graphql.CollectedField, obj *model.MandateAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MandateAggregateResult_purposeMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurposeMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MandateAggregateResult_purposeMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MandateAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MandateAggregateResult_purposeMax(ctx context.Context, field graphql.CollectedField, obj *model.MandateAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MandateAggregateResult_purposeMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurposeMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MandateAggregateResult_purposeMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MandateAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MandateAggregateResult_responsabilitiesMin(ctx context.Context, field graphql.CollectedField, obj *model.MandateAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MandateAggregateResult_responsabilitiesMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponsabilitiesMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MandateAggregateResult_responsabilitiesMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MandateAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MandateAggregateResult_responsabilitiesMax(ctx context.Context, field graphql.CollectedField, obj *model.MandateAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MandateAggregateResult_responsabilitiesMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponsabilitiesMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MandateAggregateResult_responsabilitiesMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MandateAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MandateAggregateResult_domainsMin(ctx context.Context, field graphql.CollectedField, obj *model.MandateAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MandateAggregateResult_domainsMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DomainsMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MandateAggregateResult_domainsMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MandateAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MandateAggregateResult_domainsMax(ctx context.Context, field graphql.CollectedField, obj *model.MandateAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MandateAggregateResult_domainsMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DomainsMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MandateAggregateResult_domainsMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MandateAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MandateAggregateResult_policiesMin(ctx context.Context, field graphql.CollectedField, obj *model.MandateAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MandateAggregateResult_policiesMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliciesMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MandateAggregateResult_policiesMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MandateAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MandateAggregateResult_policiesMax(ctx context.Context, field graphql.CollectedField, obj *model.MandateAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MandateAggregateResult_policiesMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliciesMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MandateAggregateResult_policiesMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MandateAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultiPolygon_polygons(ctx context.Context, field graphql.CollectedField, obj *model.MultiPolygon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MultiPolygon_polygons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Polygons, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Polygon)
	fc.Result = res
	return ec.marshalNPolygon2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MultiPolygon_polygons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultiPolygon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coordinates":
				return ec.fieldContext_Polygon_coordinates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Polygon", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNode(rctx, fc.Args["input"].([]*model.AddNodeInput), fc.Args["upsert"].(*bool))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddNodePayload)
	fc.Result = res
	return ec.marshalOAddNodePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_AddNodePayload_node(ctx, field)
			case "numUids":
				return ec.fieldContext_AddNodePayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddNodePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addNode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNode(rctx, fc.Args["input"].(model.UpdateNodeInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateNodePayload)
	fc.Result = res
	return ec.marshalOUpdateNodePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_UpdateNodePayload_node(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateNodePayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateNodePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateNode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNode(rctx, fc.Args["filter"].(model.NodeFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteNodePayload)
	fc.Result = res
	return ec.marshalODeleteNodePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_DeleteNodePayload_node(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteNodePayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteNodePayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteNodePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteNode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addNodeFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNodeFragment(rctx, fc.Args["input"].([]*model.AddNodeFragmentInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddNodeFragmentPayload)
	fc.Result = res
	return ec.marshalOAddNodeFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addNodeFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nodeFragment":
				return ec.fieldContext_AddNodeFragmentPayload_nodeFragment(ctx, field)
			case "numUids":
				return ec.fieldContext_AddNodeFragmentPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddNodeFragmentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addNodeFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateNodeFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNodeFragment(rctx, fc.Args["input"].(model.UpdateNodeFragmentInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateNodeFragmentPayload)
	fc.Result = res
	return ec.marshalOUpdateNodeFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeFragmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateNodeFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nodeFragment":
				return ec.fieldContext_UpdateNodeFragmentPayload_nodeFragment(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateNodeFragmentPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateNodeFragmentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateNodeFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteNodeFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNodeFragment(rctx, fc.Args["filter"].(model.NodeFragmentFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteNodeFragmentPayload)
	fc.Result = res
	return ec.marshalODeleteNodeFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodeFragmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteNodeFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nodeFragment":
				return ec.fieldContext_DeleteNodeFragmentPayload_nodeFragment(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteNodeFragmentPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteNodeFragmentPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteNodeFragmentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteNodeFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addMandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddMandate(rctx, fc.Args["input"].([]*model.AddMandateInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddMandatePayload)
	fc.Result = res
	return ec.marshalOAddMandatePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addMandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mandate":
				return ec.fieldContext_AddMandatePayload_mandate(ctx, field)
			case "numUids":
				return ec.fieldContext_AddMandatePayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddMandatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addMandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMandate(rctx, fc.Args["input"].(model.UpdateMandateInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateMandatePayload)
	fc.Result = res
	return ec.marshalOUpdateMandatePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateMandatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mandate":
				return ec.fieldContext_UpdateMandatePayload_mandate(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateMandatePayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateMandatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMandate(rctx, fc.Args["filter"].(model.MandateFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteMandatePayload)
	fc.Result = res
	return ec.marshalODeleteMandatePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteMandatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mandate":
				return ec.fieldContext_DeleteMandatePayload_mandate(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteMandatePayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteMandatePayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteMandatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddLabel(rctx, fc.Args["input"].([]*model.AddLabelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addLabel == nil {
				return nil, errors.New("directive hook_addLabel is not implemented")
			}
			return ec.directives.Hook_addLabel(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddLabelPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.AddLabelPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddLabelPayload)
	fc.Result = res
	return ec.marshalOAddLabelPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_AddLabelPayload_label(ctx, field)
			case "numUids":
				return ec.fieldContext_AddLabelPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddLabelPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addLabel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLabel(rctx, fc.Args["input"].(model.UpdateLabelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateLabel == nil {
				return nil, errors.New("directive hook_updateLabel is not implemented")
			}
			return ec.directives.Hook_updateLabel(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateLabelPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UpdateLabelPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateLabelPayload)
	fc.Result = res
	return ec.marshalOUpdateLabelPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateLabelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_UpdateLabelPayload_label(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateLabelPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateLabelPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLabel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLabel(rctx, fc.Args["filter"].(model.LabelFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteLabel == nil {
				return nil, errors.New("directive hook_deleteLabel is not implemented")
			}
			return ec.directives.Hook_deleteLabel(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteLabelPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.DeleteLabelPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteLabelPayload)
	fc.Result = res
	return ec.marshalODeleteLabelPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteLabelPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_DeleteLabelPayload_label(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteLabelPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteLabelPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteLabelPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLabel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addRoleExt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addRoleExt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddRoleExt(rctx, fc.Args["input"].([]*model.AddRoleExtInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addRoleExt == nil {
				return nil, errors.New("directive hook_addRoleExt is not implemented")
			}
			return ec.directives.Hook_addRoleExt(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddRoleExtPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.AddRoleExtPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddRoleExtPayload)
	fc.Result = res
	return ec.marshalOAddRoleExtPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddRoleExtPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addRoleExt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "roleExt":
				return ec.fieldContext_AddRoleExtPayload_roleExt(ctx, field)
			case "numUids":
				return ec.fieldContext_AddRoleExtPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddRoleExtPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addRoleExt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRoleExt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateRoleExt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRoleExt(rctx, fc.Args["input"].(model.UpdateRoleExtInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateRoleExt == nil {
				return nil, errors.New("directive hook_updateRoleExt is not implemented")
			}
			return ec.directives.Hook_updateRoleExt(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateRoleExtPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UpdateRoleExtPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateRoleExtPayload)
	fc.Result = res
	return ec.marshalOUpdateRoleExtPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateRoleExtPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateRoleExt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "roleExt":
				return ec.fieldContext_UpdateRoleExtPayload_roleExt(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateRoleExtPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateRoleExtPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRoleExt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteRoleExt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteRoleExt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRoleExt(rctx, fc.Args["filter"].(model.RoleExtFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteRoleExt == nil {
				return nil, errors.New("directive hook_deleteRoleExt is not implemented")
			}
			return ec.directives.Hook_deleteRoleExt(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteRoleExtPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.DeleteRoleExtPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteRoleExtPayload)
	fc.Result = res
	return ec.marshalODeleteRoleExtPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteRoleExtPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteRoleExt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "roleExt":
				return ec.fieldContext_DeleteRoleExtPayload_roleExt(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteRoleExtPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteRoleExtPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteRoleExtPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteRoleExt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddProject(rctx, fc.Args["input"].([]*model.AddProjectInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addProject == nil {
				return nil, errors.New("directive hook_addProject is not implemented")
			}
			return ec.directives.Hook_addProject(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddProjectPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.AddProjectPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddProjectPayload)
	fc.Result = res
	return ec.marshalOAddProjectPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "project":
				return ec.fieldContext_AddProjectPayload_project(ctx, field)
			case "numUids":
				return ec.fieldContext_AddProjectPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddProjectPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateProject(rctx, fc.Args["input"].(model.UpdateProjectInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateProject == nil {
				return nil, errors.New("directive hook_updateProject is not implemented")
			}
			return ec.directives.Hook_updateProject(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateProjectPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UpdateProjectPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateProjectPayload)
	fc.Result = res
	return ec.marshalOUpdateProjectPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "project":
				return ec.fieldContext_UpdateProjectPayload_project(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateProjectPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateProjectPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteProject(rctx, fc.Args["filter"].(model.ProjectFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteProject == nil {
				return nil, errors.New("directive hook_deleteProject is not implemented")
			}
			return ec.directives.Hook_deleteProject(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteProjectPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.DeleteProjectPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteProjectPayload)
	fc.Result = res
	return ec.marshalODeleteProjectPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteProjectPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "project":
				return ec.fieldContext_DeleteProjectPayload_project(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteProjectPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteProjectPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteProjectPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addProjectTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addProjectTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddProjectTension(rctx, fc.Args["input"].([]*model.AddProjectTensionInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddProjectTensionPayload)
	fc.Result = res
	return ec.marshalOAddProjectTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectTensionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addProjectTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "projectTension":
				return ec.fieldContext_AddProjectTensionPayload_projectTension(ctx, field)
			case "numUids":
				return ec.fieldContext_AddProjectTensionPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddProjectTensionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addProjectTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProjectTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProjectTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectTension(rctx, fc.Args["input"].(model.UpdateProjectTensionInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateProjectTensionPayload)
	fc.Result = res
	return ec.marshalOUpdateProjectTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectTensionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProjectTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "projectTension":
				return ec.fieldContext_UpdateProjectTensionPayload_projectTension(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateProjectTensionPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateProjectTensionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProjectTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProjectTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProjectTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectTension(rctx, fc.Args["filter"].(model.ProjectTensionFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteProjectTensionPayload)
	fc.Result = res
	return ec.marshalODeleteProjectTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteProjectTensionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProjectTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "projectTension":
				return ec.fieldContext_DeleteProjectTensionPayload_projectTension(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteProjectTensionPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteProjectTensionPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteProjectTensionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProjectTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addProjectColumn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addProjectColumn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddProjectColumn(rctx, fc.Args["input"].([]*model.AddProjectColumnInput), fc.Args["upsert"].(*bool))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddProjectColumnPayload)
	fc.Result = res
	return ec.marshalOAddProjectColumnPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectColumnPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addProjectColumn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "projectColumn":
				return ec.fieldContext_AddProjectColumnPayload_projectColumn(ctx, field)
			case "numUids":
				return ec.fieldContext_AddProjectColumnPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddProjectColumnPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addProjectColumn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProjectColumn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProjectColumn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProjectColumn(rctx, fc.Args["input"].(model.UpdateProjectColumnInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateProjectColumnPayload)
	fc.Result = res
	return ec.marshalOUpdateProjectColumnPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectColumnPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProjectColumn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "projectColumn":
				return ec.fieldContext_UpdateProjectColumnPayload_projectColumn(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateProjectColumnPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateProjectColumnPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProjectColumn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProjectColumn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProjectColumn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProjectColumn(rctx, fc.Args["filter"].(model.ProjectColumnFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteProjectColumnPayload)
	fc.Result = res
	return ec.marshalODeleteProjectColumnPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteProjectColumnPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProjectColumn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "projectColumn":
				return ec.fieldContext_DeleteProjectColumnPayload_projectColumn(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteProjectColumnPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteProjectColumnPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteProjectColumnPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProjectColumn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addOrgaAgg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addOrgaAgg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrgaAgg(rctx, fc.Args["input"].([]*model.AddOrgaAggInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddOrgaAggPayload)
	fc.Result = res
	return ec.marshalOAddOrgaAggPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddOrgaAggPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addOrgaAgg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "orgaAgg":
				return ec.fieldContext_AddOrgaAggPayload_orgaAgg(ctx, field)
			case "numUids":
				return ec.fieldContext_AddOrgaAggPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddOrgaAggPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addOrgaAgg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOrgaAgg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOrgaAgg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrgaAgg(rctx, fc.Args["input"].(model.UpdateOrgaAggInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateOrgaAggPayload)
	fc.Result = res
	return ec.marshalOUpdateOrgaAggPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateOrgaAggPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOrgaAgg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "orgaAgg":
				return ec.fieldContext_UpdateOrgaAggPayload_orgaAgg(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateOrgaAggPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateOrgaAggPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOrgaAgg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteOrgaAgg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteOrgaAgg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrgaAgg(rctx, fc.Args["filter"].(model.OrgaAggFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteOrgaAggPayload)
	fc.Result = res
	return ec.marshalODeleteOrgaAggPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteOrgaAggPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteOrgaAgg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "orgaAgg":
				return ec.fieldContext_DeleteOrgaAggPayload_orgaAgg(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteOrgaAggPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteOrgaAggPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteOrgaAggPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteOrgaAgg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePost(rctx, fc.Args["input"].(model.UpdatePostInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdatePostPayload)
	fc.Result = res
	return ec.marshalOUpdatePostPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_UpdatePostPayload_post(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdatePostPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePost(rctx, fc.Args["filter"].(model.PostFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeletePostPayload)
	fc.Result = res
	return ec.marshalODeletePostPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeletePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_DeletePostPayload_post(ctx, field)
			case "msg":
				return ec.fieldContext_DeletePostPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeletePostPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletePostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddTension(rctx, fc.Args["input"].([]*model.AddTensionInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addTension == nil {
				return nil, errors.New("directive hook_addTension is not implemented")
			}
			return ec.directives.Hook_addTension(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddTensionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.AddTensionPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddTensionPayload)
	fc.Result = res
	return ec.marshalOAddTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_AddTensionPayload_tension(ctx, field)
			case "numUids":
				return ec.fieldContext_AddTensionPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddTensionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTension(rctx, fc.Args["input"].(model.UpdateTensionInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateTension == nil {
				return nil, errors.New("directive hook_updateTension is not implemented")
			}
			return ec.directives.Hook_updateTension(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateTensionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UpdateTensionPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateTensionPayload)
	fc.Result = res
	return ec.marshalOUpdateTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateTensionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_UpdateTensionPayload_tension(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateTensionPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateTensionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteTension(rctx, fc.Args["filter"].(model.TensionFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteTension == nil {
				return nil, errors.New("directive hook_deleteTension is not implemented")
			}
			return ec.directives.Hook_deleteTension(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteTensionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.DeleteTensionPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteTensionPayload)
	fc.Result = res
	return ec.marshalODeleteTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteTensionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_DeleteTensionPayload_tension(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteTensionPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteTensionPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteTensionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddComment(rctx, fc.Args["input"].([]*model.AddCommentInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addComment == nil {
				return nil, errors.New("directive hook_addComment is not implemented")
			}
			return ec.directives.Hook_addComment(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddCommentPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.AddCommentPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddCommentPayload)
	fc.Result = res
	return ec.marshalOAddCommentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "comment":
				return ec.fieldContext_AddCommentPayload_comment(ctx, field)
			case "numUids":
				return ec.fieldContext_AddCommentPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddCommentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateComment(rctx, fc.Args["input"].(model.UpdateCommentInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateComment == nil {
				return nil, errors.New("directive hook_updateComment is not implemented")
			}
			return ec.directives.Hook_updateComment(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateCommentPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UpdateCommentPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateCommentPayload)
	fc.Result = res
	return ec.marshalOUpdateCommentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "comment":
				return ec.fieldContext_UpdateCommentPayload_comment(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateCommentPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCommentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteComment(rctx, fc.Args["filter"].(model.CommentFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteComment == nil {
				return nil, errors.New("directive hook_deleteComment is not implemented")
			}
			return ec.directives.Hook_deleteComment(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteCommentPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.DeleteCommentPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteCommentPayload)
	fc.Result = res
	return ec.marshalODeleteCommentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "comment":
				return ec.fieldContext_DeleteCommentPayload_comment(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteCommentPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteCommentPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteCommentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addReaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addReaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddReaction(rctx, fc.Args["input"].([]*model.AddReactionInput), fc.Args["upsert"].(*bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addReaction == nil {
				return nil, errors.New("directive hook_addReaction is not implemented")
			}
			return ec.directives.Hook_addReaction(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddReactionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.AddReactionPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddReactionPayload)
	fc.Result = res
	return ec.marshalOAddReactionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddReactionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addReaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "reaction":
				return ec.fieldContext_AddReactionPayload_reaction(ctx, field)
			case "numUids":
				return ec.fieldContext_AddReactionPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddReactionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addReaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateReaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateReaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateReaction(rctx, fc.Args["input"].(model.UpdateReactionInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateReaction == nil {
				return nil, errors.New("directive hook_updateReaction is not implemented")
			}
			return ec.directives.Hook_updateReaction(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateReactionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UpdateReactionPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateReactionPayload)
	fc.Result = res
	return ec.marshalOUpdateReactionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateReactionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateReaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "reaction":
				return ec.fieldContext_UpdateReactionPayload_reaction(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateReactionPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateReactionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateReaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteReaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteReaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteReaction(rctx, fc.Args["filter"].(model.ReactionFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteReaction == nil {
				return nil, errors.New("directive hook_deleteReaction is not implemented")
			}
			return ec.directives.Hook_deleteReaction(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteReactionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.DeleteReactionPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteReactionPayload)
	fc.Result = res
	return ec.marshalODeleteReactionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteReactionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteReaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "reaction":
				return ec.fieldContext_DeleteReactionPayload_reaction(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteReactionPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteReactionPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteReactionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteReaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addBlob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddBlob(rctx, fc.Args["input"].([]*model.AddBlobInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddBlobPayload)
	fc.Result = res
	return ec.marshalOAddBlobPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addBlob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "blob":
				return ec.fieldContext_AddBlobPayload_blob(ctx, field)
			case "numUids":
				return ec.fieldContext_AddBlobPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddBlobPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addBlob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateBlob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBlob(rctx, fc.Args["input"].(model.UpdateBlobInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateBlobPayload)
	fc.Result = res
	return ec.marshalOUpdateBlobPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateBlobPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateBlob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "blob":
				return ec.fieldContext_UpdateBlobPayload_blob(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateBlobPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateBlobPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateBlob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteBlob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBlob(rctx, fc.Args["filter"].(model.BlobFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteBlobPayload)
	fc.Result = res
	return ec.marshalODeleteBlobPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteBlobPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteBlob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "blob":
				return ec.fieldContext_DeleteBlobPayload_blob(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteBlobPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteBlobPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteBlobPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteBlob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddEvent(rctx, fc.Args["input"].([]*model.AddEventInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddEventPayload)
	fc.Result = res
	return ec.marshalOAddEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "event":
				return ec.fieldContext_AddEventPayload_event(ctx, field)
			case "numUids":
				return ec.fieldContext_AddEventPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddEventPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEvent(rctx, fc.Args["input"].(model.UpdateEventInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateEventPayload)
	fc.Result = res
	return ec.marshalOUpdateEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "event":
				return ec.fieldContext_UpdateEventPayload_event(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateEventPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateEventPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEvent(rctx, fc.Args["filter"].(model.EventFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteEventPayload)
	fc.Result = res
	return ec.marshalODeleteEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "event":
				return ec.fieldContext_DeleteEventPayload_event(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteEventPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteEventPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteEventPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addEventFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addEventFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddEventFragment(rctx, fc.Args["input"].([]*model.AddEventFragmentInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddEventFragmentPayload)
	fc.Result = res
	return ec.marshalOAddEventFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventFragmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addEventFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "eventFragment":
				return ec.fieldContext_AddEventFragmentPayload_eventFragment(ctx, field)
			case "numUids":
				return ec.fieldContext_AddEventFragmentPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddEventFragmentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addEventFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEventFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEventFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEventFragment(rctx, fc.Args["input"].(model.UpdateEventFragmentInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateEventFragmentPayload)
	fc.Result = res
	return ec.marshalOUpdateEventFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventFragmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEventFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "eventFragment":
				return ec.fieldContext_UpdateEventFragmentPayload_eventFragment(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateEventFragmentPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateEventFragmentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEventFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEventFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEventFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEventFragment(rctx, fc.Args["filter"].(model.EventFragmentFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteEventFragmentPayload)
	fc.Result = res
	return ec.marshalODeleteEventFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteEventFragmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEventFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "eventFragment":
				return ec.fieldContext_DeleteEventFragmentPayload_eventFragment(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteEventFragmentPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteEventFragmentPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteEventFragmentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEventFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addContract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddContract(rctx, fc.Args["input"].([]*model.AddContractInput), fc.Args["upsert"].(*bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addContract == nil {
				return nil, errors.New("directive hook_addContract is not implemented")
			}
			return ec.directives.Hook_addContract(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddContractPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.AddContractPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddContractPayload)
	fc.Result = res
	return ec.marshalOAddContractPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddContractPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addContract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contract":
				return ec.fieldContext_AddContractPayload_contract(ctx, field)
			case "numUids":
				return ec.fieldContext_AddContractPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddContractPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addContract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateContract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateContract(rctx, fc.Args["input"].(model.UpdateContractInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateContract == nil {
				return nil, errors.New("directive hook_updateContract is not implemented")
			}
			return ec.directives.Hook_updateContract(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateContractPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UpdateContractPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateContractPayload)
	fc.Result = res
	return ec.marshalOUpdateContractPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateContractPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateContract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contract":
				return ec.fieldContext_UpdateContractPayload_contract(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateContractPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateContractPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateContract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteContract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteContract(rctx, fc.Args["filter"].(model.ContractFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteContract == nil {
				return nil, errors.New("directive hook_deleteContract is not implemented")
			}
			return ec.directives.Hook_deleteContract(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteContractPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.DeleteContractPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteContractPayload)
	fc.Result = res
	return ec.marshalODeleteContractPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteContractPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteContract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contract":
				return ec.fieldContext_DeleteContractPayload_contract(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteContractPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteContractPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteContractPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteContract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addVote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addVote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddVote(rctx, fc.Args["input"].([]*model.AddVoteInput), fc.Args["upsert"].(*bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addVote == nil {
				return nil, errors.New("directive hook_addVote is not implemented")
			}
			return ec.directives.Hook_addVote(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddVotePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.AddVotePayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddVotePayload)
	fc.Result = res
	return ec.marshalOAddVotePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddVotePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addVote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vote":
				return ec.fieldContext_AddVotePayload_vote(ctx, field)
			case "numUids":
				return ec.fieldContext_AddVotePayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddVotePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addVote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateVote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateVote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateVote(rctx, fc.Args["input"].(model.UpdateVoteInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateVote == nil {
				return nil, errors.New("directive hook_updateVote is not implemented")
			}
			return ec.directives.Hook_updateVote(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateVotePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UpdateVotePayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateVotePayload)
	fc.Result = res
	return ec.marshalOUpdateVotePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateVotePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateVote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vote":
				return ec.fieldContext_UpdateVotePayload_vote(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateVotePayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateVotePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateVote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteVote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteVote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteVote(rctx, fc.Args["filter"].(model.VoteFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteVote == nil {
				return nil, errors.New("directive hook_deleteVote is not implemented")
			}
			return ec.directives.Hook_deleteVote(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteVotePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.DeleteVotePayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteVotePayload)
	fc.Result = res
	return ec.marshalODeleteVotePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteVotePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteVote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vote":
				return ec.fieldContext_DeleteVotePayload_vote(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteVotePayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteVotePayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteVotePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteVote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddUser(rctx, fc.Args["input"].([]*model.AddUserInput), fc.Args["upsert"].(*bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_addUser == nil {
				return nil, errors.New("directive hook_addUser is not implemented")
			}
			return ec.directives.Hook_addUser(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.AddUserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.AddUserPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddUserPayload)
	fc.Result = res
	return ec.marshalOAddUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_AddUserPayload_user(ctx, field)
			case "numUids":
				return ec.fieldContext_AddUserPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddUserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["input"].(model.UpdateUserInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_updateUser == nil {
				return nil, errors.New("directive hook_updateUser is not implemented")
			}
			return ec.directives.Hook_updateUser(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UpdateUserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UpdateUserPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateUserPayload)
	fc.Result = res
	return ec.marshalOUpdateUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_UpdateUserPayload_user(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateUserPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateUserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteUser(rctx, fc.Args["filter"].(model.UserFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hook_deleteUser == nil {
				return nil, errors.New("directive hook_deleteUser is not implemented")
			}
			return ec.directives.Hook_deleteUser(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteUserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.DeleteUserPayload`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteUserPayload)
	fc.Result = res
	return ec.marshalODeleteUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_DeleteUserPayload_user(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteUserPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteUserPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteUserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addPendingUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addPendingUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPendingUser(rctx, fc.Args["input"].([]*model.AddPendingUserInput), fc.Args["upsert"].(*bool))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddPendingUserPayload)
	fc.Result = res
	return ec.marshalOAddPendingUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddPendingUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addPendingUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pendingUser":
				return ec.fieldContext_AddPendingUserPayload_pendingUser(ctx, field)
			case "numUids":
				return ec.fieldContext_AddPendingUserPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddPendingUserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addPendingUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePendingUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePendingUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePendingUser(rctx, fc.Args["input"].(model.UpdatePendingUserInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdatePendingUserPayload)
	fc.Result = res
	return ec.marshalOUpdatePendingUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePendingUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePendingUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pendingUser":
				return ec.fieldContext_UpdatePendingUserPayload_pendingUser(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdatePendingUserPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePendingUserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePendingUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePendingUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePendingUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePendingUser(rctx, fc.Args["filter"].(model.PendingUserFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeletePendingUserPayload)
	fc.Result = res
	return ec.marshalODeletePendingUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeletePendingUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePendingUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pendingUser":
				return ec.fieldContext_DeletePendingUserPayload_pendingUser(ctx, field)
			case "msg":
				return ec.fieldContext_DeletePendingUserPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeletePendingUserPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletePendingUserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePendingUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserRights(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserRights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserRights(rctx, fc.Args["input"].([]*model.AddUserRightsInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddUserRightsPayload)
	fc.Result = res
	return ec.marshalOAddUserRightsPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserRights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userRights":
				return ec.fieldContext_AddUserRightsPayload_userRights(ctx, field)
			case "numUids":
				return ec.fieldContext_AddUserRightsPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddUserRightsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserRights_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserRights(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserRights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserRights(rctx, fc.Args["input"].(model.UpdateUserRightsInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateUserRightsPayload)
	fc.Result = res
	return ec.marshalOUpdateUserRightsPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserRightsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserRights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userRights":
				return ec.fieldContext_UpdateUserRightsPayload_userRights(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateUserRightsPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateUserRightsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserRights_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserRights(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUserRights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserRights(rctx, fc.Args["filter"].(model.UserRightsFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteUserRightsPayload)
	fc.Result = res
	return ec.marshalODeleteUserRightsPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteUserRightsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserRights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userRights":
				return ec.fieldContext_DeleteUserRightsPayload_userRights(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteUserRightsPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteUserRightsPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteUserRightsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserRights_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserEvent(rctx, fc.Args["input"].([]*model.AddUserEventInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddUserEventPayload)
	fc.Result = res
	return ec.marshalOAddUserEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userEvent":
				return ec.fieldContext_AddUserEventPayload_userEvent(ctx, field)
			case "numUids":
				return ec.fieldContext_AddUserEventPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddUserEventPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserEvent(rctx, fc.Args["input"].(model.UpdateUserEventInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateUserEventPayload)
	fc.Result = res
	return ec.marshalOUpdateUserEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userEvent":
				return ec.fieldContext_UpdateUserEventPayload_userEvent(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateUserEventPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateUserEventPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUserEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserEvent(rctx, fc.Args["filter"].(model.UserEventFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteUserEventPayload)
	fc.Result = res
	return ec.marshalODeleteUserEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteUserEventPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userEvent":
				return ec.fieldContext_DeleteUserEventPayload_userEvent(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteUserEventPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteUserEventPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteUserEventPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addNotif(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addNotif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNotif(rctx, fc.Args["input"].([]*model.AddNotifInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddNotifPayload)
	fc.Result = res
	return ec.marshalOAddNotifPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNotifPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addNotif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "notif":
				return ec.fieldContext_AddNotifPayload_notif(ctx, field)
			case "numUids":
				return ec.fieldContext_AddNotifPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddNotifPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addNotif_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateNotif(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateNotif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNotif(rctx, fc.Args["input"].(model.UpdateNotifInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateNotifPayload)
	fc.Result = res
	return ec.marshalOUpdateNotifPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNotifPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateNotif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "notif":
				return ec.fieldContext_UpdateNotifPayload_notif(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateNotifPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateNotifPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateNotif_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteNotif(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteNotif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNotif(rctx, fc.Args["filter"].(model.NotifFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteNotifPayload)
	fc.Result = res
	return ec.marshalODeleteNotifPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNotifPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteNotif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "notif":
				return ec.fieldContext_DeleteNotifPayload_notif(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteNotifPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteNotifPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteNotifPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteNotif_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addEventCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addEventCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddEventCount(rctx, fc.Args["input"].([]*model.AddEventCountInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddEventCountPayload)
	fc.Result = res
	return ec.marshalOAddEventCountPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventCountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addEventCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "eventCount":
				return ec.fieldContext_AddEventCountPayload_eventCount(ctx, field)
			case "numUids":
				return ec.fieldContext_AddEventCountPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddEventCountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addEventCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEventCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEventCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEventCount(rctx, fc.Args["input"].(model.UpdateEventCountInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateEventCountPayload)
	fc.Result = res
	return ec.marshalOUpdateEventCountPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventCountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEventCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "eventCount":
				return ec.fieldContext_UpdateEventCountPayload_eventCount(ctx, field)
			case "numUids":
				return ec.fieldContext_UpdateEventCountPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateEventCountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEventCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEventCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEventCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEventCount(rctx, fc.Args["filter"].(model.EventCountFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteEventCountPayload)
	fc.Result = res
	return ec.marshalODeleteEventCountPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteEventCountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEventCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "eventCount":
				return ec.fieldContext_DeleteEventCountPayload_eventCount(ctx, field)
			case "msg":
				return ec.fieldContext_DeleteEventCountPayload_msg(ctx, field)
			case "numUids":
				return ec.fieldContext_DeleteEventCountPayload_numUids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteEventCountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEventCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_id(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_nameid(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_nameid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nameid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_nameid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_rootnameid(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_rootnameid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rootnameid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_rootnameid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_source(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Blob_tension(ctx, field)
			case "blob_type":
				return ec.fieldContext_Blob_blob_type(ctx, field)
			case "pushedFlag":
				return ec.fieldContext_Blob_pushedFlag(ctx, field)
			case "archivedFlag":
				return ec.fieldContext_Blob_archivedFlag(ctx, field)
			case "node":
				return ec.fieldContext_Blob_node(ctx, field)
			case "md":
				return ec.fieldContext_Blob_md(ctx, field)
			case "id":
				return ec.fieldContext_Blob_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Blob_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Blob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Blob_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Blob_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blob", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_source_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_name(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_about(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_about(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_about(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_skills(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_skills(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skills, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_skills(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_isRoot(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_isRoot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRoot, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_isRoot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_parent(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_parent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_parent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_parent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_type_(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_type_(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.NodeType)
	fc.Result = res
	return ec.marshalNNodeType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_type_(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NodeType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_tensions_out(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_tensions_out(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TensionsOut, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_tensions_out(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_tensions_out_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_tensions_in(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_tensions_in(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TensionsIn, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_tensions_in(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_tensions_in_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_visibility(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_visibility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.NodeVisibility)
	fc.Result = res
	return ec.marshalNNodeVisibility2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_visibility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NodeVisibility does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_mode(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_mode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.NodeMode)
	fc.Result = res
	return ec.marshalNNodeMode2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_mode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NodeMode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_rights(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_rights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rights, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_rights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_isArchived(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_isArchived(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsArchived, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_isArchived(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_isPersonal(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_isPersonal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPersonal, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_isPersonal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_userCanJoin(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_userCanJoin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCanJoin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_userCanJoin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_guestCanCreateTension(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_guestCanCreateTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GuestCanCreateTension, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_guestCanCreateTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_watchers(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_watchers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Watchers, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_watchers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_watchers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_children(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_children(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Children, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_children(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_children_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_labels(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_labels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_labels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Label_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Label_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_Label_name(ctx, field)
			case "description":
				return ec.fieldContext_Label_description(ctx, field)
			case "color":
				return ec.fieldContext_Label_color(ctx, field)
			case "tensions":
				return ec.fieldContext_Label_tensions(ctx, field)
			case "nodes":
				return ec.fieldContext_Label_nodes(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_Label_tensionsAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Label_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Label", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_labels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_roles(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RoleExt)
	fc.Result = res
	return ec.marshalORoleExt2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleExt_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_RoleExt_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_RoleExt_name(ctx, field)
			case "about":
				return ec.fieldContext_RoleExt_about(ctx, field)
			case "role_type":
				return ec.fieldContext_RoleExt_role_type(ctx, field)
			case "color":
				return ec.fieldContext_RoleExt_color(ctx, field)
			case "mandate":
				return ec.fieldContext_RoleExt_mandate(ctx, field)
			case "roles":
				return ec.fieldContext_RoleExt_roles(ctx, field)
			case "nodes":
				return ec.fieldContext_RoleExt_nodes(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_RoleExt_rolesAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_RoleExt_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleExt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_roles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_projects(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_projects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Projects, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_projects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Project_rootnameid(ctx, field)
			case "parentnameid":
				return ec.fieldContext_Project_parentnameid(ctx, field)
			case "nameid":
				return ec.fieldContext_Project_nameid(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "columns":
				return ec.fieldContext_Project_columns(ctx, field)
			case "leaders":
				return ec.fieldContext_Project_leaders(ctx, field)
			case "nodes":
				return ec.fieldContext_Project_nodes(ctx, field)
			case "columnsAggregate":
				return ec.fieldContext_Project_columnsAggregate(ctx, field)
			case "leadersAggregate":
				return ec.fieldContext_Project_leadersAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Project_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_projects_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_pinned(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_pinned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pinned, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_pinned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_pinned_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_role_ext(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_role_ext(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleExt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RoleExt)
	fc.Result = res
	return ec.marshalORoleExt2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_role_ext(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleExt_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_RoleExt_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_RoleExt_name(ctx, field)
			case "about":
				return ec.fieldContext_RoleExt_about(ctx, field)
			case "role_type":
				return ec.fieldContext_RoleExt_role_type(ctx, field)
			case "color":
				return ec.fieldContext_RoleExt_color(ctx, field)
			case "mandate":
				return ec.fieldContext_RoleExt_mandate(ctx, field)
			case "roles":
				return ec.fieldContext_RoleExt_roles(ctx, field)
			case "nodes":
				return ec.fieldContext_RoleExt_nodes(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_RoleExt_rolesAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_RoleExt_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleExt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_role_ext_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_role_type(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_role_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RoleType)
	fc.Result = res
	return ec.marshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_role_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RoleType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_color(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_color(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_first_link(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_first_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstLink, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_first_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_first_link_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_second_link(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_second_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondLink, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_second_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_second_link_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_contracts(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contracts, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Vote)
	fc.Result = res
	return ec.marshalOVote2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_contracts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "voteid":
				return ec.fieldContext_Vote_voteid(ctx, field)
			case "contract":
				return ec.fieldContext_Vote_contract(ctx, field)
			case "node":
				return ec.fieldContext_Vote_node(ctx, field)
			case "data":
				return ec.fieldContext_Vote_data(ctx, field)
			case "id":
				return ec.fieldContext_Vote_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Vote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vote_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vote_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Vote_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_contracts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_orga_agg(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_orga_agg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OrgaAgg, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "getOrgaAgg")
			if err != nil {
				return nil, err
			}
			k, err := ec.unmarshalOString2ᚖstring(ctx, "nameid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Meta == nil {
				return nil, errors.New("directive meta is not implemented")
			}
			return ec.directives.Meta(ctx, obj, directive0, f, k)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.OrgaAgg); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.OrgaAgg`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrgaAgg)
	fc.Result = res
	return ec.marshalOOrgaAgg2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAgg(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_orga_agg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "n_members":
				return ec.fieldContext_OrgaAgg_n_members(ctx, field)
			case "n_guests":
				return ec.fieldContext_OrgaAgg_n_guests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgaAgg", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_orga_agg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_events_history(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_events_history(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.EventsHistory, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "getNodeHistory")
			if err != nil {
				return nil, err
			}
			k, err := ec.unmarshalOString2ᚖstring(ctx, "nameid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Meta == nil {
				return nil, errors.New("directive meta is not implemented")
			}
			return ec.directives.Meta(ctx, obj, directive0, f, k)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Event); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.Event`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_events_history(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Event_tension(ctx, field)
			case "event_type":
				return ec.fieldContext_Event_event_type(ctx, field)
			case "mentioned":
				return ec.fieldContext_Event_mentioned(ctx, field)
			case "old":
				return ec.fieldContext_Event_old(ctx, field)
			case "new":
				return ec.fieldContext_Event_new(ctx, field)
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Event_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Event_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Event_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Event_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_events_history_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_n_open_contracts(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_n_open_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.NOpenContracts, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "count_open_contracts_from_node")
			if err != nil {
				return nil, err
			}
			k, err := ec.unmarshalOString2ᚖstring(ctx, "nameid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Meta == nil {
				return nil, errors.New("directive meta is not implemented")
			}
			return ec.directives.Meta(ctx, obj, directive0, f, k)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_n_open_contracts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Node_tensions_outAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_tensions_outAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TensionsOutAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAggregateResult)
	fc.Result = res
	return ec.marshalOTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_tensions_outAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_TensionAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_TensionAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_TensionAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_TensionAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_TensionAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_TensionAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_TensionAggregateResult_messageMax(ctx, field)
			case "emitteridMin":
				return ec.fieldContext_TensionAggregateResult_emitteridMin(ctx, field)
			case "emitteridMax":
				return ec.fieldContext_TensionAggregateResult_emitteridMax(ctx, field)
			case "receiveridMin":
				return ec.fieldContext_TensionAggregateResult_receiveridMin(ctx, field)
			case "receiveridMax":
				return ec.fieldContext_TensionAggregateResult_receiveridMax(ctx, field)
			case "titleMin":
				return ec.fieldContext_TensionAggregateResult_titleMin(ctx, field)
			case "titleMax":
				return ec.fieldContext_TensionAggregateResult_titleMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx, field)
			case "n_commentsMin":
				return ec.fieldContext_TensionAggregateResult_n_commentsMin(ctx, field)
			case "n_commentsMax":
				return ec.fieldContext_TensionAggregateResult_n_commentsMax(ctx, field)
			case "n_commentsSum":
				return ec.fieldContext_TensionAggregateResult_n_commentsSum(ctx, field)
			case "n_commentsAvg":
				return ec.fieldContext_TensionAggregateResult_n_commentsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_tensions_outAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_tensions_inAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_tensions_inAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TensionsInAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAggregateResult)
	fc.Result = res
	return ec.marshalOTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_tensions_inAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_TensionAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_TensionAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_TensionAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_TensionAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_TensionAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_TensionAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_TensionAggregateResult_messageMax(ctx, field)
			case "emitteridMin":
				return ec.fieldContext_TensionAggregateResult_emitteridMin(ctx, field)
			case "emitteridMax":
				return ec.fieldContext_TensionAggregateResult_emitteridMax(ctx, field)
			case "receiveridMin":
				return ec.fieldContext_TensionAggregateResult_receiveridMin(ctx, field)
			case "receiveridMax":
				return ec.fieldContext_TensionAggregateResult_receiveridMax(ctx, field)
			case "titleMin":
				return ec.fieldContext_TensionAggregateResult_titleMin(ctx, field)
			case "titleMax":
				return ec.fieldContext_TensionAggregateResult_titleMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx, field)
			case "n_commentsMin":
				return ec.fieldContext_TensionAggregateResult_n_commentsMin(ctx, field)
			case "n_commentsMax":
				return ec.fieldContext_TensionAggregateResult_n_commentsMax(ctx, field)
			case "n_commentsSum":
				return ec.fieldContext_TensionAggregateResult_n_commentsSum(ctx, field)
			case "n_commentsAvg":
				return ec.fieldContext_TensionAggregateResult_n_commentsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_tensions_inAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_watchersAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_watchersAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WatchersAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserAggregateResult)
	fc.Result = res
	return ec.marshalOUserAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_watchersAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_UserAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_UserAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_UserAggregateResult_createdAtMax(ctx, field)
			case "lastAckMin":
				return ec.fieldContext_UserAggregateResult_lastAckMin(ctx, field)
			case "lastAckMax":
				return ec.fieldContext_UserAggregateResult_lastAckMax(ctx, field)
			case "usernameMin":
				return ec.fieldContext_UserAggregateResult_usernameMin(ctx, field)
			case "usernameMax":
				return ec.fieldContext_UserAggregateResult_usernameMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_UserAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_UserAggregateResult_nameMax(ctx, field)
			case "emailMin":
				return ec.fieldContext_UserAggregateResult_emailMin(ctx, field)
			case "emailMax":
				return ec.fieldContext_UserAggregateResult_emailMax(ctx, field)
			case "passwordMin":
				return ec.fieldContext_UserAggregateResult_passwordMin(ctx, field)
			case "passwordMax":
				return ec.fieldContext_UserAggregateResult_passwordMax(ctx, field)
			case "bioMin":
				return ec.fieldContext_UserAggregateResult_bioMin(ctx, field)
			case "bioMax":
				return ec.fieldContext_UserAggregateResult_bioMax(ctx, field)
			case "locationMin":
				return ec.fieldContext_UserAggregateResult_locationMin(ctx, field)
			case "locationMax":
				return ec.fieldContext_UserAggregateResult_locationMax(ctx, field)
			case "utcMin":
				return ec.fieldContext_UserAggregateResult_utcMin(ctx, field)
			case "utcMax":
				return ec.fieldContext_UserAggregateResult_utcMax(ctx, field)
			case "markAllAsReadMin":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMin(ctx, field)
			case "markAllAsReadMax":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_watchersAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_childrenAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_childrenAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildrenAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_childrenAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_childrenAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_labelsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_labelsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LabelsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LabelAggregateResult)
	fc.Result = res
	return ec.marshalOLabelAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_labelsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_LabelAggregateResult_count(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_LabelAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_LabelAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_LabelAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_LabelAggregateResult_nameMax(ctx, field)
			case "descriptionMin":
				return ec.fieldContext_LabelAggregateResult_descriptionMin(ctx, field)
			case "descriptionMax":
				return ec.fieldContext_LabelAggregateResult_descriptionMax(ctx, field)
			case "colorMin":
				return ec.fieldContext_LabelAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_LabelAggregateResult_colorMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LabelAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_labelsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_rolesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_rolesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RolesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RoleExtAggregateResult)
	fc.Result = res
	return ec.marshalORoleExtAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_rolesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_RoleExtAggregateResult_count(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_RoleExtAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_RoleExtAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_RoleExtAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_RoleExtAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_RoleExtAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_RoleExtAggregateResult_aboutMax(ctx, field)
			case "colorMin":
				return ec.fieldContext_RoleExtAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_RoleExtAggregateResult_colorMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleExtAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_rolesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_projectsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_projectsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectAggregateResult)
	fc.Result = res
	return ec.marshalOProjectAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_projectsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ProjectAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_ProjectAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_ProjectAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_ProjectAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_ProjectAggregateResult_updatedAtMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_ProjectAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_ProjectAggregateResult_rootnameidMax(ctx, field)
			case "parentnameidMin":
				return ec.fieldContext_ProjectAggregateResult_parentnameidMin(ctx, field)
			case "parentnameidMax":
				return ec.fieldContext_ProjectAggregateResult_parentnameidMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_ProjectAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_ProjectAggregateResult_nameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_ProjectAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_ProjectAggregateResult_nameMax(ctx, field)
			case "descriptionMin":
				return ec.fieldContext_ProjectAggregateResult_descriptionMin(ctx, field)
			case "descriptionMax":
				return ec.fieldContext_ProjectAggregateResult_descriptionMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_projectsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_pinnedAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_pinnedAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PinnedAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAggregateResult)
	fc.Result = res
	return ec.marshalOTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_pinnedAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_TensionAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_TensionAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_TensionAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_TensionAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_TensionAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_TensionAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_TensionAggregateResult_messageMax(ctx, field)
			case "emitteridMin":
				return ec.fieldContext_TensionAggregateResult_emitteridMin(ctx, field)
			case "emitteridMax":
				return ec.fieldContext_TensionAggregateResult_emitteridMax(ctx, field)
			case "receiveridMin":
				return ec.fieldContext_TensionAggregateResult_receiveridMin(ctx, field)
			case "receiveridMax":
				return ec.fieldContext_TensionAggregateResult_receiveridMax(ctx, field)
			case "titleMin":
				return ec.fieldContext_TensionAggregateResult_titleMin(ctx, field)
			case "titleMax":
				return ec.fieldContext_TensionAggregateResult_titleMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx, field)
			case "n_commentsMin":
				return ec.fieldContext_TensionAggregateResult_n_commentsMin(ctx, field)
			case "n_commentsMax":
				return ec.fieldContext_TensionAggregateResult_n_commentsMax(ctx, field)
			case "n_commentsSum":
				return ec.fieldContext_TensionAggregateResult_n_commentsSum(ctx, field)
			case "n_commentsAvg":
				return ec.fieldContext_TensionAggregateResult_n_commentsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_pinnedAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_contractsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_contractsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoteAggregateResult)
	fc.Result = res
	return ec.marshalOVoteAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_contractsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_VoteAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_VoteAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_VoteAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_VoteAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_VoteAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_VoteAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_VoteAggregateResult_messageMax(ctx, field)
			case "voteidMin":
				return ec.fieldContext_VoteAggregateResult_voteidMin(ctx, field)
			case "voteidMax":
				return ec.fieldContext_VoteAggregateResult_voteidMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VoteAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_contractsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Node_events_historyAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Node) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Node_events_historyAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventsHistoryAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventAggregateResult)
	fc.Result = res
	return ec.marshalOEventAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Node_events_historyAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Node",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_EventAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_EventAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_EventAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_EventAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_EventAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_EventAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_EventAggregateResult_messageMax(ctx, field)
			case "oldMin":
				return ec.fieldContext_EventAggregateResult_oldMin(ctx, field)
			case "oldMax":
				return ec.fieldContext_EventAggregateResult_oldMax(ctx, field)
			case "newMin":
				return ec.fieldContext_EventAggregateResult_newMin(ctx, field)
			case "newMax":
				return ec.fieldContext_EventAggregateResult_newMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Node_events_historyAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_nameidMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_nameidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_nameidMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_nameidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_rootnameidMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootnameidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_rootnameidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_rootnameidMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootnameidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_rootnameidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_aboutMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AboutMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_aboutMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_aboutMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AboutMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_aboutMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_rightsMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RightsMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_rightsMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_rightsMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RightsMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_rightsMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_rightsSum(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RightsSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_rightsSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_rightsAvg(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RightsAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_rightsAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_colorMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_colorMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_colorMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_colorMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_n_open_contractsMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NOpenContractsMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_n_open_contractsMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_n_open_contractsMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NOpenContractsMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_n_open_contractsMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_n_open_contractsSum(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NOpenContractsSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_n_open_contractsSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeAggregateResult_n_open_contractsAvg(ctx context.Context, field graphql.CollectedField, obj *model.NodeAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NOpenContractsAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_id(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_nameid(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_nameid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nameid, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_nameid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_name(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_about(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_about(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_about(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_mandate(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_mandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_mandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Mandate_id(ctx, field)
			case "purpose":
				return ec.fieldContext_Mandate_purpose(ctx, field)
			case "responsabilities":
				return ec.fieldContext_Mandate_responsabilities(ctx, field)
			case "domains":
				return ec.fieldContext_Mandate_domains(ctx, field)
			case "policies":
				return ec.fieldContext_Mandate_policies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Mandate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_NodeFragment_mandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_skills(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_skills(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skills, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_skills(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_visibility(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_visibility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeVisibility)
	fc.Result = res
	return ec.marshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_visibility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NodeVisibility does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_mode(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_mode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mode, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeMode)
	fc.Result = res
	return ec.marshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_mode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NodeMode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_type_(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_type_(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeType)
	fc.Result = res
	return ec.marshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_type_(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NodeType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_first_link(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_first_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstLink, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_first_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_second_link(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_second_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondLink, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_second_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_role_ext(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_role_ext(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleExt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_role_ext(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_role_type(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_role_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RoleType)
	fc.Result = res
	return ec.marshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_role_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RoleType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragment_color(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragment_color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragment_color(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_nameidMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_nameidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_nameidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_nameidMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_nameidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_nameidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_nameMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_nameMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_aboutMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_aboutMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AboutMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_aboutMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_aboutMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_aboutMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AboutMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_aboutMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_first_linkMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_first_linkMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstLinkMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_first_linkMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_first_linkMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_first_linkMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstLinkMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_first_linkMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_second_linkMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_second_linkMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondLinkMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_second_linkMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_second_linkMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_second_linkMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondLinkMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_second_linkMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_role_extMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_role_extMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleExtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_role_extMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_role_extMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_role_extMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleExtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_role_extMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_colorMin(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_colorMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_colorMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NodeFragmentAggregateResult_colorMax(ctx context.Context, field graphql.CollectedField, obj *model.NodeFragmentAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NodeFragmentAggregateResult_colorMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NodeFragmentAggregateResult_colorMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NodeFragmentAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notif_tension_(ctx context.Context, field graphql.CollectedField, obj *model.Notif) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notif_tension_(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tension, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notif_tension_(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notif",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Notif_tension__args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Notif_contract(ctx context.Context, field graphql.CollectedField, obj *model.Notif) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notif_contract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contract, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notif_contract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notif",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Notif_contract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Notif_link(ctx context.Context, field graphql.CollectedField, obj *model.Notif) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notif_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notif_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notif",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notif_id(ctx context.Context, field graphql.CollectedField, obj *model.Notif) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notif_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notif_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notif",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notif_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Notif) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notif_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notif_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notif",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Notif_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Notif_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Notif) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notif_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notif_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notif",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notif_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Notif) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notif_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notif_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notif",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notif_message(ctx context.Context, field graphql.CollectedField, obj *model.Notif) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notif_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notif_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notif",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotifAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.NotifAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotifAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotifAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotifAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotifAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.NotifAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotifAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotifAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotifAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotifAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.NotifAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotifAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotifAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotifAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotifAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.NotifAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotifAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotifAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotifAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotifAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.NotifAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotifAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotifAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotifAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotifAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField, obj *model.NotifAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotifAggregateResult_messageMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotifAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotifAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotifAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField, obj *model.NotifAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotifAggregateResult_messageMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotifAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotifAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotifAggregateResult_linkMin(ctx context.Context, field graphql.CollectedField, obj *model.NotifAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotifAggregateResult_linkMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotifAggregateResult_linkMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotifAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotifAggregateResult_linkMax(ctx context.Context, field graphql.CollectedField, obj *model.NotifAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotifAggregateResult_linkMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotifAggregateResult_linkMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotifAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAgg_n_members(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAgg) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAgg_n_members(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NMembers, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAgg_n_members(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAgg",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAgg_n_guests(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAgg) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAgg_n_guests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NGuests, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAgg_n_guests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAgg",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAggAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAggAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAggAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAggAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAggAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAggAggregateResult_n_membersMin(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAggAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAggAggregateResult_n_membersMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NMembersMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAggAggregateResult_n_membersMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAggAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAggAggregateResult_n_membersMax(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAggAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAggAggregateResult_n_membersMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NMembersMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAggAggregateResult_n_membersMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAggAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAggAggregateResult_n_membersSum(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAggAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAggAggregateResult_n_membersSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NMembersSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAggAggregateResult_n_membersSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAggAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAggAggregateResult_n_membersAvg(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAggAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAggAggregateResult_n_membersAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NMembersAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAggAggregateResult_n_membersAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAggAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAggAggregateResult_n_guestsMin(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAggAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAggAggregateResult_n_guestsMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NGuestsMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAggAggregateResult_n_guestsMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAggAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAggAggregateResult_n_guestsMax(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAggAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAggAggregateResult_n_guestsMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NGuestsMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAggAggregateResult_n_guestsMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAggAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAggAggregateResult_n_guestsSum(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAggAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAggAggregateResult_n_guestsSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NGuestsSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAggAggregateResult_n_guestsSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAggAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgaAggAggregateResult_n_guestsAvg(ctx context.Context, field graphql.CollectedField, obj *model.OrgaAggAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgaAggAggregateResult_n_guestsAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NGuestsAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgaAggAggregateResult_n_guestsAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgaAggAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_id(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_username(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_password(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Password, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hidden == nil {
				return nil, errors.New("directive hidden is not implemented")
			}
			return ec.directives.Hidden(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_email(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Email, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hidden == nil {
				return nil, errors.New("directive hidden is not implemented")
			}
			return ec.directives.Hidden(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_email_token(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_email_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.EmailToken, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hidden == nil {
				return nil, errors.New("directive hidden is not implemented")
			}
			return ec.directives.Hidden(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_email_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_token(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Token, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hidden == nil {
				return nil, errors.New("directive hidden is not implemented")
			}
			return ec.directives.Hidden(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_contracts(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contracts, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_contracts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PendingUser_contracts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_subscribe(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_subscribe(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscribe, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_subscribe(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUser_contractsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.PendingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUser_contractsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContractAggregateResult)
	fc.Result = res
	return ec.marshalOContractAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUser_contractsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ContractAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_ContractAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_ContractAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_ContractAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_ContractAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_ContractAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_ContractAggregateResult_messageMax(ctx, field)
			case "contractidMin":
				return ec.fieldContext_ContractAggregateResult_contractidMin(ctx, field)
			case "contractidMax":
				return ec.fieldContext_ContractAggregateResult_contractidMax(ctx, field)
			case "closedAtMin":
				return ec.fieldContext_ContractAggregateResult_closedAtMin(ctx, field)
			case "closedAtMax":
				return ec.fieldContext_ContractAggregateResult_closedAtMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContractAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PendingUser_contractsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_usernameMin(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_usernameMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsernameMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_usernameMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_usernameMax(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_usernameMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsernameMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_usernameMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_passwordMin(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_passwordMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PasswordMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_passwordMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_passwordMax(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_passwordMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PasswordMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_passwordMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_emailMin(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_emailMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_emailMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_emailMax(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_emailMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_emailMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_email_tokenMin(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_email_tokenMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailTokenMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_email_tokenMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_email_tokenMax(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_email_tokenMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailTokenMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_email_tokenMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_tokenMin(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_tokenMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_tokenMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PendingUserAggregateResult_tokenMax(ctx context.Context, field graphql.CollectedField, obj *model.PendingUserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PendingUserAggregateResult_tokenMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PendingUserAggregateResult_tokenMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PendingUserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Point_longitude(ctx context.Context, field graphql.CollectedField, obj *model.Point) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Point_longitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Point_longitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Point",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Point_latitude(ctx context.Context, field graphql.CollectedField, obj *model.Point) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Point_latitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Point_latitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Point",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PointList_points(ctx context.Context, field graphql.CollectedField, obj *model.PointList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PointList_points(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Points, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Point)
	fc.Result = res
	return ec.marshalNPoint2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PointList_points(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PointList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "longitude":
				return ec.fieldContext_Point_longitude(ctx, field)
			case "latitude":
				return ec.fieldContext_Point_latitude(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Point", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Polygon_coordinates(ctx context.Context, field graphql.CollectedField, obj *model.Polygon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Polygon_coordinates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinates, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PointList)
	fc.Result = res
	return ec.marshalNPointList2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointListᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Polygon_coordinates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Polygon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "points":
				return ec.fieldContext_PointList_points(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PointList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_id(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Post_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Post_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_message(ctx context.Context, field graphql.CollectedField, obj *model.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.PostAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.PostAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.PostAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.PostAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.PostAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField, obj *model.PostAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostAggregateResult_messageMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField, obj *model.PostAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostAggregateResult_messageMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_id(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Project_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Project_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_rootnameid(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_rootnameid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rootnameid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_rootnameid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_parentnameid(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_parentnameid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parentnameid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_parentnameid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_nameid(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_nameid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nameid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_nameid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_name(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_description(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_status(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ProjectStatus)
	fc.Result = res
	return ec.marshalNProjectStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProjectStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_columns(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_columns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Columns, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectColumn)
	fc.Result = res
	return ec.marshalOProjectColumn2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_columns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectColumn_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectColumn_name(ctx, field)
			case "about":
				return ec.fieldContext_ProjectColumn_about(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectColumn_pos(ctx, field)
			case "tensions":
				return ec.fieldContext_ProjectColumn_tensions(ctx, field)
			case "project":
				return ec.fieldContext_ProjectColumn_project(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_ProjectColumn_tensionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectColumn", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Project_columns_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Project_leaders(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_leaders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leaders, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_leaders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Project_leaders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Project_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Project_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Project_columnsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_columnsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColumnsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectColumnAggregateResult)
	fc.Result = res
	return ec.marshalOProjectColumnAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_columnsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ProjectColumnAggregateResult_count(ctx, field)
			case "nameMin":
				return ec.fieldContext_ProjectColumnAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_ProjectColumnAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_ProjectColumnAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_ProjectColumnAggregateResult_aboutMax(ctx, field)
			case "posMin":
				return ec.fieldContext_ProjectColumnAggregateResult_posMin(ctx, field)
			case "posMax":
				return ec.fieldContext_ProjectColumnAggregateResult_posMax(ctx, field)
			case "posSum":
				return ec.fieldContext_ProjectColumnAggregateResult_posSum(ctx, field)
			case "posAvg":
				return ec.fieldContext_ProjectColumnAggregateResult_posAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectColumnAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Project_columnsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Project_leadersAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_leadersAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadersAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_leadersAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Project_leadersAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Project_nodesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_nodesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_nodesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Project_nodesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_rootnameidMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_rootnameidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootnameidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_rootnameidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_rootnameidMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_rootnameidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootnameidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_rootnameidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_parentnameidMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_parentnameidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentnameidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_parentnameidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_parentnameidMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_parentnameidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentnameidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_parentnameidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_nameidMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_nameidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_nameidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_nameidMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_nameidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_nameidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_nameMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_nameMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_descriptionMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_descriptionMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_descriptionMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAggregateResult_descriptionMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectAggregateResult_descriptionMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectAggregateResult_descriptionMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumn_id(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumn_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumn_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumn_name(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumn_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumn_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumn_about(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumn_about(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumn_about(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumn_pos(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumn_pos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pos, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumn_pos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumn_tensions(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumn_tensions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tensions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectTension)
	fc.Result = res
	return ec.marshalOProjectTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumn_tensions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTension_id(ctx, field)
			case "tension":
				return ec.fieldContext_ProjectTension_tension(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectTension_pos(ctx, field)
			case "pc":
				return ec.fieldContext_ProjectTension_pc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProjectColumn_tensions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumn_project(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumn_project(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumn_project(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Project_rootnameid(ctx, field)
			case "parentnameid":
				return ec.fieldContext_Project_parentnameid(ctx, field)
			case "nameid":
				return ec.fieldContext_Project_nameid(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "columns":
				return ec.fieldContext_Project_columns(ctx, field)
			case "leaders":
				return ec.fieldContext_Project_leaders(ctx, field)
			case "nodes":
				return ec.fieldContext_Project_nodes(ctx, field)
			case "columnsAggregate":
				return ec.fieldContext_Project_columnsAggregate(ctx, field)
			case "leadersAggregate":
				return ec.fieldContext_Project_leadersAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Project_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProjectColumn_project_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumn_tensionsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumn_tensionsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TensionsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectTensionAggregateResult)
	fc.Result = res
	return ec.marshalOProjectTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumn_tensionsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ProjectTensionAggregateResult_count(ctx, field)
			case "posMin":
				return ec.fieldContext_ProjectTensionAggregateResult_posMin(ctx, field)
			case "posMax":
				return ec.fieldContext_ProjectTensionAggregateResult_posMax(ctx, field)
			case "posSum":
				return ec.fieldContext_ProjectTensionAggregateResult_posSum(ctx, field)
			case "posAvg":
				return ec.fieldContext_ProjectTensionAggregateResult_posAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProjectColumn_tensionsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumnAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumnAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumnAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumnAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumnAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumnAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumnAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumnAggregateResult_nameMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumnAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumnAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumnAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumnAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumnAggregateResult_nameMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumnAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumnAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumnAggregateResult_aboutMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumnAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumnAggregateResult_aboutMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AboutMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumnAggregateResult_aboutMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumnAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumnAggregateResult_aboutMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumnAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumnAggregateResult_aboutMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AboutMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumnAggregateResult_aboutMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumnAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumnAggregateResult_posMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumnAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumnAggregateResult_posMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumnAggregateResult_posMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumnAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumnAggregateResult_posMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumnAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumnAggregateResult_posMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumnAggregateResult_posMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumnAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumnAggregateResult_posSum(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumnAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumnAggregateResult_posSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumnAggregateResult_posSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumnAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectColumnAggregateResult_posAvg(ctx context.Context, field graphql.CollectedField, obj *model.ProjectColumnAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectColumnAggregateResult_posAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectColumnAggregateResult_posAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectColumnAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTension_id(ctx context.Context, field graphql.CollectedField, obj *model.ProjectTension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTension_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTension_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTension_tension(ctx context.Context, field graphql.CollectedField, obj *model.ProjectTension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTension_tension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tension, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tension)
	fc.Result = res
	return ec.marshalNTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTension_tension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProjectTension_tension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTension_pos(ctx context.Context, field graphql.CollectedField, obj *model.ProjectTension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTension_pos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pos, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTension_pos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTension_pc(ctx context.Context, field graphql.CollectedField, obj *model.ProjectTension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTension_pc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pc, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProjectColumn)
	fc.Result = res
	return ec.marshalNProjectColumn2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTension_pc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectColumn_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectColumn_name(ctx, field)
			case "about":
				return ec.fieldContext_ProjectColumn_about(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectColumn_pos(ctx, field)
			case "tensions":
				return ec.fieldContext_ProjectColumn_tensions(ctx, field)
			case "project":
				return ec.fieldContext_ProjectColumn_project(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_ProjectColumn_tensionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectColumn", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ProjectTension_pc_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTensionAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.ProjectTensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTensionAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTensionAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTensionAggregateResult_posMin(ctx context.Context, field graphql.CollectedField, obj *model.ProjectTensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTensionAggregateResult_posMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTensionAggregateResult_posMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTensionAggregateResult_posMax(ctx context.Context, field graphql.CollectedField, obj *model.ProjectTensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTensionAggregateResult_posMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTensionAggregateResult_posMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTensionAggregateResult_posSum(ctx context.Context, field graphql.CollectedField, obj *model.ProjectTensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTensionAggregateResult_posSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTensionAggregateResult_posSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectTensionAggregateResult_posAvg(ctx context.Context, field graphql.CollectedField, obj *model.ProjectTensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectTensionAggregateResult_posAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectTensionAggregateResult_posAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectTensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetNode(rctx, fc.Args["id"].(*string), fc.Args["nameid"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getNode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryNode(rctx, fc.Args["filter"].(*model.NodeFilter), fc.Args["order"].(*model.NodeOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryNode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateNode(rctx, fc.Args["filter"].(*model.NodeFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateNode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getNodeFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetNodeFragment(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getNodeFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NodeFragment_id(ctx, field)
			case "nameid":
				return ec.fieldContext_NodeFragment_nameid(ctx, field)
			case "name":
				return ec.fieldContext_NodeFragment_name(ctx, field)
			case "about":
				return ec.fieldContext_NodeFragment_about(ctx, field)
			case "mandate":
				return ec.fieldContext_NodeFragment_mandate(ctx, field)
			case "skills":
				return ec.fieldContext_NodeFragment_skills(ctx, field)
			case "visibility":
				return ec.fieldContext_NodeFragment_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_NodeFragment_mode(ctx, field)
			case "type_":
				return ec.fieldContext_NodeFragment_type_(ctx, field)
			case "first_link":
				return ec.fieldContext_NodeFragment_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_NodeFragment_second_link(ctx, field)
			case "role_ext":
				return ec.fieldContext_NodeFragment_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_NodeFragment_role_type(ctx, field)
			case "color":
				return ec.fieldContext_NodeFragment_color(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getNodeFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryNodeFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryNodeFragment(rctx, fc.Args["filter"].(*model.NodeFragmentFilter), fc.Args["order"].(*model.NodeFragmentOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryNodeFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NodeFragment_id(ctx, field)
			case "nameid":
				return ec.fieldContext_NodeFragment_nameid(ctx, field)
			case "name":
				return ec.fieldContext_NodeFragment_name(ctx, field)
			case "about":
				return ec.fieldContext_NodeFragment_about(ctx, field)
			case "mandate":
				return ec.fieldContext_NodeFragment_mandate(ctx, field)
			case "skills":
				return ec.fieldContext_NodeFragment_skills(ctx, field)
			case "visibility":
				return ec.fieldContext_NodeFragment_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_NodeFragment_mode(ctx, field)
			case "type_":
				return ec.fieldContext_NodeFragment_type_(ctx, field)
			case "first_link":
				return ec.fieldContext_NodeFragment_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_NodeFragment_second_link(ctx, field)
			case "role_ext":
				return ec.fieldContext_NodeFragment_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_NodeFragment_role_type(ctx, field)
			case "color":
				return ec.fieldContext_NodeFragment_color(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryNodeFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateNodeFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateNodeFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateNodeFragment(rctx, fc.Args["filter"].(*model.NodeFragmentFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeFragmentAggregateResult)
	fc.Result = res
	return ec.marshalONodeFragmentAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateNodeFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeFragmentAggregateResult_count(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeFragmentAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeFragmentAggregateResult_nameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeFragmentAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeFragmentAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeFragmentAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeFragmentAggregateResult_aboutMax(ctx, field)
			case "first_linkMin":
				return ec.fieldContext_NodeFragmentAggregateResult_first_linkMin(ctx, field)
			case "first_linkMax":
				return ec.fieldContext_NodeFragmentAggregateResult_first_linkMax(ctx, field)
			case "second_linkMin":
				return ec.fieldContext_NodeFragmentAggregateResult_second_linkMin(ctx, field)
			case "second_linkMax":
				return ec.fieldContext_NodeFragmentAggregateResult_second_linkMax(ctx, field)
			case "role_extMin":
				return ec.fieldContext_NodeFragmentAggregateResult_role_extMin(ctx, field)
			case "role_extMax":
				return ec.fieldContext_NodeFragmentAggregateResult_role_extMax(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeFragmentAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeFragmentAggregateResult_colorMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeFragmentAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateNodeFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getMandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMandate(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getMandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Mandate_id(ctx, field)
			case "purpose":
				return ec.fieldContext_Mandate_purpose(ctx, field)
			case "responsabilities":
				return ec.fieldContext_Mandate_responsabilities(ctx, field)
			case "domains":
				return ec.fieldContext_Mandate_domains(ctx, field)
			case "policies":
				return ec.fieldContext_Mandate_policies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Mandate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryMandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryMandate(rctx, fc.Args["filter"].(*model.MandateFilter), fc.Args["order"].(*model.MandateOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryMandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Mandate_id(ctx, field)
			case "purpose":
				return ec.fieldContext_Mandate_purpose(ctx, field)
			case "responsabilities":
				return ec.fieldContext_Mandate_responsabilities(ctx, field)
			case "domains":
				return ec.fieldContext_Mandate_domains(ctx, field)
			case "policies":
				return ec.fieldContext_Mandate_policies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Mandate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryMandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateMandate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateMandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateMandate(rctx, fc.Args["filter"].(*model.MandateFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MandateAggregateResult)
	fc.Result = res
	return ec.marshalOMandateAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateMandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_MandateAggregateResult_count(ctx, field)
			case "purposeMin":
				return ec.fieldContext_MandateAggregateResult_purposeMin(ctx, field)
			case "purposeMax":
				return ec.fieldContext_MandateAggregateResult_purposeMax(ctx, field)
			case "responsabilitiesMin":
				return ec.fieldContext_MandateAggregateResult_responsabilitiesMin(ctx, field)
			case "responsabilitiesMax":
				return ec.fieldContext_MandateAggregateResult_responsabilitiesMax(ctx, field)
			case "domainsMin":
				return ec.fieldContext_MandateAggregateResult_domainsMin(ctx, field)
			case "domainsMax":
				return ec.fieldContext_MandateAggregateResult_domainsMax(ctx, field)
			case "policiesMin":
				return ec.fieldContext_MandateAggregateResult_policiesMin(ctx, field)
			case "policiesMax":
				return ec.fieldContext_MandateAggregateResult_policiesMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MandateAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateMandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLabel(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Label_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Label_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_Label_name(ctx, field)
			case "description":
				return ec.fieldContext_Label_description(ctx, field)
			case "color":
				return ec.fieldContext_Label_color(ctx, field)
			case "tensions":
				return ec.fieldContext_Label_tensions(ctx, field)
			case "nodes":
				return ec.fieldContext_Label_nodes(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_Label_tensionsAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Label_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Label", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getLabel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryLabel(rctx, fc.Args["filter"].(*model.LabelFilter), fc.Args["order"].(*model.LabelOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Label_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Label_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_Label_name(ctx, field)
			case "description":
				return ec.fieldContext_Label_description(ctx, field)
			case "color":
				return ec.fieldContext_Label_color(ctx, field)
			case "tensions":
				return ec.fieldContext_Label_tensions(ctx, field)
			case "nodes":
				return ec.fieldContext_Label_nodes(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_Label_tensionsAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Label_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Label", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryLabel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateLabel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateLabel(rctx, fc.Args["filter"].(*model.LabelFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LabelAggregateResult)
	fc.Result = res
	return ec.marshalOLabelAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_LabelAggregateResult_count(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_LabelAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_LabelAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_LabelAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_LabelAggregateResult_nameMax(ctx, field)
			case "descriptionMin":
				return ec.fieldContext_LabelAggregateResult_descriptionMin(ctx, field)
			case "descriptionMax":
				return ec.fieldContext_LabelAggregateResult_descriptionMax(ctx, field)
			case "colorMin":
				return ec.fieldContext_LabelAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_LabelAggregateResult_colorMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LabelAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateLabel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getRoleExt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getRoleExt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRoleExt(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RoleExt)
	fc.Result = res
	return ec.marshalORoleExt2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getRoleExt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleExt_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_RoleExt_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_RoleExt_name(ctx, field)
			case "about":
				return ec.fieldContext_RoleExt_about(ctx, field)
			case "role_type":
				return ec.fieldContext_RoleExt_role_type(ctx, field)
			case "color":
				return ec.fieldContext_RoleExt_color(ctx, field)
			case "mandate":
				return ec.fieldContext_RoleExt_mandate(ctx, field)
			case "roles":
				return ec.fieldContext_RoleExt_roles(ctx, field)
			case "nodes":
				return ec.fieldContext_RoleExt_nodes(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_RoleExt_rolesAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_RoleExt_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleExt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getRoleExt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryRoleExt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryRoleExt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryRoleExt(rctx, fc.Args["filter"].(*model.RoleExtFilter), fc.Args["order"].(*model.RoleExtOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RoleExt)
	fc.Result = res
	return ec.marshalORoleExt2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryRoleExt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleExt_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_RoleExt_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_RoleExt_name(ctx, field)
			case "about":
				return ec.fieldContext_RoleExt_about(ctx, field)
			case "role_type":
				return ec.fieldContext_RoleExt_role_type(ctx, field)
			case "color":
				return ec.fieldContext_RoleExt_color(ctx, field)
			case "mandate":
				return ec.fieldContext_RoleExt_mandate(ctx, field)
			case "roles":
				return ec.fieldContext_RoleExt_roles(ctx, field)
			case "nodes":
				return ec.fieldContext_RoleExt_nodes(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_RoleExt_rolesAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_RoleExt_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleExt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryRoleExt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateRoleExt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateRoleExt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateRoleExt(rctx, fc.Args["filter"].(*model.RoleExtFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RoleExtAggregateResult)
	fc.Result = res
	return ec.marshalORoleExtAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateRoleExt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_RoleExtAggregateResult_count(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_RoleExtAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_RoleExtAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_RoleExtAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_RoleExtAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_RoleExtAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_RoleExtAggregateResult_aboutMax(ctx, field)
			case "colorMin":
				return ec.fieldContext_RoleExtAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_RoleExtAggregateResult_colorMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleExtAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateRoleExt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetProject(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Project)
	fc.Result = res
	return ec.marshalOProject2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Project_rootnameid(ctx, field)
			case "parentnameid":
				return ec.fieldContext_Project_parentnameid(ctx, field)
			case "nameid":
				return ec.fieldContext_Project_nameid(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "columns":
				return ec.fieldContext_Project_columns(ctx, field)
			case "leaders":
				return ec.fieldContext_Project_leaders(ctx, field)
			case "nodes":
				return ec.fieldContext_Project_nodes(ctx, field)
			case "columnsAggregate":
				return ec.fieldContext_Project_columnsAggregate(ctx, field)
			case "leadersAggregate":
				return ec.fieldContext_Project_leadersAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Project_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryProject(rctx, fc.Args["filter"].(*model.ProjectFilter), fc.Args["order"].(*model.ProjectOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Project_rootnameid(ctx, field)
			case "parentnameid":
				return ec.fieldContext_Project_parentnameid(ctx, field)
			case "nameid":
				return ec.fieldContext_Project_nameid(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "columns":
				return ec.fieldContext_Project_columns(ctx, field)
			case "leaders":
				return ec.fieldContext_Project_leaders(ctx, field)
			case "nodes":
				return ec.fieldContext_Project_nodes(ctx, field)
			case "columnsAggregate":
				return ec.fieldContext_Project_columnsAggregate(ctx, field)
			case "leadersAggregate":
				return ec.fieldContext_Project_leadersAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Project_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateProject(rctx, fc.Args["filter"].(*model.ProjectFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectAggregateResult)
	fc.Result = res
	return ec.marshalOProjectAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ProjectAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_ProjectAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_ProjectAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_ProjectAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_ProjectAggregateResult_updatedAtMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_ProjectAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_ProjectAggregateResult_rootnameidMax(ctx, field)
			case "parentnameidMin":
				return ec.fieldContext_ProjectAggregateResult_parentnameidMin(ctx, field)
			case "parentnameidMax":
				return ec.fieldContext_ProjectAggregateResult_parentnameidMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_ProjectAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_ProjectAggregateResult_nameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_ProjectAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_ProjectAggregateResult_nameMax(ctx, field)
			case "descriptionMin":
				return ec.fieldContext_ProjectAggregateResult_descriptionMin(ctx, field)
			case "descriptionMax":
				return ec.fieldContext_ProjectAggregateResult_descriptionMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProjectTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getProjectTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetProjectTension(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectTension)
	fc.Result = res
	return ec.marshalOProjectTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getProjectTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTension_id(ctx, field)
			case "tension":
				return ec.fieldContext_ProjectTension_tension(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectTension_pos(ctx, field)
			case "pc":
				return ec.fieldContext_ProjectTension_pc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getProjectTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryProjectTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryProjectTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryProjectTension(rctx, fc.Args["filter"].(*model.ProjectTensionFilter), fc.Args["order"].(*model.ProjectTensionOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectTension)
	fc.Result = res
	return ec.marshalOProjectTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryProjectTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTension_id(ctx, field)
			case "tension":
				return ec.fieldContext_ProjectTension_tension(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectTension_pos(ctx, field)
			case "pc":
				return ec.fieldContext_ProjectTension_pc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryProjectTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateProjectTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateProjectTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateProjectTension(rctx, fc.Args["filter"].(*model.ProjectTensionFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectTensionAggregateResult)
	fc.Result = res
	return ec.marshalOProjectTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateProjectTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ProjectTensionAggregateResult_count(ctx, field)
			case "posMin":
				return ec.fieldContext_ProjectTensionAggregateResult_posMin(ctx, field)
			case "posMax":
				return ec.fieldContext_ProjectTensionAggregateResult_posMax(ctx, field)
			case "posSum":
				return ec.fieldContext_ProjectTensionAggregateResult_posSum(ctx, field)
			case "posAvg":
				return ec.fieldContext_ProjectTensionAggregateResult_posAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateProjectTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProjectColumn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getProjectColumn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetProjectColumn(rctx, fc.Args["id"].(*string), fc.Args["name"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectColumn)
	fc.Result = res
	return ec.marshalOProjectColumn2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getProjectColumn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectColumn_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectColumn_name(ctx, field)
			case "about":
				return ec.fieldContext_ProjectColumn_about(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectColumn_pos(ctx, field)
			case "tensions":
				return ec.fieldContext_ProjectColumn_tensions(ctx, field)
			case "project":
				return ec.fieldContext_ProjectColumn_project(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_ProjectColumn_tensionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectColumn", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getProjectColumn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryProjectColumn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryProjectColumn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryProjectColumn(rctx, fc.Args["filter"].(*model.ProjectColumnFilter), fc.Args["order"].(*model.ProjectColumnOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectColumn)
	fc.Result = res
	return ec.marshalOProjectColumn2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryProjectColumn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectColumn_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectColumn_name(ctx, field)
			case "about":
				return ec.fieldContext_ProjectColumn_about(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectColumn_pos(ctx, field)
			case "tensions":
				return ec.fieldContext_ProjectColumn_tensions(ctx, field)
			case "project":
				return ec.fieldContext_ProjectColumn_project(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_ProjectColumn_tensionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectColumn", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryProjectColumn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateProjectColumn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateProjectColumn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateProjectColumn(rctx, fc.Args["filter"].(*model.ProjectColumnFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectColumnAggregateResult)
	fc.Result = res
	return ec.marshalOProjectColumnAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateProjectColumn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ProjectColumnAggregateResult_count(ctx, field)
			case "nameMin":
				return ec.fieldContext_ProjectColumnAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_ProjectColumnAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_ProjectColumnAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_ProjectColumnAggregateResult_aboutMax(ctx, field)
			case "posMin":
				return ec.fieldContext_ProjectColumnAggregateResult_posMin(ctx, field)
			case "posMax":
				return ec.fieldContext_ProjectColumnAggregateResult_posMax(ctx, field)
			case "posSum":
				return ec.fieldContext_ProjectColumnAggregateResult_posSum(ctx, field)
			case "posAvg":
				return ec.fieldContext_ProjectColumnAggregateResult_posAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectColumnAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateProjectColumn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryOrgaAgg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryOrgaAgg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryOrgaAgg(rctx, fc.Args["filter"].(*model.OrgaAggFilter), fc.Args["order"].(*model.OrgaAggOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OrgaAgg)
	fc.Result = res
	return ec.marshalOOrgaAgg2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAgg(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryOrgaAgg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "n_members":
				return ec.fieldContext_OrgaAgg_n_members(ctx, field)
			case "n_guests":
				return ec.fieldContext_OrgaAgg_n_guests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgaAgg", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryOrgaAgg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateOrgaAgg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateOrgaAgg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateOrgaAgg(rctx, fc.Args["filter"].(*model.OrgaAggFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrgaAggAggregateResult)
	fc.Result = res
	return ec.marshalOOrgaAggAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateOrgaAgg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_OrgaAggAggregateResult_count(ctx, field)
			case "n_membersMin":
				return ec.fieldContext_OrgaAggAggregateResult_n_membersMin(ctx, field)
			case "n_membersMax":
				return ec.fieldContext_OrgaAggAggregateResult_n_membersMax(ctx, field)
			case "n_membersSum":
				return ec.fieldContext_OrgaAggAggregateResult_n_membersSum(ctx, field)
			case "n_membersAvg":
				return ec.fieldContext_OrgaAggAggregateResult_n_membersAvg(ctx, field)
			case "n_guestsMin":
				return ec.fieldContext_OrgaAggAggregateResult_n_guestsMin(ctx, field)
			case "n_guestsMax":
				return ec.fieldContext_OrgaAggAggregateResult_n_guestsMax(ctx, field)
			case "n_guestsSum":
				return ec.fieldContext_OrgaAggAggregateResult_n_guestsSum(ctx, field)
			case "n_guestsAvg":
				return ec.fieldContext_OrgaAggAggregateResult_n_guestsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgaAggAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateOrgaAgg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPost(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Post_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Post_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Post_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryPost(rctx, fc.Args["filter"].(*model.PostFilter), fc.Args["order"].(*model.PostOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Post)
	fc.Result = res
	return ec.marshalOPost2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Post_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Post_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Post_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregatePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregatePost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregatePost(rctx, fc.Args["filter"].(*model.PostFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PostAggregateResult)
	fc.Result = res
	return ec.marshalOPostAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregatePost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_PostAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_PostAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_PostAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_PostAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_PostAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_PostAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_PostAggregateResult_messageMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregatePost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTension(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryTension(rctx, fc.Args["filter"].(*model.TensionFilter), fc.Args["order"].(*model.TensionOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateTension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateTension(rctx, fc.Args["filter"].(*model.TensionFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAggregateResult)
	fc.Result = res
	return ec.marshalOTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_TensionAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_TensionAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_TensionAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_TensionAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_TensionAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_TensionAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_TensionAggregateResult_messageMax(ctx, field)
			case "emitteridMin":
				return ec.fieldContext_TensionAggregateResult_emitteridMin(ctx, field)
			case "emitteridMax":
				return ec.fieldContext_TensionAggregateResult_emitteridMax(ctx, field)
			case "receiveridMin":
				return ec.fieldContext_TensionAggregateResult_receiveridMin(ctx, field)
			case "receiveridMax":
				return ec.fieldContext_TensionAggregateResult_receiveridMax(ctx, field)
			case "titleMin":
				return ec.fieldContext_TensionAggregateResult_titleMin(ctx, field)
			case "titleMax":
				return ec.fieldContext_TensionAggregateResult_titleMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx, field)
			case "n_commentsMin":
				return ec.fieldContext_TensionAggregateResult_n_commentsMin(ctx, field)
			case "n_commentsMax":
				return ec.fieldContext_TensionAggregateResult_n_commentsMax(ctx, field)
			case "n_commentsSum":
				return ec.fieldContext_TensionAggregateResult_n_commentsSum(ctx, field)
			case "n_commentsAvg":
				return ec.fieldContext_TensionAggregateResult_n_commentsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetComment(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_Comment_message(ctx, field)
			case "reactions":
				return ec.fieldContext_Comment_reactions(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Comment_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Comment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Comment_updatedAt(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_Comment_reactionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryComment(rctx, fc.Args["filter"].(*model.CommentFilter), fc.Args["order"].(*model.CommentOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_Comment_message(ctx, field)
			case "reactions":
				return ec.fieldContext_Comment_reactions(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Comment_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Comment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Comment_updatedAt(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_Comment_reactionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateComment(rctx, fc.Args["filter"].(*model.CommentFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommentAggregateResult)
	fc.Result = res
	return ec.marshalOCommentAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_CommentAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_CommentAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_CommentAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_CommentAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_CommentAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_CommentAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_CommentAggregateResult_messageMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommentAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getReaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getReaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetReaction(rctx, fc.Args["id"].(*string), fc.Args["reactionid"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Reaction)
	fc.Result = res
	return ec.marshalOReaction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getReaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reaction_id(ctx, field)
			case "reactionid":
				return ec.fieldContext_Reaction_reactionid(ctx, field)
			case "user":
				return ec.fieldContext_Reaction_user(ctx, field)
			case "comment":
				return ec.fieldContext_Reaction_comment(ctx, field)
			case "type_":
				return ec.fieldContext_Reaction_type_(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getReaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryReaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryReaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryReaction(rctx, fc.Args["filter"].(*model.ReactionFilter), fc.Args["order"].(*model.ReactionOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Reaction)
	fc.Result = res
	return ec.marshalOReaction2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryReaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reaction_id(ctx, field)
			case "reactionid":
				return ec.fieldContext_Reaction_reactionid(ctx, field)
			case "user":
				return ec.fieldContext_Reaction_user(ctx, field)
			case "comment":
				return ec.fieldContext_Reaction_comment(ctx, field)
			case "type_":
				return ec.fieldContext_Reaction_type_(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryReaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateReaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateReaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateReaction(rctx, fc.Args["filter"].(*model.ReactionFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ReactionAggregateResult)
	fc.Result = res
	return ec.marshalOReactionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateReaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ReactionAggregateResult_count(ctx, field)
			case "reactionidMin":
				return ec.fieldContext_ReactionAggregateResult_reactionidMin(ctx, field)
			case "reactionidMax":
				return ec.fieldContext_ReactionAggregateResult_reactionidMax(ctx, field)
			case "type_Min":
				return ec.fieldContext_ReactionAggregateResult_type_Min(ctx, field)
			case "type_Max":
				return ec.fieldContext_ReactionAggregateResult_type_Max(ctx, field)
			case "type_Sum":
				return ec.fieldContext_ReactionAggregateResult_type_Sum(ctx, field)
			case "type_Avg":
				return ec.fieldContext_ReactionAggregateResult_type_Avg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReactionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateReaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getBlob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBlob(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getBlob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Blob_tension(ctx, field)
			case "blob_type":
				return ec.fieldContext_Blob_blob_type(ctx, field)
			case "pushedFlag":
				return ec.fieldContext_Blob_pushedFlag(ctx, field)
			case "archivedFlag":
				return ec.fieldContext_Blob_archivedFlag(ctx, field)
			case "node":
				return ec.fieldContext_Blob_node(ctx, field)
			case "md":
				return ec.fieldContext_Blob_md(ctx, field)
			case "id":
				return ec.fieldContext_Blob_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Blob_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Blob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Blob_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Blob_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blob", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getBlob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryBlob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryBlob(rctx, fc.Args["filter"].(*model.BlobFilter), fc.Args["order"].(*model.BlobOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryBlob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Blob_tension(ctx, field)
			case "blob_type":
				return ec.fieldContext_Blob_blob_type(ctx, field)
			case "pushedFlag":
				return ec.fieldContext_Blob_pushedFlag(ctx, field)
			case "archivedFlag":
				return ec.fieldContext_Blob_archivedFlag(ctx, field)
			case "node":
				return ec.fieldContext_Blob_node(ctx, field)
			case "md":
				return ec.fieldContext_Blob_md(ctx, field)
			case "id":
				return ec.fieldContext_Blob_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Blob_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Blob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Blob_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Blob_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blob", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryBlob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateBlob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateBlob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateBlob(rctx, fc.Args["filter"].(*model.BlobFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlobAggregateResult)
	fc.Result = res
	return ec.marshalOBlobAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateBlob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_BlobAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_BlobAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_BlobAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_BlobAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_BlobAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_BlobAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_BlobAggregateResult_messageMax(ctx, field)
			case "pushedFlagMin":
				return ec.fieldContext_BlobAggregateResult_pushedFlagMin(ctx, field)
			case "pushedFlagMax":
				return ec.fieldContext_BlobAggregateResult_pushedFlagMax(ctx, field)
			case "archivedFlagMin":
				return ec.fieldContext_BlobAggregateResult_archivedFlagMin(ctx, field)
			case "archivedFlagMax":
				return ec.fieldContext_BlobAggregateResult_archivedFlagMax(ctx, field)
			case "mdMin":
				return ec.fieldContext_BlobAggregateResult_mdMin(ctx, field)
			case "mdMax":
				return ec.fieldContext_BlobAggregateResult_mdMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateBlob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetEvent(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Event_tension(ctx, field)
			case "event_type":
				return ec.fieldContext_Event_event_type(ctx, field)
			case "mentioned":
				return ec.fieldContext_Event_mentioned(ctx, field)
			case "old":
				return ec.fieldContext_Event_old(ctx, field)
			case "new":
				return ec.fieldContext_Event_new(ctx, field)
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Event_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Event_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Event_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Event_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryEvent(rctx, fc.Args["filter"].(*model.EventFilter), fc.Args["order"].(*model.EventOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Event_tension(ctx, field)
			case "event_type":
				return ec.fieldContext_Event_event_type(ctx, field)
			case "mentioned":
				return ec.fieldContext_Event_mentioned(ctx, field)
			case "old":
				return ec.fieldContext_Event_old(ctx, field)
			case "new":
				return ec.fieldContext_Event_new(ctx, field)
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Event_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Event_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Event_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Event_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateEvent(rctx, fc.Args["filter"].(*model.EventFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventAggregateResult)
	fc.Result = res
	return ec.marshalOEventAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_EventAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_EventAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_EventAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_EventAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_EventAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_EventAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_EventAggregateResult_messageMax(ctx, field)
			case "oldMin":
				return ec.fieldContext_EventAggregateResult_oldMin(ctx, field)
			case "oldMax":
				return ec.fieldContext_EventAggregateResult_oldMax(ctx, field)
			case "newMin":
				return ec.fieldContext_EventAggregateResult_newMin(ctx, field)
			case "newMax":
				return ec.fieldContext_EventAggregateResult_newMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryEventFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryEventFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryEventFragment(rctx, fc.Args["filter"].(*model.EventFragmentFilter), fc.Args["order"].(*model.EventFragmentOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventFragment)
	fc.Result = res
	return ec.marshalOEventFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryEventFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "event_type":
				return ec.fieldContext_EventFragment_event_type(ctx, field)
			case "old":
				return ec.fieldContext_EventFragment_old(ctx, field)
			case "new":
				return ec.fieldContext_EventFragment_new(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryEventFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateEventFragment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateEventFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateEventFragment(rctx, fc.Args["filter"].(*model.EventFragmentFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventFragmentAggregateResult)
	fc.Result = res
	return ec.marshalOEventFragmentAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateEventFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_EventFragmentAggregateResult_count(ctx, field)
			case "oldMin":
				return ec.fieldContext_EventFragmentAggregateResult_oldMin(ctx, field)
			case "oldMax":
				return ec.fieldContext_EventFragmentAggregateResult_oldMax(ctx, field)
			case "newMin":
				return ec.fieldContext_EventFragmentAggregateResult_newMin(ctx, field)
			case "newMax":
				return ec.fieldContext_EventFragmentAggregateResult_newMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventFragmentAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateEventFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getContract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetContract(rctx, fc.Args["id"].(*string), fc.Args["contractid"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getContract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getContract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryContract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryContract(rctx, fc.Args["filter"].(*model.ContractFilter), fc.Args["order"].(*model.ContractOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryContract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryContract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateContract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateContract(rctx, fc.Args["filter"].(*model.ContractFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContractAggregateResult)
	fc.Result = res
	return ec.marshalOContractAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateContract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ContractAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_ContractAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_ContractAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_ContractAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_ContractAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_ContractAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_ContractAggregateResult_messageMax(ctx, field)
			case "contractidMin":
				return ec.fieldContext_ContractAggregateResult_contractidMin(ctx, field)
			case "contractidMax":
				return ec.fieldContext_ContractAggregateResult_contractidMax(ctx, field)
			case "closedAtMin":
				return ec.fieldContext_ContractAggregateResult_closedAtMin(ctx, field)
			case "closedAtMax":
				return ec.fieldContext_ContractAggregateResult_closedAtMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContractAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateContract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getVote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getVote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVote(rctx, fc.Args["id"].(*string), fc.Args["voteid"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Vote)
	fc.Result = res
	return ec.marshalOVote2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getVote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "voteid":
				return ec.fieldContext_Vote_voteid(ctx, field)
			case "contract":
				return ec.fieldContext_Vote_contract(ctx, field)
			case "node":
				return ec.fieldContext_Vote_node(ctx, field)
			case "data":
				return ec.fieldContext_Vote_data(ctx, field)
			case "id":
				return ec.fieldContext_Vote_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Vote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vote_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vote_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Vote_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getVote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryVote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryVote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryVote(rctx, fc.Args["filter"].(*model.VoteFilter), fc.Args["order"].(*model.VoteOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Vote)
	fc.Result = res
	return ec.marshalOVote2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryVote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "voteid":
				return ec.fieldContext_Vote_voteid(ctx, field)
			case "contract":
				return ec.fieldContext_Vote_contract(ctx, field)
			case "node":
				return ec.fieldContext_Vote_node(ctx, field)
			case "data":
				return ec.fieldContext_Vote_data(ctx, field)
			case "id":
				return ec.fieldContext_Vote_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Vote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vote_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vote_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Vote_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryVote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateVote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateVote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateVote(rctx, fc.Args["filter"].(*model.VoteFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoteAggregateResult)
	fc.Result = res
	return ec.marshalOVoteAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateVote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_VoteAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_VoteAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_VoteAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_VoteAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_VoteAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_VoteAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_VoteAggregateResult_messageMax(ctx, field)
			case "voteidMin":
				return ec.fieldContext_VoteAggregateResult_voteidMin(ctx, field)
			case "voteidMax":
				return ec.fieldContext_VoteAggregateResult_voteidMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VoteAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateVote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUser(rctx, fc.Args["id"].(*string), fc.Args["username"].(*string), fc.Args["email"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUser(rctx, fc.Args["filter"].(*model.UserFilter), fc.Args["order"].(*model.UserOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateUser(rctx, fc.Args["filter"].(*model.UserFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserAggregateResult)
	fc.Result = res
	return ec.marshalOUserAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_UserAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_UserAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_UserAggregateResult_createdAtMax(ctx, field)
			case "lastAckMin":
				return ec.fieldContext_UserAggregateResult_lastAckMin(ctx, field)
			case "lastAckMax":
				return ec.fieldContext_UserAggregateResult_lastAckMax(ctx, field)
			case "usernameMin":
				return ec.fieldContext_UserAggregateResult_usernameMin(ctx, field)
			case "usernameMax":
				return ec.fieldContext_UserAggregateResult_usernameMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_UserAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_UserAggregateResult_nameMax(ctx, field)
			case "emailMin":
				return ec.fieldContext_UserAggregateResult_emailMin(ctx, field)
			case "emailMax":
				return ec.fieldContext_UserAggregateResult_emailMax(ctx, field)
			case "passwordMin":
				return ec.fieldContext_UserAggregateResult_passwordMin(ctx, field)
			case "passwordMax":
				return ec.fieldContext_UserAggregateResult_passwordMax(ctx, field)
			case "bioMin":
				return ec.fieldContext_UserAggregateResult_bioMin(ctx, field)
			case "bioMax":
				return ec.fieldContext_UserAggregateResult_bioMax(ctx, field)
			case "locationMin":
				return ec.fieldContext_UserAggregateResult_locationMin(ctx, field)
			case "locationMax":
				return ec.fieldContext_UserAggregateResult_locationMax(ctx, field)
			case "utcMin":
				return ec.fieldContext_UserAggregateResult_utcMin(ctx, field)
			case "utcMax":
				return ec.fieldContext_UserAggregateResult_utcMax(ctx, field)
			case "markAllAsReadMin":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMin(ctx, field)
			case "markAllAsReadMax":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPendingUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPendingUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPendingUser(rctx, fc.Args["id"].(*string), fc.Args["username"].(*string), fc.Args["email"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PendingUser)
	fc.Result = res
	return ec.marshalOPendingUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPendingUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PendingUser_id(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PendingUser_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_PendingUser_username(ctx, field)
			case "password":
				return ec.fieldContext_PendingUser_password(ctx, field)
			case "email":
				return ec.fieldContext_PendingUser_email(ctx, field)
			case "email_token":
				return ec.fieldContext_PendingUser_email_token(ctx, field)
			case "token":
				return ec.fieldContext_PendingUser_token(ctx, field)
			case "contracts":
				return ec.fieldContext_PendingUser_contracts(ctx, field)
			case "subscribe":
				return ec.fieldContext_PendingUser_subscribe(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_PendingUser_contractsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PendingUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPendingUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryPendingUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryPendingUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryPendingUser(rctx, fc.Args["filter"].(*model.PendingUserFilter), fc.Args["order"].(*model.PendingUserOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PendingUser)
	fc.Result = res
	return ec.marshalOPendingUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryPendingUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PendingUser_id(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PendingUser_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_PendingUser_username(ctx, field)
			case "password":
				return ec.fieldContext_PendingUser_password(ctx, field)
			case "email":
				return ec.fieldContext_PendingUser_email(ctx, field)
			case "email_token":
				return ec.fieldContext_PendingUser_email_token(ctx, field)
			case "token":
				return ec.fieldContext_PendingUser_token(ctx, field)
			case "contracts":
				return ec.fieldContext_PendingUser_contracts(ctx, field)
			case "subscribe":
				return ec.fieldContext_PendingUser_subscribe(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_PendingUser_contractsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PendingUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryPendingUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregatePendingUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregatePendingUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregatePendingUser(rctx, fc.Args["filter"].(*model.PendingUserFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PendingUserAggregateResult)
	fc.Result = res
	return ec.marshalOPendingUserAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregatePendingUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_PendingUserAggregateResult_count(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_PendingUserAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_PendingUserAggregateResult_updatedAtMax(ctx, field)
			case "usernameMin":
				return ec.fieldContext_PendingUserAggregateResult_usernameMin(ctx, field)
			case "usernameMax":
				return ec.fieldContext_PendingUserAggregateResult_usernameMax(ctx, field)
			case "passwordMin":
				return ec.fieldContext_PendingUserAggregateResult_passwordMin(ctx, field)
			case "passwordMax":
				return ec.fieldContext_PendingUserAggregateResult_passwordMax(ctx, field)
			case "emailMin":
				return ec.fieldContext_PendingUserAggregateResult_emailMin(ctx, field)
			case "emailMax":
				return ec.fieldContext_PendingUserAggregateResult_emailMax(ctx, field)
			case "email_tokenMin":
				return ec.fieldContext_PendingUserAggregateResult_email_tokenMin(ctx, field)
			case "email_tokenMax":
				return ec.fieldContext_PendingUserAggregateResult_email_tokenMax(ctx, field)
			case "tokenMin":
				return ec.fieldContext_PendingUserAggregateResult_tokenMin(ctx, field)
			case "tokenMax":
				return ec.fieldContext_PendingUserAggregateResult_tokenMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PendingUserAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregatePendingUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryUserRights(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryUserRights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserRights(rctx, fc.Args["filter"].(*model.UserRightsFilter), fc.Args["order"].(*model.UserRightsOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserRights)
	fc.Result = res
	return ec.marshalOUserRights2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryUserRights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type_":
				return ec.fieldContext_UserRights_type_(ctx, field)
			case "canLogin":
				return ec.fieldContext_UserRights_canLogin(ctx, field)
			case "canCreateRoot":
				return ec.fieldContext_UserRights_canCreateRoot(ctx, field)
			case "maxPublicOrga":
				return ec.fieldContext_UserRights_maxPublicOrga(ctx, field)
			case "maxPrivateOrga":
				return ec.fieldContext_UserRights_maxPrivateOrga(ctx, field)
			case "hasEmailNotifications":
				return ec.fieldContext_UserRights_hasEmailNotifications(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRights", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryUserRights_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateUserRights(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateUserRights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateUserRights(rctx, fc.Args["filter"].(*model.UserRightsFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserRightsAggregateResult)
	fc.Result = res
	return ec.marshalOUserRightsAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateUserRights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_UserRightsAggregateResult_count(ctx, field)
			case "maxPublicOrgaMin":
				return ec.fieldContext_UserRightsAggregateResult_maxPublicOrgaMin(ctx, field)
			case "maxPublicOrgaMax":
				return ec.fieldContext_UserRightsAggregateResult_maxPublicOrgaMax(ctx, field)
			case "maxPublicOrgaSum":
				return ec.fieldContext_UserRightsAggregateResult_maxPublicOrgaSum(ctx, field)
			case "maxPublicOrgaAvg":
				return ec.fieldContext_UserRightsAggregateResult_maxPublicOrgaAvg(ctx, field)
			case "maxPrivateOrgaMin":
				return ec.fieldContext_UserRightsAggregateResult_maxPrivateOrgaMin(ctx, field)
			case "maxPrivateOrgaMax":
				return ec.fieldContext_UserRightsAggregateResult_maxPrivateOrgaMax(ctx, field)
			case "maxPrivateOrgaSum":
				return ec.fieldContext_UserRightsAggregateResult_maxPrivateOrgaSum(ctx, field)
			case "maxPrivateOrgaAvg":
				return ec.fieldContext_UserRightsAggregateResult_maxPrivateOrgaAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRightsAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateUserRights_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserEvent(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserEvent)
	fc.Result = res
	return ec.marshalOUserEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserEvent_createdAt(ctx, field)
			case "isRead":
				return ec.fieldContext_UserEvent_isRead(ctx, field)
			case "user":
				return ec.fieldContext_UserEvent_user(ctx, field)
			case "event":
				return ec.fieldContext_UserEvent_event(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryUserEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryUserEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserEvent(rctx, fc.Args["filter"].(*model.UserEventFilter), fc.Args["order"].(*model.UserEventOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserEvent)
	fc.Result = res
	return ec.marshalOUserEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryUserEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserEvent_createdAt(ctx, field)
			case "isRead":
				return ec.fieldContext_UserEvent_isRead(ctx, field)
			case "user":
				return ec.fieldContext_UserEvent_user(ctx, field)
			case "event":
				return ec.fieldContext_UserEvent_event(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryUserEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateUserEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateUserEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateUserEvent(rctx, fc.Args["filter"].(*model.UserEventFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserEventAggregateResult)
	fc.Result = res
	return ec.marshalOUserEventAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateUserEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_UserEventAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_UserEventAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_UserEventAggregateResult_createdAtMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEventAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateUserEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getNotif(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getNotif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetNotif(rctx, fc.Args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Notif)
	fc.Result = res
	return ec.marshalONotif2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotif(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getNotif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension_":
				return ec.fieldContext_Notif_tension_(ctx, field)
			case "contract":
				return ec.fieldContext_Notif_contract(ctx, field)
			case "link":
				return ec.fieldContext_Notif_link(ctx, field)
			case "id":
				return ec.fieldContext_Notif_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Notif_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notif_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notif_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Notif_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notif", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getNotif_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryNotif(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryNotif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryNotif(rctx, fc.Args["filter"].(*model.NotifFilter), fc.Args["order"].(*model.NotifOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Notif)
	fc.Result = res
	return ec.marshalONotif2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotif(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryNotif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension_":
				return ec.fieldContext_Notif_tension_(ctx, field)
			case "contract":
				return ec.fieldContext_Notif_contract(ctx, field)
			case "link":
				return ec.fieldContext_Notif_link(ctx, field)
			case "id":
				return ec.fieldContext_Notif_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Notif_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notif_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notif_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Notif_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notif", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryNotif_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateNotif(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateNotif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateNotif(rctx, fc.Args["filter"].(*model.NotifFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NotifAggregateResult)
	fc.Result = res
	return ec.marshalONotifAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateNotif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NotifAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NotifAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NotifAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NotifAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NotifAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_NotifAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_NotifAggregateResult_messageMax(ctx, field)
			case "linkMin":
				return ec.fieldContext_NotifAggregateResult_linkMin(ctx, field)
			case "linkMax":
				return ec.fieldContext_NotifAggregateResult_linkMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NotifAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateNotif_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_queryEventCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_queryEventCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryEventCount(rctx, fc.Args["filter"].(*model.EventCountFilter), fc.Args["order"].(*model.EventCountOrder), fc.Args["first"].(*int), fc.Args["offset"].(*int))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventCount)
	fc.Result = res
	return ec.marshalOEventCount2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_queryEventCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "unread_events":
				return ec.fieldContext_EventCount_unread_events(ctx, field)
			case "pending_contracts":
				return ec.fieldContext_EventCount_pending_contracts(ctx, field)
			case "assigned_tensions":
				return ec.fieldContext_EventCount_assigned_tensions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventCount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_queryEventCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aggregateEventCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aggregateEventCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AggregateEventCount(rctx, fc.Args["filter"].(*model.EventCountFilter))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventCountAggregateResult)
	fc.Result = res
	return ec.marshalOEventCountAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aggregateEventCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_EventCountAggregateResult_count(ctx, field)
			case "unread_eventsMin":
				return ec.fieldContext_EventCountAggregateResult_unread_eventsMin(ctx, field)
			case "unread_eventsMax":
				return ec.fieldContext_EventCountAggregateResult_unread_eventsMax(ctx, field)
			case "unread_eventsSum":
				return ec.fieldContext_EventCountAggregateResult_unread_eventsSum(ctx, field)
			case "unread_eventsAvg":
				return ec.fieldContext_EventCountAggregateResult_unread_eventsAvg(ctx, field)
			case "pending_contractsMin":
				return ec.fieldContext_EventCountAggregateResult_pending_contractsMin(ctx, field)
			case "pending_contractsMax":
				return ec.fieldContext_EventCountAggregateResult_pending_contractsMax(ctx, field)
			case "pending_contractsSum":
				return ec.fieldContext_EventCountAggregateResult_pending_contractsSum(ctx, field)
			case "pending_contractsAvg":
				return ec.fieldContext_EventCountAggregateResult_pending_contractsAvg(ctx, field)
			case "assigned_tensionsMin":
				return ec.fieldContext_EventCountAggregateResult_assigned_tensionsMin(ctx, field)
			case "assigned_tensionsMax":
				return ec.fieldContext_EventCountAggregateResult_assigned_tensionsMax(ctx, field)
			case "assigned_tensionsSum":
				return ec.fieldContext_EventCountAggregateResult_assigned_tensionsSum(ctx, field)
			case "assigned_tensionsAvg":
				return ec.fieldContext_EventCountAggregateResult_assigned_tensionsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventCountAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aggregateEventCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_id(ctx context.Context, field graphql.CollectedField, obj *model.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_reactionid(ctx context.Context, field graphql.CollectedField, obj *model.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_reactionid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reactionid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_reactionid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_user(ctx context.Context, field graphql.CollectedField, obj *model.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Reaction_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_comment(ctx context.Context, field graphql.CollectedField, obj *model.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_comment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_comment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_Comment_message(ctx, field)
			case "reactions":
				return ec.fieldContext_Comment_reactions(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Comment_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Comment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Comment_updatedAt(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_Comment_reactionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Reaction_comment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_type_(ctx context.Context, field graphql.CollectedField, obj *model.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_type_(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_type_(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactionAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.ReactionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactionAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactionAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactionAggregateResult_reactionidMin(ctx context.Context, field graphql.CollectedField, obj *model.ReactionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactionAggregateResult_reactionidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReactionidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactionAggregateResult_reactionidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactionAggregateResult_reactionidMax(ctx context.Context, field graphql.CollectedField, obj *model.ReactionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactionAggregateResult_reactionidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReactionidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactionAggregateResult_reactionidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactionAggregateResult_type_Min(ctx context.Context, field graphql.CollectedField, obj *model.ReactionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactionAggregateResult_type_Min(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactionAggregateResult_type_Min(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactionAggregateResult_type_Max(ctx context.Context, field graphql.CollectedField, obj *model.ReactionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactionAggregateResult_type_Max(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactionAggregateResult_type_Max(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactionAggregateResult_type_Sum(ctx context.Context, field graphql.CollectedField, obj *model.ReactionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactionAggregateResult_type_Sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactionAggregateResult_type_Sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReactionAggregateResult_type_Avg(ctx context.Context, field graphql.CollectedField, obj *model.ReactionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReactionAggregateResult_type_Avg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReactionAggregateResult_type_Avg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReactionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_id(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_rootnameid(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_rootnameid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rootnameid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_rootnameid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_name(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_about(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_about(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_about(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_role_type(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_role_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.RoleType)
	fc.Result = res
	return ec.marshalNRoleType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_role_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RoleType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_color(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_color(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_mandate(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_mandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_mandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Mandate_id(ctx, field)
			case "purpose":
				return ec.fieldContext_Mandate_purpose(ctx, field)
			case "responsabilities":
				return ec.fieldContext_Mandate_responsabilities(ctx, field)
			case "domains":
				return ec.fieldContext_Mandate_domains(ctx, field)
			case "policies":
				return ec.fieldContext_Mandate_policies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Mandate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_RoleExt_mandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_roles(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_RoleExt_roles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_nodes(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_RoleExt_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_rolesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_rolesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RolesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_rolesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_RoleExt_rolesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _RoleExt_nodesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.RoleExt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExt_nodesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExt_nodesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_RoleExt_nodesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _RoleExtAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.RoleExtAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExtAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExtAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExtAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExtAggregateResult_rootnameidMin(ctx context.Context, field graphql.CollectedField, obj *model.RoleExtAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExtAggregateResult_rootnameidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootnameidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExtAggregateResult_rootnameidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExtAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExtAggregateResult_rootnameidMax(ctx context.Context, field graphql.CollectedField, obj *model.RoleExtAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExtAggregateResult_rootnameidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootnameidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExtAggregateResult_rootnameidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExtAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExtAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField, obj *model.RoleExtAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExtAggregateResult_nameMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExtAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExtAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExtAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField, obj *model.RoleExtAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExtAggregateResult_nameMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExtAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExtAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExtAggregateResult_aboutMin(ctx context.Context, field graphql.CollectedField, obj *model.RoleExtAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExtAggregateResult_aboutMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AboutMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExtAggregateResult_aboutMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExtAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExtAggregateResult_aboutMax(ctx context.Context, field graphql.CollectedField, obj *model.RoleExtAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExtAggregateResult_aboutMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AboutMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExtAggregateResult_aboutMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExtAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExtAggregateResult_colorMin(ctx context.Context, field graphql.CollectedField, obj *model.RoleExtAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExtAggregateResult_colorMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExtAggregateResult_colorMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExtAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleExtAggregateResult_colorMax(ctx context.Context, field graphql.CollectedField, obj *model.RoleExtAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleExtAggregateResult_colorMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleExtAggregateResult_colorMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleExtAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_emitter(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_emitter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emitter, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Node)
	fc.Result = res
	return ec.marshalNNode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_emitter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_emitter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_emitterid(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_emitterid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emitterid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_emitterid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_receiver(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_receiver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Receiver, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Node)
	fc.Result = res
	return ec.marshalNNode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_receiver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_receiver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_receiverid(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_receiverid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Receiverid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_receiverid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_title(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_type_(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_type_(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TensionType)
	fc.Result = res
	return ec.marshalNTensionType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_type_(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TensionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_status(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TensionStatus)
	fc.Result = res
	return ec.marshalNTensionStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TensionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_action(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAction)
	fc.Result = res
	return ec.marshalOTensionAction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_action(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TensionAction does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_assignees(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_assignees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignees, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_assignees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_assignees_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_labels(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_labels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_labels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Label_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Label_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_Label_name(ctx, field)
			case "description":
				return ec.fieldContext_Label_description(ctx, field)
			case "color":
				return ec.fieldContext_Label_color(ctx, field)
			case "tensions":
				return ec.fieldContext_Label_tensions(ctx, field)
			case "nodes":
				return ec.fieldContext_Label_nodes(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_Label_tensionsAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Label_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Label", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_labels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_comments(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_Comment_message(ctx, field)
			case "reactions":
				return ec.fieldContext_Comment_reactions(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Comment_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Comment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Comment_updatedAt(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_Comment_reactionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_comments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_blobs(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_blobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blobs, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_blobs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Blob_tension(ctx, field)
			case "blob_type":
				return ec.fieldContext_Blob_blob_type(ctx, field)
			case "pushedFlag":
				return ec.fieldContext_Blob_pushedFlag(ctx, field)
			case "archivedFlag":
				return ec.fieldContext_Blob_archivedFlag(ctx, field)
			case "node":
				return ec.fieldContext_Blob_node(ctx, field)
			case "md":
				return ec.fieldContext_Blob_md(ctx, field)
			case "id":
				return ec.fieldContext_Blob_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Blob_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Blob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Blob_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Blob_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blob", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_blobs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_history(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_history(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.History, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_history(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Event_tension(ctx, field)
			case "event_type":
				return ec.fieldContext_Event_event_type(ctx, field)
			case "mentioned":
				return ec.fieldContext_Event_mentioned(ctx, field)
			case "old":
				return ec.fieldContext_Event_old(ctx, field)
			case "new":
				return ec.fieldContext_Event_new(ctx, field)
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Event_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Event_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Event_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Event_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_history_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_mentions(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_mentions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mentions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_mentions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Event_tension(ctx, field)
			case "event_type":
				return ec.fieldContext_Event_event_type(ctx, field)
			case "mentioned":
				return ec.fieldContext_Event_mentioned(ctx, field)
			case "old":
				return ec.fieldContext_Event_old(ctx, field)
			case "new":
				return ec.fieldContext_Event_new(ctx, field)
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Event_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Event_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Event_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Event_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_mentions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_contracts(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contracts, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_contracts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_contracts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_subscribers(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_subscribers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscribers, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_subscribers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_subscribers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_projects(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_projects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Projects, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectTension)
	fc.Result = res
	return ec.marshalOProjectTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_projects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTension_id(ctx, field)
			case "tension":
				return ec.fieldContext_ProjectTension_tension(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectTension_pos(ctx, field)
			case "pc":
				return ec.fieldContext_ProjectTension_pc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_projects_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_n_open_contracts(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_n_open_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.NOpenContracts, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "count_open_contracts_from_tension")
			if err != nil {
				return nil, err
			}
			k, err := ec.unmarshalOString2ᚖstring(ctx, "id")
			if err != nil {
				return nil, err
			}
			if ec.directives.Meta == nil {
				return nil, errors.New("directive meta is not implemented")
			}
			return ec.directives.Meta(ctx, obj, directive0, f, k)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_n_open_contracts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_n_comments(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_n_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NComments, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_n_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_id(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_message(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tension_assigneesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_assigneesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserAggregateResult)
	fc.Result = res
	return ec.marshalOUserAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_assigneesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_UserAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_UserAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_UserAggregateResult_createdAtMax(ctx, field)
			case "lastAckMin":
				return ec.fieldContext_UserAggregateResult_lastAckMin(ctx, field)
			case "lastAckMax":
				return ec.fieldContext_UserAggregateResult_lastAckMax(ctx, field)
			case "usernameMin":
				return ec.fieldContext_UserAggregateResult_usernameMin(ctx, field)
			case "usernameMax":
				return ec.fieldContext_UserAggregateResult_usernameMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_UserAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_UserAggregateResult_nameMax(ctx, field)
			case "emailMin":
				return ec.fieldContext_UserAggregateResult_emailMin(ctx, field)
			case "emailMax":
				return ec.fieldContext_UserAggregateResult_emailMax(ctx, field)
			case "passwordMin":
				return ec.fieldContext_UserAggregateResult_passwordMin(ctx, field)
			case "passwordMax":
				return ec.fieldContext_UserAggregateResult_passwordMax(ctx, field)
			case "bioMin":
				return ec.fieldContext_UserAggregateResult_bioMin(ctx, field)
			case "bioMax":
				return ec.fieldContext_UserAggregateResult_bioMax(ctx, field)
			case "locationMin":
				return ec.fieldContext_UserAggregateResult_locationMin(ctx, field)
			case "locationMax":
				return ec.fieldContext_UserAggregateResult_locationMax(ctx, field)
			case "utcMin":
				return ec.fieldContext_UserAggregateResult_utcMin(ctx, field)
			case "utcMax":
				return ec.fieldContext_UserAggregateResult_utcMax(ctx, field)
			case "markAllAsReadMin":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMin(ctx, field)
			case "markAllAsReadMax":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_assigneesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_labelsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_labelsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LabelsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LabelAggregateResult)
	fc.Result = res
	return ec.marshalOLabelAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_labelsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_LabelAggregateResult_count(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_LabelAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_LabelAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_LabelAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_LabelAggregateResult_nameMax(ctx, field)
			case "descriptionMin":
				return ec.fieldContext_LabelAggregateResult_descriptionMin(ctx, field)
			case "descriptionMax":
				return ec.fieldContext_LabelAggregateResult_descriptionMax(ctx, field)
			case "colorMin":
				return ec.fieldContext_LabelAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_LabelAggregateResult_colorMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LabelAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_labelsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_commentsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_commentsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommentAggregateResult)
	fc.Result = res
	return ec.marshalOCommentAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_commentsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_CommentAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_CommentAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_CommentAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_CommentAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_CommentAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_CommentAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_CommentAggregateResult_messageMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommentAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_commentsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_blobsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_blobsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlobsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlobAggregateResult)
	fc.Result = res
	return ec.marshalOBlobAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_blobsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_BlobAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_BlobAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_BlobAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_BlobAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_BlobAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_BlobAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_BlobAggregateResult_messageMax(ctx, field)
			case "pushedFlagMin":
				return ec.fieldContext_BlobAggregateResult_pushedFlagMin(ctx, field)
			case "pushedFlagMax":
				return ec.fieldContext_BlobAggregateResult_pushedFlagMax(ctx, field)
			case "archivedFlagMin":
				return ec.fieldContext_BlobAggregateResult_archivedFlagMin(ctx, field)
			case "archivedFlagMax":
				return ec.fieldContext_BlobAggregateResult_archivedFlagMax(ctx, field)
			case "mdMin":
				return ec.fieldContext_BlobAggregateResult_mdMin(ctx, field)
			case "mdMax":
				return ec.fieldContext_BlobAggregateResult_mdMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_blobsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_historyAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_historyAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HistoryAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventAggregateResult)
	fc.Result = res
	return ec.marshalOEventAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_historyAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_EventAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_EventAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_EventAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_EventAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_EventAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_EventAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_EventAggregateResult_messageMax(ctx, field)
			case "oldMin":
				return ec.fieldContext_EventAggregateResult_oldMin(ctx, field)
			case "oldMax":
				return ec.fieldContext_EventAggregateResult_oldMax(ctx, field)
			case "newMin":
				return ec.fieldContext_EventAggregateResult_newMin(ctx, field)
			case "newMax":
				return ec.fieldContext_EventAggregateResult_newMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_historyAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_mentionsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_mentionsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MentionsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventAggregateResult)
	fc.Result = res
	return ec.marshalOEventAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_mentionsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_EventAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_EventAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_EventAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_EventAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_EventAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_EventAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_EventAggregateResult_messageMax(ctx, field)
			case "oldMin":
				return ec.fieldContext_EventAggregateResult_oldMin(ctx, field)
			case "oldMax":
				return ec.fieldContext_EventAggregateResult_oldMax(ctx, field)
			case "newMin":
				return ec.fieldContext_EventAggregateResult_newMin(ctx, field)
			case "newMax":
				return ec.fieldContext_EventAggregateResult_newMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_mentionsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_contractsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_contractsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContractAggregateResult)
	fc.Result = res
	return ec.marshalOContractAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_contractsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ContractAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_ContractAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_ContractAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_ContractAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_ContractAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_ContractAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_ContractAggregateResult_messageMax(ctx, field)
			case "contractidMin":
				return ec.fieldContext_ContractAggregateResult_contractidMin(ctx, field)
			case "contractidMax":
				return ec.fieldContext_ContractAggregateResult_contractidMax(ctx, field)
			case "closedAtMin":
				return ec.fieldContext_ContractAggregateResult_closedAtMin(ctx, field)
			case "closedAtMax":
				return ec.fieldContext_ContractAggregateResult_closedAtMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContractAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_contractsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_subscribersAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_subscribersAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscribersAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserAggregateResult)
	fc.Result = res
	return ec.marshalOUserAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_subscribersAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_UserAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_UserAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_UserAggregateResult_createdAtMax(ctx, field)
			case "lastAckMin":
				return ec.fieldContext_UserAggregateResult_lastAckMin(ctx, field)
			case "lastAckMax":
				return ec.fieldContext_UserAggregateResult_lastAckMax(ctx, field)
			case "usernameMin":
				return ec.fieldContext_UserAggregateResult_usernameMin(ctx, field)
			case "usernameMax":
				return ec.fieldContext_UserAggregateResult_usernameMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_UserAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_UserAggregateResult_nameMax(ctx, field)
			case "emailMin":
				return ec.fieldContext_UserAggregateResult_emailMin(ctx, field)
			case "emailMax":
				return ec.fieldContext_UserAggregateResult_emailMax(ctx, field)
			case "passwordMin":
				return ec.fieldContext_UserAggregateResult_passwordMin(ctx, field)
			case "passwordMax":
				return ec.fieldContext_UserAggregateResult_passwordMax(ctx, field)
			case "bioMin":
				return ec.fieldContext_UserAggregateResult_bioMin(ctx, field)
			case "bioMax":
				return ec.fieldContext_UserAggregateResult_bioMax(ctx, field)
			case "locationMin":
				return ec.fieldContext_UserAggregateResult_locationMin(ctx, field)
			case "locationMax":
				return ec.fieldContext_UserAggregateResult_locationMax(ctx, field)
			case "utcMin":
				return ec.fieldContext_UserAggregateResult_utcMin(ctx, field)
			case "utcMax":
				return ec.fieldContext_UserAggregateResult_utcMax(ctx, field)
			case "markAllAsReadMin":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMin(ctx, field)
			case "markAllAsReadMax":
				return ec.fieldContext_UserAggregateResult_markAllAsReadMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_subscribersAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Tension_projectsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.Tension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tension_projectsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProjectTensionAggregateResult)
	fc.Result = res
	return ec.marshalOProjectTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tension_projectsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ProjectTensionAggregateResult_count(ctx, field)
			case "posMin":
				return ec.fieldContext_ProjectTensionAggregateResult_posMin(ctx, field)
			case "posMax":
				return ec.fieldContext_ProjectTensionAggregateResult_posMax(ctx, field)
			case "posSum":
				return ec.fieldContext_ProjectTensionAggregateResult_posSum(ctx, field)
			case "posAvg":
				return ec.fieldContext_ProjectTensionAggregateResult_posAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tension_projectsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_messageMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_messageMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_emitteridMin(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_emitteridMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmitteridMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_emitteridMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_emitteridMax(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_emitteridMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmitteridMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_emitteridMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_receiveridMin(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_receiveridMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiveridMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_receiveridMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_receiveridMax(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_receiveridMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiveridMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_receiveridMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_titleMin(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_titleMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TitleMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_titleMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_titleMax(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_titleMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TitleMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_titleMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_n_open_contractsMin(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_n_open_contractsMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NOpenContractsMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_n_open_contractsMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_n_open_contractsMax(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_n_open_contractsMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NOpenContractsMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_n_open_contractsMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_n_open_contractsSum(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_n_open_contractsSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NOpenContractsSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_n_open_contractsSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_n_open_contractsAvg(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NOpenContractsAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_n_commentsMin(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_n_commentsMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NCommentsMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_n_commentsMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_n_commentsMax(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_n_commentsMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NCommentsMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_n_commentsMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_n_commentsSum(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_n_commentsSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NCommentsSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_n_commentsSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TensionAggregateResult_n_commentsAvg(ctx context.Context, field graphql.CollectedField, obj *model.TensionAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TensionAggregateResult_n_commentsAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NCommentsAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TensionAggregateResult_n_commentsAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TensionAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBlobPayload_blob(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBlobPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBlobPayload_blob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blob, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Blob)
	fc.Result = res
	return ec.marshalOBlob2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBlobPayload_blob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBlobPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Blob_tension(ctx, field)
			case "blob_type":
				return ec.fieldContext_Blob_blob_type(ctx, field)
			case "pushedFlag":
				return ec.fieldContext_Blob_pushedFlag(ctx, field)
			case "archivedFlag":
				return ec.fieldContext_Blob_archivedFlag(ctx, field)
			case "node":
				return ec.fieldContext_Blob_node(ctx, field)
			case "md":
				return ec.fieldContext_Blob_md(ctx, field)
			case "id":
				return ec.fieldContext_Blob_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Blob_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Blob_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Blob_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Blob_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Blob", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateBlobPayload_blob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBlobPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBlobPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBlobPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBlobPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBlobPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCommentPayload_comment(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCommentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCommentPayload_comment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCommentPayload_comment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCommentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_Comment_message(ctx, field)
			case "reactions":
				return ec.fieldContext_Comment_reactions(ctx, field)
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Comment_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Comment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Comment_updatedAt(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_Comment_reactionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateCommentPayload_comment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCommentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCommentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCommentPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCommentPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCommentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateContractPayload_contract(ctx context.Context, field graphql.CollectedField, obj *model.UpdateContractPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateContractPayload_contract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contract, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateContractPayload_contract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateContractPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateContractPayload_contract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateContractPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateContractPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateContractPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateContractPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateContractPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateEventCountPayload_eventCount(ctx context.Context, field graphql.CollectedField, obj *model.UpdateEventCountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateEventCountPayload_eventCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventCount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventCount)
	fc.Result = res
	return ec.marshalOEventCount2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateEventCountPayload_eventCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateEventCountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "unread_events":
				return ec.fieldContext_EventCount_unread_events(ctx, field)
			case "pending_contracts":
				return ec.fieldContext_EventCount_pending_contracts(ctx, field)
			case "assigned_tensions":
				return ec.fieldContext_EventCount_assigned_tensions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventCount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateEventCountPayload_eventCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateEventCountPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateEventCountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateEventCountPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateEventCountPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateEventCountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateEventFragmentPayload_eventFragment(ctx context.Context, field graphql.CollectedField, obj *model.UpdateEventFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateEventFragmentPayload_eventFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventFragment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventFragment)
	fc.Result = res
	return ec.marshalOEventFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateEventFragmentPayload_eventFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateEventFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "event_type":
				return ec.fieldContext_EventFragment_event_type(ctx, field)
			case "old":
				return ec.fieldContext_EventFragment_old(ctx, field)
			case "new":
				return ec.fieldContext_EventFragment_new(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateEventFragmentPayload_eventFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateEventFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateEventFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateEventFragmentPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateEventFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateEventFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateEventPayload_event(ctx context.Context, field graphql.CollectedField, obj *model.UpdateEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateEventPayload_event(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateEventPayload_event(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension":
				return ec.fieldContext_Event_tension(ctx, field)
			case "event_type":
				return ec.fieldContext_Event_event_type(ctx, field)
			case "mentioned":
				return ec.fieldContext_Event_mentioned(ctx, field)
			case "old":
				return ec.fieldContext_Event_old(ctx, field)
			case "new":
				return ec.fieldContext_Event_new(ctx, field)
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Event_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Event_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Event_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Event_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateEventPayload_event_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateEventPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateEventPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateEventPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateLabelPayload_label(ctx context.Context, field graphql.CollectedField, obj *model.UpdateLabelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateLabelPayload_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateLabelPayload_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateLabelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Label_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Label_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_Label_name(ctx, field)
			case "description":
				return ec.fieldContext_Label_description(ctx, field)
			case "color":
				return ec.fieldContext_Label_color(ctx, field)
			case "tensions":
				return ec.fieldContext_Label_tensions(ctx, field)
			case "nodes":
				return ec.fieldContext_Label_nodes(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_Label_tensionsAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Label_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Label", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateLabelPayload_label_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateLabelPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateLabelPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateLabelPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateLabelPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateLabelPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMandatePayload_mandate(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMandatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMandatePayload_mandate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mandate)
	fc.Result = res
	return ec.marshalOMandate2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMandatePayload_mandate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMandatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Mandate_id(ctx, field)
			case "purpose":
				return ec.fieldContext_Mandate_purpose(ctx, field)
			case "responsabilities":
				return ec.fieldContext_Mandate_responsabilities(ctx, field)
			case "domains":
				return ec.fieldContext_Mandate_domains(ctx, field)
			case "policies":
				return ec.fieldContext_Mandate_policies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Mandate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateMandatePayload_mandate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMandatePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMandatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMandatePayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMandatePayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMandatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateNodeFragmentPayload_nodeFragment(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodeFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateNodeFragmentPayload_nodeFragment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeFragment, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NodeFragment)
	fc.Result = res
	return ec.marshalONodeFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateNodeFragmentPayload_nodeFragment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateNodeFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NodeFragment_id(ctx, field)
			case "nameid":
				return ec.fieldContext_NodeFragment_nameid(ctx, field)
			case "name":
				return ec.fieldContext_NodeFragment_name(ctx, field)
			case "about":
				return ec.fieldContext_NodeFragment_about(ctx, field)
			case "mandate":
				return ec.fieldContext_NodeFragment_mandate(ctx, field)
			case "skills":
				return ec.fieldContext_NodeFragment_skills(ctx, field)
			case "visibility":
				return ec.fieldContext_NodeFragment_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_NodeFragment_mode(ctx, field)
			case "type_":
				return ec.fieldContext_NodeFragment_type_(ctx, field)
			case "first_link":
				return ec.fieldContext_NodeFragment_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_NodeFragment_second_link(ctx, field)
			case "role_ext":
				return ec.fieldContext_NodeFragment_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_NodeFragment_role_type(ctx, field)
			case "color":
				return ec.fieldContext_NodeFragment_color(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeFragment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateNodeFragmentPayload_nodeFragment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateNodeFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodeFragmentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateNodeFragmentPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateNodeFragmentPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateNodeFragmentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateNodePayload_node(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateNodePayload_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateNodePayload_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateNodePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateNodePayload_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateNodePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNodePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateNodePayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateNodePayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateNodePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateNotifPayload_notif(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNotifPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateNotifPayload_notif(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notif, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Notif)
	fc.Result = res
	return ec.marshalONotif2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotif(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateNotifPayload_notif(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateNotifPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tension_":
				return ec.fieldContext_Notif_tension_(ctx, field)
			case "contract":
				return ec.fieldContext_Notif_contract(ctx, field)
			case "link":
				return ec.fieldContext_Notif_link(ctx, field)
			case "id":
				return ec.fieldContext_Notif_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Notif_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notif_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notif_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Notif_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notif", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateNotifPayload_notif_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateNotifPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateNotifPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateNotifPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateNotifPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateNotifPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateOrgaAggPayload_orgaAgg(ctx context.Context, field graphql.CollectedField, obj *model.UpdateOrgaAggPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateOrgaAggPayload_orgaAgg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgaAgg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OrgaAgg)
	fc.Result = res
	return ec.marshalOOrgaAgg2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAgg(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateOrgaAggPayload_orgaAgg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateOrgaAggPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "n_members":
				return ec.fieldContext_OrgaAgg_n_members(ctx, field)
			case "n_guests":
				return ec.fieldContext_OrgaAgg_n_guests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgaAgg", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateOrgaAggPayload_orgaAgg_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateOrgaAggPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateOrgaAggPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateOrgaAggPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateOrgaAggPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateOrgaAggPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePendingUserPayload_pendingUser(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePendingUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePendingUserPayload_pendingUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PendingUser, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PendingUser)
	fc.Result = res
	return ec.marshalOPendingUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePendingUserPayload_pendingUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePendingUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PendingUser_id(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PendingUser_updatedAt(ctx, field)
			case "username":
				return ec.fieldContext_PendingUser_username(ctx, field)
			case "password":
				return ec.fieldContext_PendingUser_password(ctx, field)
			case "email":
				return ec.fieldContext_PendingUser_email(ctx, field)
			case "email_token":
				return ec.fieldContext_PendingUser_email_token(ctx, field)
			case "token":
				return ec.fieldContext_PendingUser_token(ctx, field)
			case "contracts":
				return ec.fieldContext_PendingUser_contracts(ctx, field)
			case "subscribe":
				return ec.fieldContext_PendingUser_subscribe(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_PendingUser_contractsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PendingUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdatePendingUserPayload_pendingUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePendingUserPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePendingUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePendingUserPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePendingUserPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePendingUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePostPayload_post(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePostPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Post)
	fc.Result = res
	return ec.marshalOPost2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePostPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Post_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Post_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Post_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdatePostPayload_post_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePostPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePostPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePostPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProjectColumnPayload_projectColumn(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProjectColumnPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProjectColumnPayload_projectColumn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectColumn, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectColumn)
	fc.Result = res
	return ec.marshalOProjectColumn2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProjectColumnPayload_projectColumn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProjectColumnPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectColumn_id(ctx, field)
			case "name":
				return ec.fieldContext_ProjectColumn_name(ctx, field)
			case "about":
				return ec.fieldContext_ProjectColumn_about(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectColumn_pos(ctx, field)
			case "tensions":
				return ec.fieldContext_ProjectColumn_tensions(ctx, field)
			case "project":
				return ec.fieldContext_ProjectColumn_project(ctx, field)
			case "tensionsAggregate":
				return ec.fieldContext_ProjectColumn_tensionsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectColumn", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateProjectColumnPayload_projectColumn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProjectColumnPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProjectColumnPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProjectColumnPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProjectColumnPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProjectColumnPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProjectPayload_project(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProjectPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProjectPayload_project(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Project)
	fc.Result = res
	return ec.marshalOProject2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProjectPayload_project(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProjectPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Project_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Project_rootnameid(ctx, field)
			case "parentnameid":
				return ec.fieldContext_Project_parentnameid(ctx, field)
			case "nameid":
				return ec.fieldContext_Project_nameid(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "columns":
				return ec.fieldContext_Project_columns(ctx, field)
			case "leaders":
				return ec.fieldContext_Project_leaders(ctx, field)
			case "nodes":
				return ec.fieldContext_Project_nodes(ctx, field)
			case "columnsAggregate":
				return ec.fieldContext_Project_columnsAggregate(ctx, field)
			case "leadersAggregate":
				return ec.fieldContext_Project_leadersAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_Project_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateProjectPayload_project_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProjectPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProjectPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProjectPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProjectPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProjectPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProjectTensionPayload_projectTension(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProjectTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProjectTensionPayload_projectTension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTension, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProjectTension)
	fc.Result = res
	return ec.marshalOProjectTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProjectTensionPayload_projectTension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProjectTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectTension_id(ctx, field)
			case "tension":
				return ec.fieldContext_ProjectTension_tension(ctx, field)
			case "pos":
				return ec.fieldContext_ProjectTension_pos(ctx, field)
			case "pc":
				return ec.fieldContext_ProjectTension_pc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectTension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateProjectTensionPayload_projectTension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProjectTensionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProjectTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProjectTensionPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProjectTensionPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProjectTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReactionPayload_reaction(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReactionPayload_reaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reaction, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Reaction)
	fc.Result = res
	return ec.marshalOReaction2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReactionPayload_reaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reaction_id(ctx, field)
			case "reactionid":
				return ec.fieldContext_Reaction_reactionid(ctx, field)
			case "user":
				return ec.fieldContext_Reaction_user(ctx, field)
			case "comment":
				return ec.fieldContext_Reaction_comment(ctx, field)
			case "type_":
				return ec.fieldContext_Reaction_type_(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateReactionPayload_reaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReactionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReactionPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReactionPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateRoleExtPayload_roleExt(ctx context.Context, field graphql.CollectedField, obj *model.UpdateRoleExtPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateRoleExtPayload_roleExt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleExt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RoleExt)
	fc.Result = res
	return ec.marshalORoleExt2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateRoleExtPayload_roleExt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateRoleExtPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleExt_id(ctx, field)
			case "rootnameid":
				return ec.fieldContext_RoleExt_rootnameid(ctx, field)
			case "name":
				return ec.fieldContext_RoleExt_name(ctx, field)
			case "about":
				return ec.fieldContext_RoleExt_about(ctx, field)
			case "role_type":
				return ec.fieldContext_RoleExt_role_type(ctx, field)
			case "color":
				return ec.fieldContext_RoleExt_color(ctx, field)
			case "mandate":
				return ec.fieldContext_RoleExt_mandate(ctx, field)
			case "roles":
				return ec.fieldContext_RoleExt_roles(ctx, field)
			case "nodes":
				return ec.fieldContext_RoleExt_nodes(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_RoleExt_rolesAggregate(ctx, field)
			case "nodesAggregate":
				return ec.fieldContext_RoleExt_nodesAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleExt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateRoleExtPayload_roleExt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateRoleExtPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateRoleExtPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateRoleExtPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateRoleExtPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateRoleExtPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTensionPayload_tension(ctx context.Context, field graphql.CollectedField, obj *model.UpdateTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTensionPayload_tension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tension, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTensionPayload_tension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateTensionPayload_tension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTensionPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateTensionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTensionPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTensionPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTensionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserEventPayload_userEvent(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserEventPayload_userEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEvent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserEvent)
	fc.Result = res
	return ec.marshalOUserEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserEventPayload_userEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserEvent_createdAt(ctx, field)
			case "isRead":
				return ec.fieldContext_UserEvent_isRead(ctx, field)
			case "user":
				return ec.fieldContext_UserEvent_user(ctx, field)
			case "event":
				return ec.fieldContext_UserEvent_event(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateUserEventPayload_userEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserEventPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserEventPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserEventPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserPayload_user(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserPayload_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserPayload_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateUserPayload_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserRightsPayload_userRights(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserRightsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserRightsPayload_userRights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRights, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserRights)
	fc.Result = res
	return ec.marshalOUserRights2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserRightsPayload_userRights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserRightsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type_":
				return ec.fieldContext_UserRights_type_(ctx, field)
			case "canLogin":
				return ec.fieldContext_UserRights_canLogin(ctx, field)
			case "canCreateRoot":
				return ec.fieldContext_UserRights_canCreateRoot(ctx, field)
			case "maxPublicOrga":
				return ec.fieldContext_UserRights_maxPublicOrga(ctx, field)
			case "maxPrivateOrga":
				return ec.fieldContext_UserRights_maxPrivateOrga(ctx, field)
			case "hasEmailNotifications":
				return ec.fieldContext_UserRights_hasEmailNotifications(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRights", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateUserRightsPayload_userRights_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserRightsPayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserRightsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserRightsPayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserRightsPayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserRightsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateVotePayload_vote(ctx context.Context, field graphql.CollectedField, obj *model.UpdateVotePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateVotePayload_vote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vote, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Vote)
	fc.Result = res
	return ec.marshalOVote2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateVotePayload_vote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateVotePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "voteid":
				return ec.fieldContext_Vote_voteid(ctx, field)
			case "contract":
				return ec.fieldContext_Vote_contract(ctx, field)
			case "node":
				return ec.fieldContext_Vote_node(ctx, field)
			case "data":
				return ec.fieldContext_Vote_data(ctx, field)
			case "id":
				return ec.fieldContext_Vote_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Vote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vote_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vote_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Vote_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UpdateVotePayload_vote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UpdateVotePayload_numUids(ctx context.Context, field graphql.CollectedField, obj *model.UpdateVotePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateVotePayload_numUids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUids, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateVotePayload_numUids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateVotePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastAck(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastAck(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastAck, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastAck(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Email, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive private is not implemented")
			}
			return ec.directives.Private(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_password(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Password, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Hidden == nil {
				return nil, errors.New("directive hidden is not implemented")
			}
			return ec.directives.Hidden(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_bio(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_bio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bio, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_bio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_location(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_utc(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_utc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Utc, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_utc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_links(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_links(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Links, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_links(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_skills(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_skills(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skills, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_skills(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_notifyByEmail(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_notifyByEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyByEmail, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_notifyByEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lang(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lang(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lang, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Lang)
	fc.Result = res
	return ec.marshalNLang2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLang(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lang(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Lang does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_subscriptions(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_subscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Subscriptions, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive private is not implemented")
			}
			return ec.directives.Private(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_subscriptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_subscriptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_watching(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_watching(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Watching, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive private is not implemented")
			}
			return ec.directives.Private(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Node); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.Node`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_watching(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_watching_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_rights(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_rights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rights, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserRights)
	fc.Result = res
	return ec.marshalNUserRights2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_rights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type_":
				return ec.fieldContext_UserRights_type_(ctx, field)
			case "canLogin":
				return ec.fieldContext_UserRights_canLogin(ctx, field)
			case "canCreateRoot":
				return ec.fieldContext_UserRights_canCreateRoot(ctx, field)
			case "maxPublicOrga":
				return ec.fieldContext_UserRights_maxPublicOrga(ctx, field)
			case "maxPrivateOrga":
				return ec.fieldContext_UserRights_maxPrivateOrga(ctx, field)
			case "hasEmailNotifications":
				return ec.fieldContext_UserRights_hasEmailNotifications(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRights", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_rights_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_roles(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_roles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_backed_roles(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_backed_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackedRoles, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Node)
	fc.Result = res
	return ec.marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_backed_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_backed_roles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_tensions_created(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_tensions_created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.TensionsCreated, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive private is not implemented")
			}
			return ec.directives.Private(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_tensions_created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_tensions_created_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_tensions_assigned(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_tensions_assigned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.TensionsAssigned, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive private is not implemented")
			}
			return ec.directives.Private(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Tension); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.Tension`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tension)
	fc.Result = res
	return ec.marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_tensions_assigned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emitter":
				return ec.fieldContext_Tension_emitter(ctx, field)
			case "emitterid":
				return ec.fieldContext_Tension_emitterid(ctx, field)
			case "receiver":
				return ec.fieldContext_Tension_receiver(ctx, field)
			case "receiverid":
				return ec.fieldContext_Tension_receiverid(ctx, field)
			case "title":
				return ec.fieldContext_Tension_title(ctx, field)
			case "type_":
				return ec.fieldContext_Tension_type_(ctx, field)
			case "status":
				return ec.fieldContext_Tension_status(ctx, field)
			case "action":
				return ec.fieldContext_Tension_action(ctx, field)
			case "assignees":
				return ec.fieldContext_Tension_assignees(ctx, field)
			case "labels":
				return ec.fieldContext_Tension_labels(ctx, field)
			case "comments":
				return ec.fieldContext_Tension_comments(ctx, field)
			case "blobs":
				return ec.fieldContext_Tension_blobs(ctx, field)
			case "history":
				return ec.fieldContext_Tension_history(ctx, field)
			case "mentions":
				return ec.fieldContext_Tension_mentions(ctx, field)
			case "contracts":
				return ec.fieldContext_Tension_contracts(ctx, field)
			case "subscribers":
				return ec.fieldContext_Tension_subscribers(ctx, field)
			case "projects":
				return ec.fieldContext_Tension_projects(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Tension_n_open_contracts(ctx, field)
			case "n_comments":
				return ec.fieldContext_Tension_n_comments(ctx, field)
			case "id":
				return ec.fieldContext_Tension_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tension_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tension_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tension_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Tension_message(ctx, field)
			case "assigneesAggregate":
				return ec.fieldContext_Tension_assigneesAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Tension_labelsAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Tension_commentsAggregate(ctx, field)
			case "blobsAggregate":
				return ec.fieldContext_Tension_blobsAggregate(ctx, field)
			case "historyAggregate":
				return ec.fieldContext_Tension_historyAggregate(ctx, field)
			case "mentionsAggregate":
				return ec.fieldContext_Tension_mentionsAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Tension_contractsAggregate(ctx, field)
			case "subscribersAggregate":
				return ec.fieldContext_Tension_subscribersAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Tension_projectsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_tensions_assigned_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_contracts(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Contracts, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive private is not implemented")
			}
			return ec.directives.Private(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Contract); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.Contract`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_contracts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_contracts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_reactions(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_reactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reactions, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Reaction)
	fc.Result = res
	return ec.marshalOReaction2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_reactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reaction_id(ctx, field)
			case "reactionid":
				return ec.fieldContext_Reaction_reactionid(ctx, field)
			case "user":
				return ec.fieldContext_Reaction_user(ctx, field)
			case "comment":
				return ec.fieldContext_Reaction_comment(ctx, field)
			case "type_":
				return ec.fieldContext_Reaction_type_(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_reactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_events(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Events, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Private == nil {
				return nil, errors.New("directive private is not implemented")
			}
			return ec.directives.Private(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.UserEvent); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserEvent`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserEvent)
	fc.Result = res
	return ec.marshalOUserEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserEvent_createdAt(ctx, field)
			case "isRead":
				return ec.fieldContext_UserEvent_isRead(ctx, field)
			case "user":
				return ec.fieldContext_UserEvent_user(ctx, field)
			case "event":
				return ec.fieldContext_UserEvent_event(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_events_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_markAllAsRead(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_markAllAsRead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarkAllAsRead, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_markAllAsRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_event_count(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_event_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.EventCount, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			f, err := ec.unmarshalNString2string(ctx, "getEventCount")
			if err != nil {
				return nil, err
			}
			k, err := ec.unmarshalOString2ᚖstring(ctx, "username")
			if err != nil {
				return nil, err
			}
			if ec.directives.Meta == nil {
				return nil, errors.New("directive meta is not implemented")
			}
			return ec.directives.Meta(ctx, obj, directive0, f, k)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.EventCount); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.EventCount`, tmp)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventCount)
	fc.Result = res
	return ec.marshalOEventCount2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_event_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "unread_events":
				return ec.fieldContext_EventCount_unread_events(ctx, field)
			case "pending_contracts":
				return ec.fieldContext_EventCount_pending_contracts(ctx, field)
			case "assigned_tensions":
				return ec.fieldContext_EventCount_assigned_tensions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventCount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_event_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_subscriptionsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_subscriptionsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAggregateResult)
	fc.Result = res
	return ec.marshalOTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_subscriptionsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_TensionAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_TensionAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_TensionAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_TensionAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_TensionAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_TensionAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_TensionAggregateResult_messageMax(ctx, field)
			case "emitteridMin":
				return ec.fieldContext_TensionAggregateResult_emitteridMin(ctx, field)
			case "emitteridMax":
				return ec.fieldContext_TensionAggregateResult_emitteridMax(ctx, field)
			case "receiveridMin":
				return ec.fieldContext_TensionAggregateResult_receiveridMin(ctx, field)
			case "receiveridMax":
				return ec.fieldContext_TensionAggregateResult_receiveridMax(ctx, field)
			case "titleMin":
				return ec.fieldContext_TensionAggregateResult_titleMin(ctx, field)
			case "titleMax":
				return ec.fieldContext_TensionAggregateResult_titleMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx, field)
			case "n_commentsMin":
				return ec.fieldContext_TensionAggregateResult_n_commentsMin(ctx, field)
			case "n_commentsMax":
				return ec.fieldContext_TensionAggregateResult_n_commentsMax(ctx, field)
			case "n_commentsSum":
				return ec.fieldContext_TensionAggregateResult_n_commentsSum(ctx, field)
			case "n_commentsAvg":
				return ec.fieldContext_TensionAggregateResult_n_commentsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_subscriptionsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_watchingAggregate(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_watchingAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WatchingAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_watchingAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_watchingAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_rolesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_rolesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RolesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_rolesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_rolesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_backed_rolesAggregate(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_backed_rolesAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackedRolesAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NodeAggregateResult)
	fc.Result = res
	return ec.marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_backed_rolesAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_NodeAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_NodeAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_NodeAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_NodeAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_NodeAggregateResult_updatedAtMax(ctx, field)
			case "nameidMin":
				return ec.fieldContext_NodeAggregateResult_nameidMin(ctx, field)
			case "nameidMax":
				return ec.fieldContext_NodeAggregateResult_nameidMax(ctx, field)
			case "rootnameidMin":
				return ec.fieldContext_NodeAggregateResult_rootnameidMin(ctx, field)
			case "rootnameidMax":
				return ec.fieldContext_NodeAggregateResult_rootnameidMax(ctx, field)
			case "nameMin":
				return ec.fieldContext_NodeAggregateResult_nameMin(ctx, field)
			case "nameMax":
				return ec.fieldContext_NodeAggregateResult_nameMax(ctx, field)
			case "aboutMin":
				return ec.fieldContext_NodeAggregateResult_aboutMin(ctx, field)
			case "aboutMax":
				return ec.fieldContext_NodeAggregateResult_aboutMax(ctx, field)
			case "rightsMin":
				return ec.fieldContext_NodeAggregateResult_rightsMin(ctx, field)
			case "rightsMax":
				return ec.fieldContext_NodeAggregateResult_rightsMax(ctx, field)
			case "rightsSum":
				return ec.fieldContext_NodeAggregateResult_rightsSum(ctx, field)
			case "rightsAvg":
				return ec.fieldContext_NodeAggregateResult_rightsAvg(ctx, field)
			case "colorMin":
				return ec.fieldContext_NodeAggregateResult_colorMin(ctx, field)
			case "colorMax":
				return ec.fieldContext_NodeAggregateResult_colorMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_NodeAggregateResult_n_open_contractsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NodeAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_backed_rolesAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_tensions_createdAggregate(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_tensions_createdAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TensionsCreatedAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAggregateResult)
	fc.Result = res
	return ec.marshalOTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_tensions_createdAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_TensionAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_TensionAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_TensionAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_TensionAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_TensionAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_TensionAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_TensionAggregateResult_messageMax(ctx, field)
			case "emitteridMin":
				return ec.fieldContext_TensionAggregateResult_emitteridMin(ctx, field)
			case "emitteridMax":
				return ec.fieldContext_TensionAggregateResult_emitteridMax(ctx, field)
			case "receiveridMin":
				return ec.fieldContext_TensionAggregateResult_receiveridMin(ctx, field)
			case "receiveridMax":
				return ec.fieldContext_TensionAggregateResult_receiveridMax(ctx, field)
			case "titleMin":
				return ec.fieldContext_TensionAggregateResult_titleMin(ctx, field)
			case "titleMax":
				return ec.fieldContext_TensionAggregateResult_titleMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx, field)
			case "n_commentsMin":
				return ec.fieldContext_TensionAggregateResult_n_commentsMin(ctx, field)
			case "n_commentsMax":
				return ec.fieldContext_TensionAggregateResult_n_commentsMax(ctx, field)
			case "n_commentsSum":
				return ec.fieldContext_TensionAggregateResult_n_commentsSum(ctx, field)
			case "n_commentsAvg":
				return ec.fieldContext_TensionAggregateResult_n_commentsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_tensions_createdAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_tensions_assignedAggregate(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TensionsAssignedAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TensionAggregateResult)
	fc.Result = res
	return ec.marshalOTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_tensions_assignedAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_TensionAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_TensionAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_TensionAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_TensionAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_TensionAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_TensionAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_TensionAggregateResult_messageMax(ctx, field)
			case "emitteridMin":
				return ec.fieldContext_TensionAggregateResult_emitteridMin(ctx, field)
			case "emitteridMax":
				return ec.fieldContext_TensionAggregateResult_emitteridMax(ctx, field)
			case "receiveridMin":
				return ec.fieldContext_TensionAggregateResult_receiveridMin(ctx, field)
			case "receiveridMax":
				return ec.fieldContext_TensionAggregateResult_receiveridMax(ctx, field)
			case "titleMin":
				return ec.fieldContext_TensionAggregateResult_titleMin(ctx, field)
			case "titleMax":
				return ec.fieldContext_TensionAggregateResult_titleMax(ctx, field)
			case "n_open_contractsMin":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMin(ctx, field)
			case "n_open_contractsMax":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsMax(ctx, field)
			case "n_open_contractsSum":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsSum(ctx, field)
			case "n_open_contractsAvg":
				return ec.fieldContext_TensionAggregateResult_n_open_contractsAvg(ctx, field)
			case "n_commentsMin":
				return ec.fieldContext_TensionAggregateResult_n_commentsMin(ctx, field)
			case "n_commentsMax":
				return ec.fieldContext_TensionAggregateResult_n_commentsMax(ctx, field)
			case "n_commentsSum":
				return ec.fieldContext_TensionAggregateResult_n_commentsSum(ctx, field)
			case "n_commentsAvg":
				return ec.fieldContext_TensionAggregateResult_n_commentsAvg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TensionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_tensions_assignedAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_contractsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_contractsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContractAggregateResult)
	fc.Result = res
	return ec.marshalOContractAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_contractsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ContractAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_ContractAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_ContractAggregateResult_createdAtMax(ctx, field)
			case "updatedAtMin":
				return ec.fieldContext_ContractAggregateResult_updatedAtMin(ctx, field)
			case "updatedAtMax":
				return ec.fieldContext_ContractAggregateResult_updatedAtMax(ctx, field)
			case "messageMin":
				return ec.fieldContext_ContractAggregateResult_messageMin(ctx, field)
			case "messageMax":
				return ec.fieldContext_ContractAggregateResult_messageMax(ctx, field)
			case "contractidMin":
				return ec.fieldContext_ContractAggregateResult_contractidMin(ctx, field)
			case "contractidMax":
				return ec.fieldContext_ContractAggregateResult_contractidMax(ctx, field)
			case "closedAtMin":
				return ec.fieldContext_ContractAggregateResult_closedAtMin(ctx, field)
			case "closedAtMax":
				return ec.fieldContext_ContractAggregateResult_closedAtMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContractAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_contractsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_reactionsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_reactionsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReactionsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ReactionAggregateResult)
	fc.Result = res
	return ec.marshalOReactionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_reactionsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ReactionAggregateResult_count(ctx, field)
			case "reactionidMin":
				return ec.fieldContext_ReactionAggregateResult_reactionidMin(ctx, field)
			case "reactionidMax":
				return ec.fieldContext_ReactionAggregateResult_reactionidMax(ctx, field)
			case "type_Min":
				return ec.fieldContext_ReactionAggregateResult_type_Min(ctx, field)
			case "type_Max":
				return ec.fieldContext_ReactionAggregateResult_type_Max(ctx, field)
			case "type_Sum":
				return ec.fieldContext_ReactionAggregateResult_type_Sum(ctx, field)
			case "type_Avg":
				return ec.fieldContext_ReactionAggregateResult_type_Avg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReactionAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_reactionsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _User_eventsAggregate(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_eventsAggregate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventsAggregate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserEventAggregateResult)
	fc.Result = res
	return ec.marshalOUserEventAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventAggregateResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_eventsAggregate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_UserEventAggregateResult_count(ctx, field)
			case "createdAtMin":
				return ec.fieldContext_UserEventAggregateResult_createdAtMin(ctx, field)
			case "createdAtMax":
				return ec.fieldContext_UserEventAggregateResult_createdAtMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEventAggregateResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_eventsAggregate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_lastAckMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_lastAckMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastAckMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_lastAckMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_lastAckMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_lastAckMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastAckMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_lastAckMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_usernameMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_usernameMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsernameMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_usernameMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_usernameMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_usernameMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsernameMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_usernameMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_nameMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_nameMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_nameMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_nameMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_emailMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_emailMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_emailMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_emailMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_emailMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_emailMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_passwordMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_passwordMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PasswordMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_passwordMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_passwordMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_passwordMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PasswordMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_passwordMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_bioMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_bioMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BioMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_bioMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_bioMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_bioMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BioMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_bioMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_locationMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_locationMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_locationMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_locationMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_locationMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_locationMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_utcMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_utcMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UtcMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_utcMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_utcMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_utcMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UtcMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_utcMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_markAllAsReadMin(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_markAllAsReadMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarkAllAsReadMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_markAllAsReadMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAggregateResult_markAllAsReadMax(ctx context.Context, field graphql.CollectedField, obj *model.UserAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAggregateResult_markAllAsReadMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarkAllAsReadMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAggregateResult_markAllAsReadMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEvent_id(ctx context.Context, field graphql.CollectedField, obj *model.UserEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEvent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEvent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.UserEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEvent_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEvent_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEvent_isRead(ctx context.Context, field graphql.CollectedField, obj *model.UserEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEvent_isRead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRead, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEvent_isRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEvent_user(ctx context.Context, field graphql.CollectedField, obj *model.UserEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEvent_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEvent_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UserEvent_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UserEvent_event(ctx context.Context, field graphql.CollectedField, obj *model.UserEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEvent_event(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.EventKind)
	fc.Result = res
	return ec.marshalOEventKind2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEvent_event(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EventKind does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_UserEvent_event_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _UserEventAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.UserEventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEventAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEventAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEventAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.UserEventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEventAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEventAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEventAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.UserEventAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEventAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEventAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEventAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRights_type_(ctx context.Context, field graphql.CollectedField, obj *model.UserRights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRights_type_(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UserType)
	fc.Result = res
	return ec.marshalNUserType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRights_type_(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRights_canLogin(ctx context.Context, field graphql.CollectedField, obj *model.UserRights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRights_canLogin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanLogin, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRights_canLogin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRights_canCreateRoot(ctx context.Context, field graphql.CollectedField, obj *model.UserRights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRights_canCreateRoot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanCreateRoot, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRights_canCreateRoot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRights_maxPublicOrga(ctx context.Context, field graphql.CollectedField, obj *model.UserRights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRights_maxPublicOrga(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPublicOrga, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRights_maxPublicOrga(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRights_maxPrivateOrga(ctx context.Context, field graphql.CollectedField, obj *model.UserRights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRights_maxPrivateOrga(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrivateOrga, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRights_maxPrivateOrga(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRights_hasEmailNotifications(ctx context.Context, field graphql.CollectedField, obj *model.UserRights) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRights_hasEmailNotifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasEmailNotifications, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRights_hasEmailNotifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRights",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRightsAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.UserRightsAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRightsAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRightsAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRightsAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRightsAggregateResult_maxPublicOrgaMin(ctx context.Context, field graphql.CollectedField, obj *model.UserRightsAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRightsAggregateResult_maxPublicOrgaMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPublicOrgaMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRightsAggregateResult_maxPublicOrgaMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRightsAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRightsAggregateResult_maxPublicOrgaMax(ctx context.Context, field graphql.CollectedField, obj *model.UserRightsAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRightsAggregateResult_maxPublicOrgaMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPublicOrgaMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRightsAggregateResult_maxPublicOrgaMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRightsAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRightsAggregateResult_maxPublicOrgaSum(ctx context.Context, field graphql.CollectedField, obj *model.UserRightsAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRightsAggregateResult_maxPublicOrgaSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPublicOrgaSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRightsAggregateResult_maxPublicOrgaSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRightsAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRightsAggregateResult_maxPublicOrgaAvg(ctx context.Context, field graphql.CollectedField, obj *model.UserRightsAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRightsAggregateResult_maxPublicOrgaAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPublicOrgaAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRightsAggregateResult_maxPublicOrgaAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRightsAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRightsAggregateResult_maxPrivateOrgaMin(ctx context.Context, field graphql.CollectedField, obj *model.UserRightsAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRightsAggregateResult_maxPrivateOrgaMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrivateOrgaMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRightsAggregateResult_maxPrivateOrgaMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRightsAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRightsAggregateResult_maxPrivateOrgaMax(ctx context.Context, field graphql.CollectedField, obj *model.UserRightsAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRightsAggregateResult_maxPrivateOrgaMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrivateOrgaMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRightsAggregateResult_maxPrivateOrgaMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRightsAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRightsAggregateResult_maxPrivateOrgaSum(ctx context.Context, field graphql.CollectedField, obj *model.UserRightsAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRightsAggregateResult_maxPrivateOrgaSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrivateOrgaSum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRightsAggregateResult_maxPrivateOrgaSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRightsAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRightsAggregateResult_maxPrivateOrgaAvg(ctx context.Context, field graphql.CollectedField, obj *model.UserRightsAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRightsAggregateResult_maxPrivateOrgaAvg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrivateOrgaAvg, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRightsAggregateResult_maxPrivateOrgaAvg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRightsAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vote_voteid(ctx context.Context, field graphql.CollectedField, obj *model.Vote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vote_voteid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Voteid, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vote_voteid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vote_contract(ctx context.Context, field graphql.CollectedField, obj *model.Vote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vote_contract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contract, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vote_contract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractid":
				return ec.fieldContext_Contract_contractid(ctx, field)
			case "tension":
				return ec.fieldContext_Contract_tension(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "contract_type":
				return ec.fieldContext_Contract_contract_type(ctx, field)
			case "closedAt":
				return ec.fieldContext_Contract_closedAt(ctx, field)
			case "event":
				return ec.fieldContext_Contract_event(ctx, field)
			case "participants":
				return ec.fieldContext_Contract_participants(ctx, field)
			case "candidates":
				return ec.fieldContext_Contract_candidates(ctx, field)
			case "pending_candidates":
				return ec.fieldContext_Contract_pending_candidates(ctx, field)
			case "comments":
				return ec.fieldContext_Contract_comments(ctx, field)
			case "isValidator":
				return ec.fieldContext_Contract_isValidator(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_Contract_message(ctx, field)
			case "participantsAggregate":
				return ec.fieldContext_Contract_participantsAggregate(ctx, field)
			case "candidatesAggregate":
				return ec.fieldContext_Contract_candidatesAggregate(ctx, field)
			case "pending_candidatesAggregate":
				return ec.fieldContext_Contract_pending_candidatesAggregate(ctx, field)
			case "commentsAggregate":
				return ec.fieldContext_Contract_commentsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Vote_contract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Vote_node(ctx context.Context, field graphql.CollectedField, obj *model.Vote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vote_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Node)
	fc.Result = res
	return ec.marshalNNode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vote_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Node_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Node_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Node_updatedAt(ctx, field)
			case "nameid":
				return ec.fieldContext_Node_nameid(ctx, field)
			case "rootnameid":
				return ec.fieldContext_Node_rootnameid(ctx, field)
			case "source":
				return ec.fieldContext_Node_source(ctx, field)
			case "name":
				return ec.fieldContext_Node_name(ctx, field)
			case "about":
				return ec.fieldContext_Node_about(ctx, field)
			case "skills":
				return ec.fieldContext_Node_skills(ctx, field)
			case "isRoot":
				return ec.fieldContext_Node_isRoot(ctx, field)
			case "parent":
				return ec.fieldContext_Node_parent(ctx, field)
			case "type_":
				return ec.fieldContext_Node_type_(ctx, field)
			case "tensions_out":
				return ec.fieldContext_Node_tensions_out(ctx, field)
			case "tensions_in":
				return ec.fieldContext_Node_tensions_in(ctx, field)
			case "visibility":
				return ec.fieldContext_Node_visibility(ctx, field)
			case "mode":
				return ec.fieldContext_Node_mode(ctx, field)
			case "rights":
				return ec.fieldContext_Node_rights(ctx, field)
			case "isArchived":
				return ec.fieldContext_Node_isArchived(ctx, field)
			case "isPersonal":
				return ec.fieldContext_Node_isPersonal(ctx, field)
			case "userCanJoin":
				return ec.fieldContext_Node_userCanJoin(ctx, field)
			case "guestCanCreateTension":
				return ec.fieldContext_Node_guestCanCreateTension(ctx, field)
			case "watchers":
				return ec.fieldContext_Node_watchers(ctx, field)
			case "children":
				return ec.fieldContext_Node_children(ctx, field)
			case "labels":
				return ec.fieldContext_Node_labels(ctx, field)
			case "roles":
				return ec.fieldContext_Node_roles(ctx, field)
			case "projects":
				return ec.fieldContext_Node_projects(ctx, field)
			case "pinned":
				return ec.fieldContext_Node_pinned(ctx, field)
			case "role_ext":
				return ec.fieldContext_Node_role_ext(ctx, field)
			case "role_type":
				return ec.fieldContext_Node_role_type(ctx, field)
			case "color":
				return ec.fieldContext_Node_color(ctx, field)
			case "first_link":
				return ec.fieldContext_Node_first_link(ctx, field)
			case "second_link":
				return ec.fieldContext_Node_second_link(ctx, field)
			case "contracts":
				return ec.fieldContext_Node_contracts(ctx, field)
			case "orga_agg":
				return ec.fieldContext_Node_orga_agg(ctx, field)
			case "events_history":
				return ec.fieldContext_Node_events_history(ctx, field)
			case "n_open_contracts":
				return ec.fieldContext_Node_n_open_contracts(ctx, field)
			case "tensions_outAggregate":
				return ec.fieldContext_Node_tensions_outAggregate(ctx, field)
			case "tensions_inAggregate":
				return ec.fieldContext_Node_tensions_inAggregate(ctx, field)
			case "watchersAggregate":
				return ec.fieldContext_Node_watchersAggregate(ctx, field)
			case "childrenAggregate":
				return ec.fieldContext_Node_childrenAggregate(ctx, field)
			case "labelsAggregate":
				return ec.fieldContext_Node_labelsAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_Node_rolesAggregate(ctx, field)
			case "projectsAggregate":
				return ec.fieldContext_Node_projectsAggregate(ctx, field)
			case "pinnedAggregate":
				return ec.fieldContext_Node_pinnedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_Node_contractsAggregate(ctx, field)
			case "events_historyAggregate":
				return ec.fieldContext_Node_events_historyAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Vote_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Vote_data(ctx context.Context, field graphql.CollectedField, obj *model.Vote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vote_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int)
	fc.Result = res
	return ec.marshalNInt2ᚕintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vote_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vote_id(ctx context.Context, field graphql.CollectedField, obj *model.Vote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vote_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vote_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vote_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Vote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vote_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vote_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastAck":
				return ec.fieldContext_User_lastAck(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "bio":
				return ec.fieldContext_User_bio(ctx, field)
			case "location":
				return ec.fieldContext_User_location(ctx, field)
			case "utc":
				return ec.fieldContext_User_utc(ctx, field)
			case "links":
				return ec.fieldContext_User_links(ctx, field)
			case "skills":
				return ec.fieldContext_User_skills(ctx, field)
			case "notifyByEmail":
				return ec.fieldContext_User_notifyByEmail(ctx, field)
			case "lang":
				return ec.fieldContext_User_lang(ctx, field)
			case "subscriptions":
				return ec.fieldContext_User_subscriptions(ctx, field)
			case "watching":
				return ec.fieldContext_User_watching(ctx, field)
			case "rights":
				return ec.fieldContext_User_rights(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "backed_roles":
				return ec.fieldContext_User_backed_roles(ctx, field)
			case "tensions_created":
				return ec.fieldContext_User_tensions_created(ctx, field)
			case "tensions_assigned":
				return ec.fieldContext_User_tensions_assigned(ctx, field)
			case "contracts":
				return ec.fieldContext_User_contracts(ctx, field)
			case "reactions":
				return ec.fieldContext_User_reactions(ctx, field)
			case "events":
				return ec.fieldContext_User_events(ctx, field)
			case "markAllAsRead":
				return ec.fieldContext_User_markAllAsRead(ctx, field)
			case "event_count":
				return ec.fieldContext_User_event_count(ctx, field)
			case "subscriptionsAggregate":
				return ec.fieldContext_User_subscriptionsAggregate(ctx, field)
			case "watchingAggregate":
				return ec.fieldContext_User_watchingAggregate(ctx, field)
			case "rolesAggregate":
				return ec.fieldContext_User_rolesAggregate(ctx, field)
			case "backed_rolesAggregate":
				return ec.fieldContext_User_backed_rolesAggregate(ctx, field)
			case "tensions_createdAggregate":
				return ec.fieldContext_User_tensions_createdAggregate(ctx, field)
			case "tensions_assignedAggregate":
				return ec.fieldContext_User_tensions_assignedAggregate(ctx, field)
			case "contractsAggregate":
				return ec.fieldContext_User_contractsAggregate(ctx, field)
			case "reactionsAggregate":
				return ec.fieldContext_User_reactionsAggregate(ctx, field)
			case "eventsAggregate":
				return ec.fieldContext_User_eventsAggregate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Vote_createdBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Vote_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Vote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vote_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vote_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vote_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Vote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vote_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vote_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vote_message(ctx context.Context, field graphql.CollectedField, obj *model.Vote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vote_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vote_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VoteAggregateResult_count(ctx context.Context, field graphql.CollectedField, obj *model.VoteAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VoteAggregateResult_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VoteAggregateResult_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VoteAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VoteAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField, obj *model.VoteAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VoteAggregateResult_createdAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VoteAggregateResult_createdAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VoteAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VoteAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField, obj *model.VoteAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VoteAggregateResult_createdAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VoteAggregateResult_createdAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VoteAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VoteAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField, obj *model.VoteAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VoteAggregateResult_updatedAtMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VoteAggregateResult_updatedAtMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VoteAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VoteAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField, obj *model.VoteAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VoteAggregateResult_updatedAtMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAtMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VoteAggregateResult_updatedAtMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VoteAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VoteAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField, obj *model.VoteAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VoteAggregateResult_messageMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VoteAggregateResult_messageMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VoteAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VoteAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField, obj *model.VoteAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VoteAggregateResult_messageMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VoteAggregateResult_messageMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VoteAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VoteAggregateResult_voteidMin(ctx context.Context, field graphql.CollectedField, obj *model.VoteAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VoteAggregateResult_voteidMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteidMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VoteAggregateResult_voteidMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VoteAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VoteAggregateResult_voteidMax(ctx context.Context, field graphql.CollectedField, obj *model.VoteAggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VoteAggregateResult_voteidMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteidMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VoteAggregateResult_voteidMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VoteAggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddBlobInput(ctx context.Context, obj interface{}) (model.AddBlobInput, error) {
	var it model.AddBlobInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "tension", "blob_type", "pushedFlag", "archivedFlag", "node", "md"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "blob_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blob_type"))
			it.BlobType, err = ec.unmarshalNBlobType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
			if err != nil {
				return it, err
			}
		case "pushedFlag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pushedFlag"))
			it.PushedFlag, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "archivedFlag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivedFlag"))
			it.ArchivedFlag, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "node":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("node"))
			it.Node, err = ec.unmarshalONodeFragmentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "md":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("md"))
			it.Md, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddCommentInput(ctx context.Context, obj interface{}) (model.AddCommentInput, error) {
	var it model.AddCommentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "reactions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reactions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactions"))
			it.Reactions, err = ec.unmarshalOReactionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddContractInput(ctx context.Context, obj interface{}) (model.AddContractInput, error) {
	var it model.AddContractInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "contractid", "tension", "status", "contract_type", "closedAt", "event", "participants", "candidates", "pending_candidates", "comments", "isValidator"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contractid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractid"))
			it.Contractid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNContractStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_type"))
			it.ContractType, err = ec.unmarshalNContractType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx, v)
			if err != nil {
				return it, err
			}
		case "closedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("closedAt"))
			it.ClosedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
			it.Event, err = ec.unmarshalNEventFragmentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "participants":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participants"))
			it.Participants, err = ec.unmarshalNVoteRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidates"))
			it.Candidates, err = ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "pending_candidates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pending_candidates"))
			it.PendingCandidates, err = ec.unmarshalOPendingUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.CommentRef); ok {
				it.Comments = data
			} else if tmp == nil {
				it.Comments = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.CommentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isValidator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isValidator"))
			it.IsValidator, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddEventCountInput(ctx context.Context, obj interface{}) (model.AddEventCountInput, error) {
	var it model.AddEventCountInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"unread_events", "pending_contracts", "assigned_tensions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "unread_events":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unread_events"))
			it.UnreadEvents, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pending_contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pending_contracts"))
			it.PendingContracts, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "assigned_tensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigned_tensions"))
			it.AssignedTensions, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddEventFragmentInput(ctx context.Context, obj interface{}) (model.AddEventFragmentInput, error) {
	var it model.AddEventFragmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"event_type", "old", "new"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "event_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_type"))
			it.EventType, err = ec.unmarshalNTensionEvent2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		case "old":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("old"))
			it.Old, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new"))
			it.New, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddEventInput(ctx context.Context, obj interface{}) (model.AddEventInput, error) {
	var it model.AddEventInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "tension", "event_type", "mentioned", "old", "new"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "event_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_type"))
			it.EventType, err = ec.unmarshalNTensionEvent2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		case "mentioned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentioned"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Mentioned = data
			} else if tmp == nil {
				it.Mentioned = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "old":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("old"))
			it.Old, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new"))
			it.New, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddLabelInput(ctx context.Context, obj interface{}) (model.AddLabelInput, error) {
	var it model.AddLabelInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"rootnameid", "name", "description", "color", "tensions", "nodes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "unique")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "rootnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, f, nil, nil)
			}
			directive3 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive2, r, nil, nil, n)
			}

			tmp, err := directive3(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions"))
			it.Tensions, err = ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodes"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Nodes = data
			} else if tmp == nil {
				it.Nodes = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddMandateInput(ctx context.Context, obj interface{}) (model.AddMandateInput, error) {
	var it model.AddMandateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"purpose", "responsabilities", "domains", "policies"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "purpose":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purpose"))
			it.Purpose, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "responsabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responsabilities"))
			it.Responsabilities, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domains"))
			it.Domains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "policies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("policies"))
			it.Policies, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddNodeFragmentInput(ctx context.Context, obj interface{}) (model.AddNodeFragmentInput, error) {
	var it model.AddNodeFragmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nameid", "name", "about", "mandate", "skills", "visibility", "mode", "type_", "first_link", "second_link", "role_ext", "role_type", "color"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_add == nil {
					return nil, errors.New("directive w_add is not implemented")
				}
				return ec.directives.W_add(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Nameid = data
			} else if tmp == nil {
				it.Nameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mandate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mandate"))
			it.Mandate, err = ec.unmarshalOMandateRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			it.Skills, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "visibility":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visibility"))
			it.Visibility, err = ec.unmarshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_link"))
			it.FirstLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "second_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("second_link"))
			it.SecondLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_ext":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_ext"))
			it.RoleExt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			it.RoleType, err = ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddNodeInput(ctx context.Context, obj interface{}) (model.AddNodeInput, error) {
	var it model.AddNodeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "nameid", "rootnameid", "source", "name", "about", "skills", "isRoot", "parent", "type_", "tensions_out", "tensions_in", "visibility", "mode", "rights", "isArchived", "isPersonal", "userCanJoin", "guestCanCreateTension", "watchers", "children", "labels", "roles", "projects", "pinned", "role_ext", "role_type", "color", "first_link", "second_link", "contracts", "orga_agg", "events_history", "n_open_contracts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			it.Nameid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalOBlobRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			it.About, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			it.Skills, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRoot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRoot"))
			it.IsRoot, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent"))
			it.Parent, err = ec.unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalNNodeType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_out":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_out"))
			it.TensionsOut, err = ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_in"))
			it.TensionsIn, err = ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "visibility":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visibility"))
			it.Visibility, err = ec.unmarshalNNodeVisibility2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalNNodeMode2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "rights":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rights"))
			it.Rights, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isArchived":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isArchived"))
			it.IsArchived, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPersonal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPersonal"))
			it.IsPersonal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "userCanJoin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userCanJoin"))
			it.UserCanJoin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "guestCanCreateTension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("guestCanCreateTension"))
			it.GuestCanCreateTension, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "watchers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("watchers"))
			it.Watchers, err = ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("children"))
			it.Children, err = ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			it.Labels, err = ec.unmarshalOLabelRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			it.Roles, err = ec.unmarshalORoleExtRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "projects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projects"))
			it.Projects, err = ec.unmarshalOProjectRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "pinned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinned"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.Pinned = data
			} else if tmp == nil {
				it.Pinned = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role_ext":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_ext"))
			it.RoleExt, err = ec.unmarshalORoleExtRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			it.RoleType, err = ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_link"))
			it.FirstLink, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "second_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("second_link"))
			it.SecondLink, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			it.Contracts, err = ec.unmarshalOVoteRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "orga_agg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orga_agg"))
			it.OrgaAgg, err = ec.unmarshalOOrgaAggRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "events_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("events_history"))
			it.EventsHistory, err = ec.unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_open_contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_open_contracts"))
			it.NOpenContracts, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddNotifInput(ctx context.Context, obj interface{}) (model.AddNotifInput, error) {
	var it model.AddNotifInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "tension_", "contract", "link"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension_"))
			it.Tension, err = ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract"))
			it.Contract, err = ec.unmarshalOContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
			it.Link, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddOrgaAggInput(ctx context.Context, obj interface{}) (model.AddOrgaAggInput, error) {
	var it model.AddOrgaAggInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"n_members", "n_guests"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "n_members":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_members"))
			it.NMembers, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_guests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_guests"))
			it.NGuests, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddPendingUserInput(ctx context.Context, obj interface{}) (model.AddPendingUserInput, error) {
	var it model.AddPendingUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "username", "password", "email", "email_token", "token", "contracts", "subscribe"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Username = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Email = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email_token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_token"))
			it.EmailToken, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			it.Contracts, err = ec.unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscribe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscribe"))
			it.Subscribe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddProjectColumnInput(ctx context.Context, obj interface{}) (model.AddProjectColumnInput, error) {
	var it model.AddProjectColumnInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "about", "pos", "tensions", "project"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			it.About, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pos"))
			it.Pos, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions"))
			it.Tensions, err = ec.unmarshalOProjectTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project"))
			it.Project, err = ec.unmarshalNProjectRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddProjectInput(ctx context.Context, obj interface{}) (model.AddProjectInput, error) {
	var it model.AddProjectInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "rootnameid", "parentnameid", "nameid", "name", "description", "status", "columns", "leaders", "nodes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentnameid"))
			it.Parentnameid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "unique")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "parentnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, f, nil, nil)
			}
			directive3 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive2, r, nil, nil, n)
			}

			tmp, err := directive3(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Nameid = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 100)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNProjectStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
			it.Columns, err = ec.unmarshalOProjectColumnRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "leaders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaders"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Leaders = data
			} else if tmp == nil {
				it.Leaders = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "nodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodes"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Nodes = data
			} else if tmp == nil {
				it.Nodes = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddProjectTensionInput(ctx context.Context, obj interface{}) (model.AddProjectTensionInput, error) {
	var it model.AddProjectTensionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tension", "pos", "pc"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pos"))
			it.Pos, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "pc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pc"))
			it.Pc, err = ec.unmarshalNProjectColumnRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddReactionInput(ctx context.Context, obj interface{}) (model.AddReactionInput, error) {
	var it model.AddReactionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"reactionid", "user", "comment", "type_"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "reactionid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactionid"))
			it.Reactionid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.User = data
			} else if tmp == nil {
				it.User = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNCommentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.CommentRef); ok {
				it.Comment = data
			} else if tmp == nil {
				it.Comment = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.CommentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddRoleExtInput(ctx context.Context, obj interface{}) (model.AddRoleExtInput, error) {
	var it model.AddRoleExtInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"rootnameid", "name", "about", "role_type", "color", "mandate", "roles", "nodes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "unique")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "rootnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, f, nil, nil)
			}
			directive3 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive2, r, nil, nil, n)
			}

			tmp, err := directive3(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			it.RoleType, err = ec.unmarshalNRoleType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mandate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mandate"))
			it.Mandate, err = ec.unmarshalOMandateRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			it.Roles, err = ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodes"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Nodes = data
			} else if tmp == nil {
				it.Nodes = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddTensionInput(ctx context.Context, obj interface{}) (model.AddTensionInput, error) {
	var it model.AddTensionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "emitter", "emitterid", "receiver", "receiverid", "title", "type_", "status", "action", "assignees", "labels", "comments", "blobs", "history", "mentions", "contracts", "subscribers", "projects", "n_open_contracts", "n_comments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emitter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emitter"))
			it.Emitter, err = ec.unmarshalNNodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "emitterid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emitterid"))
			it.Emitterid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiver"))
			it.Receiver, err = ec.unmarshalNNodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverid"))
			it.Receiverid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNTensionType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "tensionTypeCheck")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(model.TensionType); ok {
				it.Type = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be fractale/fractal6.go/graph/model.TensionType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNTensionStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalOTensionAction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignees":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignees"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"AssigneeAdded", "AssigneeRemoved"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Assignees = data
			} else if tmp == nil {
				it.Assignees = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLabelRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"LabelAdded", "LabelRemoved"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.LabelRef); ok {
				it.Labels = data
			} else if tmp == nil {
				it.Labels = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.LabelRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"Created", "CommentPushed"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.CommentRef); ok {
				it.Comments = data
			} else if tmp == nil {
				it.Comments = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.CommentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "blobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blobs"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"BlobCreated", "BlobCommitted"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.BlobRef); ok {
				it.Blobs = data
			} else if tmp == nil {
				it.Blobs = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.BlobRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("history"))
			it.History, err = ec.unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "mentions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentions"))
			it.Mentions, err = ec.unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ContractRef); ok {
				it.Contracts = data
			} else if tmp == nil {
				it.Contracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subscribers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscribers"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Subscribers = data
			} else if tmp == nil {
				it.Subscribers = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "projects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projects"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOProjectTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ProjectTensionRef); ok {
				it.Projects = data
			} else if tmp == nil {
				it.Projects = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ProjectTensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "n_open_contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_open_contracts"))
			it.NOpenContracts, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_comments"))
			it.NComments, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddUserEventInput(ctx context.Context, obj interface{}) (model.AddUserEventInput, error) {
	var it model.AddUserEventInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "isRead", "user", "event"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRead"))
			it.IsRead, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			it.User, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEventKindRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.EventKindRef); ok {
				it.Event = data
			} else if tmp == nil {
				it.Event = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.EventKindRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddUserInput(ctx context.Context, obj interface{}) (model.AddUserInput, error) {
	var it model.AddUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "lastAck", "username", "name", "email", "password", "bio", "location", "utc", "links", "skills", "notifyByEmail", "lang", "subscriptions", "watching", "rights", "roles", "backed_roles", "tensions_created", "tensions_assigned", "contracts", "reactions", "events", "markAllAsRead", "event_count"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastAck":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastAck"))
			it.LastAck, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_add == nil {
					return nil, errors.New("directive w_add is not implemented")
				}
				return ec.directives.W_add(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Username = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_add == nil {
					return nil, errors.New("directive w_add is not implemented")
				}
				return ec.directives.W_add(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Email = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bio"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Bio = data
			} else if tmp == nil {
				it.Bio = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "utc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("utc"))
			it.Utc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "links":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("links"))
			it.Links, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			it.Skills, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notifyByEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifyByEmail"))
			it.NotifyByEmail, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "lang":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
			it.Lang, err = ec.unmarshalNLang2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLang(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.Subscriptions = data
			} else if tmp == nil {
				it.Subscriptions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "watching":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("watching"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Watching = data
			} else if tmp == nil {
				it.Watching = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rights":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rights"))
			it.Rights, err = ec.unmarshalNUserRightsRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Roles = data
			} else if tmp == nil {
				it.Roles = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "backed_roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backed_roles"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.BackedRoles = data
			} else if tmp == nil {
				it.BackedRoles = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions_created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_created"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsCreated = data
			} else if tmp == nil {
				it.TensionsCreated = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions_assigned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_assigned"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsAssigned = data
			} else if tmp == nil {
				it.TensionsAssigned = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ContractRef); ok {
				it.Contracts = data
			} else if tmp == nil {
				it.Contracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "reactions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactions"))
			it.Reactions, err = ec.unmarshalOReactionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "events":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("events"))
			it.Events, err = ec.unmarshalOUserEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "markAllAsRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("markAllAsRead"))
			it.MarkAllAsRead, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "event_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_count"))
			it.EventCount, err = ec.unmarshalOEventCountRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddUserRightsInput(ctx context.Context, obj interface{}) (model.AddUserRightsInput, error) {
	var it model.AddUserRightsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type_", "canLogin", "canCreateRoot", "maxPublicOrga", "maxPrivateOrga", "hasEmailNotifications"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalNUserType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserType(ctx, v)
			if err != nil {
				return it, err
			}
		case "canLogin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canLogin"))
			it.CanLogin, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "canCreateRoot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canCreateRoot"))
			it.CanCreateRoot, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxPublicOrga":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPublicOrga"))
			it.MaxPublicOrga, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxPrivateOrga":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPrivateOrga"))
			it.MaxPrivateOrga, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasEmailNotifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmailNotifications"))
			it.HasEmailNotifications, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddVoteInput(ctx context.Context, obj interface{}) (model.AddVoteInput, error) {
	var it model.AddVoteInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "voteid", "contract", "node", "data"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "voteid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voteid"))
			it.Voteid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.ContractRef); ok {
				it.Contract = data
			} else if tmp == nil {
				it.Contract = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "node":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("node"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNNodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Node = data
			} else if tmp == nil {
				it.Node = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthRule(ctx context.Context, obj interface{}) (model.AuthRule, error) {
	var it model.AuthRule
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"and", "or", "not", "rule"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOAuthRule2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOAuthRule2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOAuthRule2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, v)
			if err != nil {
				return it, err
			}
		case "rule":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule"))
			it.Rule, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobFilter(ctx context.Context, obj interface{}) (model.BlobFilter, error) {
	var it model.BlobFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "message", "blob_type", "pushedFlag", "archivedFlag", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "blob_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blob_type"))
			it.BlobType, err = ec.unmarshalOBlobType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobTypeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "pushedFlag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pushedFlag"))
			it.PushedFlag, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "archivedFlag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivedFlag"))
			it.ArchivedFlag, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOBlobHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOBlobFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOBlobFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobOrder(ctx context.Context, obj interface{}) (model.BlobOrder, error) {
	var it model.BlobOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOBlobOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOBlobOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOBlobOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobPatch(ctx context.Context, obj interface{}) (model.BlobPatch, error) {
	var it model.BlobPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "tension", "blob_type", "pushedFlag", "archivedFlag", "node", "md"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "blob_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blob_type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.BlobType); ok {
				it.BlobType = data
			} else if tmp == nil {
				it.BlobType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.BlobType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pushedFlag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pushedFlag"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.PushedFlag = data
			} else if tmp == nil {
				it.PushedFlag = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "archivedFlag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivedFlag"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ArchivedFlag = data
			} else if tmp == nil {
				it.ArchivedFlag = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "node":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("node"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeFragmentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeFragmentRef); ok {
				it.Node = data
			} else if tmp == nil {
				it.Node = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeFragmentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "md":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("md"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Md = data
			} else if tmp == nil {
				it.Md = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobRef(ctx context.Context, obj interface{}) (model.BlobRef, error) {
	var it model.BlobRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdBy", "createdAt", "updatedAt", "message", "tension", "blob_type", "pushedFlag", "archivedFlag", "node", "md"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "blob_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blob_type"))
			it.BlobType, err = ec.unmarshalOBlobType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
			if err != nil {
				return it, err
			}
		case "pushedFlag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pushedFlag"))
			it.PushedFlag, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "archivedFlag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivedFlag"))
			it.ArchivedFlag, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "node":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("node"))
			it.Node, err = ec.unmarshalONodeFragmentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "md":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("md"))
			it.Md, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobType_hash(ctx context.Context, obj interface{}) (model.BlobTypeHash, error) {
	var it model.BlobTypeHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOBlobType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOBlobType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentFilter(ctx context.Context, obj interface{}) (model.CommentFilter, error) {
	var it model.CommentFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "message", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOCommentHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCommentFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCommentFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentOrder(ctx context.Context, obj interface{}) (model.CommentOrder, error) {
	var it model.CommentOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOCommentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOCommentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOCommentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentPatch(ctx context.Context, obj interface{}) (model.CommentPatch, error) {
	var it model.CommentPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "reactions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "reactions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOReactionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ReactionRef); ok {
				it.Reactions = data
			} else if tmp == nil {
				it.Reactions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ReactionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentRef(ctx context.Context, obj interface{}) (model.CommentRef, error) {
	var it model.CommentRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdBy", "createdAt", "updatedAt", "message", "reactions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "reactions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactions"))
			it.Reactions, err = ec.unmarshalOReactionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainsFilter(ctx context.Context, obj interface{}) (model.ContainsFilter, error) {
	var it model.ContainsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"point", "polygon"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point"))
			it.Point, err = ec.unmarshalOPointRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "polygon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("polygon"))
			it.Polygon, err = ec.unmarshalOPolygonRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractFilter(ctx context.Context, obj interface{}) (model.ContractFilter, error) {
	var it model.ContractFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "message", "contractid", "status", "contract_type", "closedAt", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contractid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractid"))
			it.Contractid, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOContractStatus_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatusHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_type"))
			it.ContractType, err = ec.unmarshalOContractType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractTypeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "closedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("closedAt"))
			it.ClosedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOContractHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContractFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContractFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractOrder(ctx context.Context, obj interface{}) (model.ContractOrder, error) {
	var it model.ContractOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOContractOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOContractOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOContractOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractPatch(ctx context.Context, obj interface{}) (model.ContractPatch, error) {
	var it model.ContractPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "tension", "status", "contract_type", "closedAt", "event", "participants", "candidates", "pending_candidates", "comments", "isValidator"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.ContractStatus); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ContractStatus`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contract_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.ContractType); ok {
				it.ContractType = data
			} else if tmp == nil {
				it.ContractType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ContractType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "closedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("closedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ClosedAt = data
			} else if tmp == nil {
				it.ClosedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEventFragmentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.EventFragmentRef); ok {
				it.Event = data
			} else if tmp == nil {
				it.Event = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.EventFragmentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "participants":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participants"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOVoteRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.VoteRef); ok {
				it.Participants = data
			} else if tmp == nil {
				it.Participants = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.VoteRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "candidates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidates"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Candidates = data
			} else if tmp == nil {
				it.Candidates = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pending_candidates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pending_candidates"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOPendingUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.PendingUserRef); ok {
				it.PendingCandidates = data
			} else if tmp == nil {
				it.PendingCandidates = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.PendingUserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.CommentRef); ok {
				it.Comments = data
			} else if tmp == nil {
				it.Comments = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.CommentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isValidator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isValidator"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsValidator = data
			} else if tmp == nil {
				it.IsValidator = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractRef(ctx context.Context, obj interface{}) (model.ContractRef, error) {
	var it model.ContractRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdBy", "createdAt", "updatedAt", "message", "contractid", "tension", "status", "contract_type", "closedAt", "event", "participants", "candidates", "pending_candidates", "comments", "isValidator"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contractid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractid"))
			it.Contractid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOContractStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_type"))
			it.ContractType, err = ec.unmarshalOContractType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx, v)
			if err != nil {
				return it, err
			}
		case "closedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("closedAt"))
			it.ClosedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
			it.Event, err = ec.unmarshalOEventFragmentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "participants":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participants"))
			it.Participants, err = ec.unmarshalOVoteRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidates"))
			it.Candidates, err = ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "pending_candidates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pending_candidates"))
			it.PendingCandidates, err = ec.unmarshalOPendingUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.CommentRef); ok {
				it.Comments = data
			} else if tmp == nil {
				it.Comments = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.CommentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isValidator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isValidator"))
			it.IsValidator, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractStatus_hash(ctx context.Context, obj interface{}) (model.ContractStatusHash, error) {
	var it model.ContractStatusHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOContractStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOContractStatus2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractType_hash(ctx context.Context, obj interface{}) (model.ContractTypeHash, error) {
	var it model.ContractTypeHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOContractType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOContractType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomHTTP(ctx context.Context, obj interface{}) (model.CustomHTTP, error) {
	var it model.CustomHTTP
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"url", "method", "body", "graphql", "mode", "forwardHeaders", "secretHeaders", "introspectionHeaders", "skipIntrospection"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			it.Method, err = ec.unmarshalNHTTPMethod2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐHTTPMethod(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("body"))
			it.Body, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "graphql":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("graphql"))
			it.Graphql, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalOMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "forwardHeaders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("forwardHeaders"))
			it.ForwardHeaders, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "secretHeaders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretHeaders"))
			it.SecretHeaders, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "introspectionHeaders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("introspectionHeaders"))
			it.IntrospectionHeaders, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "skipIntrospection":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skipIntrospection"))
			it.SkipIntrospection, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateTimeFilter(ctx context.Context, obj interface{}) (model.DateTimeFilter, error) {
	var it model.DateTimeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in", "le", "lt", "ge", "gt", "between"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalODateTime2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalODateTimeRange2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeRange(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateTimeRange(ctx context.Context, obj interface{}) (model.DateTimeRange, error) {
	var it model.DateTimeRange
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventCountFilter(ctx context.Context, obj interface{}) (model.EventCountFilter, error) {
	var it model.EventCountFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOEventCountHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOEventCountFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOEventCountFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventCountOrder(ctx context.Context, obj interface{}) (model.EventCountOrder, error) {
	var it model.EventCountOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOEventCountOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOEventCountOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOEventCountOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventCountPatch(ctx context.Context, obj interface{}) (model.EventCountPatch, error) {
	var it model.EventCountPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"unread_events", "pending_contracts", "assigned_tensions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "unread_events":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unread_events"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.UnreadEvents = data
			} else if tmp == nil {
				it.UnreadEvents = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pending_contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pending_contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.PendingContracts = data
			} else if tmp == nil {
				it.PendingContracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "assigned_tensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigned_tensions"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.AssignedTensions = data
			} else if tmp == nil {
				it.AssignedTensions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventCountRef(ctx context.Context, obj interface{}) (model.EventCountRef, error) {
	var it model.EventCountRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"unread_events", "pending_contracts", "assigned_tensions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "unread_events":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unread_events"))
			it.UnreadEvents, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pending_contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pending_contracts"))
			it.PendingContracts, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "assigned_tensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assigned_tensions"))
			it.AssignedTensions, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventFilter(ctx context.Context, obj interface{}) (model.EventFilter, error) {
	var it model.EventFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "message", "event_type", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "event_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_type"))
			it.EventType, err = ec.unmarshalOTensionEvent_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOEventHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOEventFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOEventFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventFragmentFilter(ctx context.Context, obj interface{}) (model.EventFragmentFilter, error) {
	var it model.EventFragmentFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"event_type", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "event_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_type"))
			it.EventType, err = ec.unmarshalOTensionEvent_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOEventFragmentHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOEventFragmentFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOEventFragmentFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventFragmentOrder(ctx context.Context, obj interface{}) (model.EventFragmentOrder, error) {
	var it model.EventFragmentOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOEventFragmentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOEventFragmentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOEventFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventFragmentPatch(ctx context.Context, obj interface{}) (model.EventFragmentPatch, error) {
	var it model.EventFragmentPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"event_type", "old", "new"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "event_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionEvent); ok {
				it.EventType = data
			} else if tmp == nil {
				it.EventType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionEvent`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "old":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("old"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Old = data
			} else if tmp == nil {
				it.Old = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "new":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.New = data
			} else if tmp == nil {
				it.New = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventFragmentRef(ctx context.Context, obj interface{}) (model.EventFragmentRef, error) {
	var it model.EventFragmentRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"event_type", "old", "new"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "event_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_type"))
			it.EventType, err = ec.unmarshalOTensionEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		case "old":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("old"))
			it.Old, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new"))
			it.New, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventKindFilter(ctx context.Context, obj interface{}) (model.EventKindFilter, error) {
	var it model.EventKindFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberTypes", "eventFilter", "contractFilter", "notifFilter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberTypes"))
			it.MemberTypes, err = ec.unmarshalOEventKindType2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventFilter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventFilter"))
			it.EventFilter, err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contractFilter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFilter"))
			it.ContractFilter, err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "notifFilter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifFilter"))
			it.NotifFilter, err = ec.unmarshalONotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventKindRef(ctx context.Context, obj interface{}) (model.EventKindRef, error) {
	var it model.EventKindRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eventRef", "contractRef", "notifRef"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eventRef":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventRef"))
			it.EventRef, err = ec.unmarshalOEventRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "contractRef":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractRef"))
			it.ContractRef, err = ec.unmarshalOContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "notifRef":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifRef"))
			it.NotifRef, err = ec.unmarshalONotifRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventOrder(ctx context.Context, obj interface{}) (model.EventOrder, error) {
	var it model.EventOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOEventOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOEventOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventPatch(ctx context.Context, obj interface{}) (model.EventPatch, error) {
	var it model.EventPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "tension", "event_type", "mentioned", "old", "new"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "event_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionEvent); ok {
				it.EventType = data
			} else if tmp == nil {
				it.EventType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionEvent`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mentioned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentioned"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Mentioned = data
			} else if tmp == nil {
				it.Mentioned = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "old":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("old"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Old = data
			} else if tmp == nil {
				it.Old = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "new":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.New = data
			} else if tmp == nil {
				it.New = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventRef(ctx context.Context, obj interface{}) (model.EventRef, error) {
	var it model.EventRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdBy", "createdAt", "updatedAt", "message", "tension", "event_type", "mentioned", "old", "new"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "event_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_type"))
			it.EventType, err = ec.unmarshalOTensionEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		case "mentioned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentioned"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Mentioned = data
			} else if tmp == nil {
				it.Mentioned = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "old":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("old"))
			it.Old, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new"))
			it.New, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatFilter(ctx context.Context, obj interface{}) (model.FloatFilter, error) {
	var it model.FloatFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in", "le", "lt", "ge", "gt", "between"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOFloat2ᚕᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalOFloatRange2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐFloatRange(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatRange(ctx context.Context, obj interface{}) (model.FloatRange, error) {
	var it model.FloatRange
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGenerateMutationParams(ctx context.Context, obj interface{}) (model.GenerateMutationParams, error) {
	var it model.GenerateMutationParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"add", "update", "delete"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "add":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add"))
			it.Add, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "update":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
			it.Update, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete"))
			it.Delete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGenerateQueryParams(ctx context.Context, obj interface{}) (model.GenerateQueryParams, error) {
	var it model.GenerateQueryParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"get", "query", "password", "aggregate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "get":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("get"))
			it.Get, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "aggregate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aggregate"))
			it.Aggregate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt64Filter(ctx context.Context, obj interface{}) (model.Int64Filter, error) {
	var it model.Int64Filter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in", "le", "lt", "ge", "gt", "between"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOInt642ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOInt642ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOInt642ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOInt642ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOInt642ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOInt642ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalOInt64Range2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐInt64Range(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt64Range(ctx context.Context, obj interface{}) (model.Int64Range, error) {
	var it model.Int64Range
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalNInt642string(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalNInt642string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntFilter(ctx context.Context, obj interface{}) (model.IntFilter, error) {
	var it model.IntFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in", "le", "lt", "ge", "gt", "between"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalOIntRange2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐIntRange(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntRange(ctx context.Context, obj interface{}) (model.IntRange, error) {
	var it model.IntRange
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntersectsFilter(ctx context.Context, obj interface{}) (model.IntersectsFilter, error) {
	var it model.IntersectsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"polygon", "multiPolygon"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "polygon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("polygon"))
			it.Polygon, err = ec.unmarshalOPolygonRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "multiPolygon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("multiPolygon"))
			it.MultiPolygon, err = ec.unmarshalOMultiPolygonRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMultiPolygonRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelFilter(ctx context.Context, obj interface{}) (model.LabelFilter, error) {
	var it model.LabelFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "rootnameid", "name", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOStringHashFilter_StringTermFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringTermFilter(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.StringHashFilterStringTermFilter); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.StringHashFilterStringTermFilter`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOLabelHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLabelFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLabelFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelOrder(ctx context.Context, obj interface{}) (model.LabelOrder, error) {
	var it model.LabelOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOLabelOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOLabelOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOLabelOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelPatch(ctx context.Context, obj interface{}) (model.LabelPatch, error) {
	var it model.LabelPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"rootnameid", "name", "description", "color", "tensions", "nodes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Rootnameid = data
			} else if tmp == nil {
				it.Rootnameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "unique")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "rootnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, f, nil, nil)
			}
			directive3 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive2, r, nil, nil, n)
			}

			tmp, err := directive3(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Color = data
			} else if tmp == nil {
				it.Color = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_ro == nil {
					return nil, errors.New("directive x_ro is not implemented")
				}
				return ec.directives.X_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.Tensions = data
			} else if tmp == nil {
				it.Tensions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "nodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodes"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Nodes = data
			} else if tmp == nil {
				it.Nodes = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelRef(ctx context.Context, obj interface{}) (model.LabelRef, error) {
	var it model.LabelRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "rootnameid", "name", "description", "color", "tensions", "nodes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "unique")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "rootnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, f, nil, nil)
			}
			directive3 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive2, r, nil, nil, n)
			}

			tmp, err := directive3(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Color = data
			} else if tmp == nil {
				it.Color = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_ro == nil {
					return nil, errors.New("directive x_ro is not implemented")
				}
				return ec.directives.X_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.Tensions = data
			} else if tmp == nil {
				it.Tensions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "nodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodes"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Nodes = data
			} else if tmp == nil {
				it.Nodes = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMandateFilter(ctx context.Context, obj interface{}) (model.MandateFilter, error) {
	var it model.MandateFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "purpose", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "purpose":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purpose"))
			it.Purpose, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOMandateHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOMandateFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOMandateFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMandateOrder(ctx context.Context, obj interface{}) (model.MandateOrder, error) {
	var it model.MandateOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOMandateOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOMandateOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOMandateOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMandatePatch(ctx context.Context, obj interface{}) (model.MandatePatch, error) {
	var it model.MandatePatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"purpose", "responsabilities", "domains", "policies"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "purpose":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purpose"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Purpose = data
			} else if tmp == nil {
				it.Purpose = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "responsabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responsabilities"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Responsabilities = data
			} else if tmp == nil {
				it.Responsabilities = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "domains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domains"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Domains = data
			} else if tmp == nil {
				it.Domains = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "policies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("policies"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Policies = data
			} else if tmp == nil {
				it.Policies = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMandateRef(ctx context.Context, obj interface{}) (model.MandateRef, error) {
	var it model.MandateRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "purpose", "responsabilities", "domains", "policies"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "purpose":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purpose"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Purpose = data
			} else if tmp == nil {
				it.Purpose = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "responsabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responsabilities"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Responsabilities = data
			} else if tmp == nil {
				it.Responsabilities = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "domains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domains"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Domains = data
			} else if tmp == nil {
				it.Domains = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "policies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("policies"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Policies = data
			} else if tmp == nil {
				it.Policies = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMultiPolygonRef(ctx context.Context, obj interface{}) (model.MultiPolygonRef, error) {
	var it model.MultiPolygonRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"polygons"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "polygons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("polygons"))
			it.Polygons, err = ec.unmarshalNPolygonRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNearFilter(ctx context.Context, obj interface{}) (model.NearFilter, error) {
	var it model.NearFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"distance", "coordinate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distance"))
			it.Distance, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalNPointRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFilter(ctx context.Context, obj interface{}) (model.NodeFilter, error) {
	var it model.NodeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "nameid", "rootnameid", "name", "about", "skills", "isRoot", "type_", "visibility", "mode", "isArchived", "isPersonal", "role_type", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			it.Nameid, err = ec.unmarshalOStringHashFilter_StringRegExpFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalOStringHashFilter_StringRegExpFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringTermFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			it.About, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			it.Skills, err = ec.unmarshalOStringTermFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRoot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRoot"))
			it.IsRoot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalONodeType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeTypeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "visibility":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visibility"))
			it.Visibility, err = ec.unmarshalONodeVisibility_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibilityHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalONodeMode_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeModeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "isArchived":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isArchived"))
			it.IsArchived, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPersonal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPersonal"))
			it.IsPersonal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			it.RoleType, err = ec.unmarshalORoleType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleTypeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalONodeHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalONodeFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalONodeFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFragmentFilter(ctx context.Context, obj interface{}) (model.NodeFragmentFilter, error) {
	var it model.NodeFragmentFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalONodeFragmentHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalONodeFragmentFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalONodeFragmentFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalONodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFragmentOrder(ctx context.Context, obj interface{}) (model.NodeFragmentOrder, error) {
	var it model.NodeFragmentOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalONodeFragmentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalONodeFragmentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalONodeFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFragmentPatch(ctx context.Context, obj interface{}) (model.NodeFragmentPatch, error) {
	var it model.NodeFragmentPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nameid", "name", "about", "mandate", "skills", "visibility", "mode", "type_", "first_link", "second_link", "role_ext", "role_type", "color"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Nameid = data
			} else if tmp == nil {
				it.Nameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mandate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mandate"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMandateRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.MandateRef); ok {
				it.Mandate = data
			} else if tmp == nil {
				it.Mandate = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.MandateRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Skills = data
			} else if tmp == nil {
				it.Skills = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "visibility":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visibility"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeVisibility); ok {
				it.Visibility = data
			} else if tmp == nil {
				it.Visibility = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeVisibility`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeMode); ok {
				it.Mode = data
			} else if tmp == nil {
				it.Mode = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeMode`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeType); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "first_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_link"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.FirstLink = data
			} else if tmp == nil {
				it.FirstLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "second_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("second_link"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SecondLink = data
			} else if tmp == nil {
				it.SecondLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role_ext":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_ext"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.RoleExt = data
			} else if tmp == nil {
				it.RoleExt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.RoleType); ok {
				it.RoleType = data
			} else if tmp == nil {
				it.RoleType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.RoleType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Color = data
			} else if tmp == nil {
				it.Color = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeFragmentRef(ctx context.Context, obj interface{}) (model.NodeFragmentRef, error) {
	var it model.NodeFragmentRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "nameid", "name", "about", "mandate", "skills", "visibility", "mode", "type_", "first_link", "second_link", "role_ext", "role_type", "color"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_add == nil {
					return nil, errors.New("directive w_add is not implemented")
				}
				return ec.directives.W_add(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Nameid = data
			} else if tmp == nil {
				it.Nameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mandate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mandate"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMandateRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.MandateRef); ok {
				it.Mandate = data
			} else if tmp == nil {
				it.Mandate = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.MandateRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Skills = data
			} else if tmp == nil {
				it.Skills = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "visibility":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visibility"))
			it.Visibility, err = ec.unmarshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_link"))
			it.FirstLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "second_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("second_link"))
			it.SecondLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_ext":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_ext"))
			it.RoleExt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			it.RoleType, err = ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeMode_hash(ctx context.Context, obj interface{}) (model.NodeModeHash, error) {
	var it model.NodeModeHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalONodeMode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeOrder(ctx context.Context, obj interface{}) (model.NodeOrder, error) {
	var it model.NodeOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalONodeOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalONodeOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodePatch(ctx context.Context, obj interface{}) (model.NodePatch, error) {
	var it model.NodePatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "rootnameid", "source", "name", "about", "skills", "isRoot", "parent", "type_", "tensions_out", "tensions_in", "visibility", "mode", "rights", "isArchived", "isPersonal", "userCanJoin", "guestCanCreateTension", "watchers", "children", "labels", "roles", "projects", "pinned", "role_ext", "role_type", "color", "first_link", "second_link", "contracts", "orga_agg", "events_history", "n_open_contracts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Rootnameid = data
			} else if tmp == nil {
				it.Rootnameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.BlobRef); ok {
				it.Source = data
			} else if tmp == nil {
				it.Source = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.BlobRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Skills = data
			} else if tmp == nil {
				it.Skills = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isRoot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRoot"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsRoot = data
			} else if tmp == nil {
				it.IsRoot = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "parent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Parent = data
			} else if tmp == nil {
				it.Parent = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeType); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions_out":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_out"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsOut = data
			} else if tmp == nil {
				it.TensionsOut = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_in"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsIn = data
			} else if tmp == nil {
				it.TensionsIn = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "visibility":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visibility"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeVisibility); ok {
				it.Visibility = data
			} else if tmp == nil {
				it.Visibility = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeVisibility`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeMode); ok {
				it.Mode = data
			} else if tmp == nil {
				it.Mode = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeMode`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rights":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rights"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Rights = data
			} else if tmp == nil {
				it.Rights = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isArchived":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isArchived"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsArchived = data
			} else if tmp == nil {
				it.IsArchived = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isPersonal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPersonal"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsPersonal = data
			} else if tmp == nil {
				it.IsPersonal = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "userCanJoin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userCanJoin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.UserCanJoin = data
			} else if tmp == nil {
				it.UserCanJoin = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "guestCanCreateTension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("guestCanCreateTension"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.GuestCanCreateTension = data
			} else if tmp == nil {
				it.GuestCanCreateTension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "watchers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("watchers"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Watchers = data
			} else if tmp == nil {
				it.Watchers = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "children":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("children"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Children = data
			} else if tmp == nil {
				it.Children = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLabelRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.LabelRef); ok {
				it.Labels = data
			} else if tmp == nil {
				it.Labels = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.LabelRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalORoleExtRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.RoleExtRef); ok {
				it.Roles = data
			} else if tmp == nil {
				it.Roles = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.RoleExtRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "projects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projects"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOProjectRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ProjectRef); ok {
				it.Projects = data
			} else if tmp == nil {
				it.Projects = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ProjectRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pinned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinned"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.Pinned = data
			} else if tmp == nil {
				it.Pinned = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role_ext":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_ext"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalORoleExtRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.RoleExtRef); ok {
				it.RoleExt = data
			} else if tmp == nil {
				it.RoleExt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.RoleExtRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.RoleType); ok {
				it.RoleType = data
			} else if tmp == nil {
				it.RoleType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.RoleType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Color = data
			} else if tmp == nil {
				it.Color = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "first_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_link"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.FirstLink = data
			} else if tmp == nil {
				it.FirstLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "second_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("second_link"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.SecondLink = data
			} else if tmp == nil {
				it.SecondLink = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOVoteRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.VoteRef); ok {
				it.Contracts = data
			} else if tmp == nil {
				it.Contracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.VoteRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "orga_agg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orga_agg"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOOrgaAggRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.OrgaAggRef); ok {
				it.OrgaAgg = data
			} else if tmp == nil {
				it.OrgaAgg = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.OrgaAggRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "events_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("events_history"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.EventRef); ok {
				it.EventsHistory = data
			} else if tmp == nil {
				it.EventsHistory = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.EventRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "n_open_contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_open_contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.NOpenContracts = data
			} else if tmp == nil {
				it.NOpenContracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeRef(ctx context.Context, obj interface{}) (model.NodeRef, error) {
	var it model.NodeRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdBy", "createdAt", "updatedAt", "nameid", "rootnameid", "source", "name", "about", "skills", "isRoot", "parent", "type_", "tensions_out", "tensions_in", "visibility", "mode", "rights", "isArchived", "isPersonal", "userCanJoin", "guestCanCreateTension", "watchers", "children", "labels", "roles", "projects", "pinned", "role_ext", "role_type", "color", "first_link", "second_link", "contracts", "orga_agg", "events_history", "n_open_contracts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			it.Nameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalOBlobRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			it.About, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			it.Skills, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRoot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRoot"))
			it.IsRoot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent"))
			it.Parent, err = ec.unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_out":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_out"))
			it.TensionsOut, err = ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_in"))
			it.TensionsIn, err = ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "visibility":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visibility"))
			it.Visibility, err = ec.unmarshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "rights":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rights"))
			it.Rights, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isArchived":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isArchived"))
			it.IsArchived, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPersonal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPersonal"))
			it.IsPersonal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "userCanJoin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userCanJoin"))
			it.UserCanJoin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "guestCanCreateTension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("guestCanCreateTension"))
			it.GuestCanCreateTension, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "watchers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("watchers"))
			it.Watchers, err = ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("children"))
			it.Children, err = ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			it.Labels, err = ec.unmarshalOLabelRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			it.Roles, err = ec.unmarshalORoleExtRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "projects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projects"))
			it.Projects, err = ec.unmarshalOProjectRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "pinned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinned"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.Pinned = data
			} else if tmp == nil {
				it.Pinned = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role_ext":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_ext"))
			it.RoleExt, err = ec.unmarshalORoleExtRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			it.RoleType, err = ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_link"))
			it.FirstLink, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "second_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("second_link"))
			it.SecondLink, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			it.Contracts, err = ec.unmarshalOVoteRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "orga_agg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orga_agg"))
			it.OrgaAgg, err = ec.unmarshalOOrgaAggRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "events_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("events_history"))
			it.EventsHistory, err = ec.unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_open_contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_open_contracts"))
			it.NOpenContracts, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeType_hash(ctx context.Context, obj interface{}) (model.NodeTypeHash, error) {
	var it model.NodeTypeHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalONodeType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNodeVisibility_hash(ctx context.Context, obj interface{}) (model.NodeVisibilityHash, error) {
	var it model.NodeVisibilityHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalONodeVisibility2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotifFilter(ctx context.Context, obj interface{}) (model.NotifFilter, error) {
	var it model.NotifFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "message", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalONotifHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalONotifFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalONotifFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalONotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotifOrder(ctx context.Context, obj interface{}) (model.NotifOrder, error) {
	var it model.NotifOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalONotifOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalONotifOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalONotifOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotifPatch(ctx context.Context, obj interface{}) (model.NotifPatch, error) {
	var it model.NotifPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "tension_", "contract", "link"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tension_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension_"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.ContractRef); ok {
				it.Contract = data
			} else if tmp == nil {
				it.Contract = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Link = data
			} else if tmp == nil {
				it.Link = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotifRef(ctx context.Context, obj interface{}) (model.NotifRef, error) {
	var it model.NotifRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdBy", "createdAt", "updatedAt", "message", "tension_", "contract", "link"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension_"))
			it.Tension, err = ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract"))
			it.Contract, err = ec.unmarshalOContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
			it.Link, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgaAggFilter(ctx context.Context, obj interface{}) (model.OrgaAggFilter, error) {
	var it model.OrgaAggFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOOrgaAggHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOrgaAggFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOrgaAggFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgaAggOrder(ctx context.Context, obj interface{}) (model.OrgaAggOrder, error) {
	var it model.OrgaAggOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOOrgaAggOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOOrgaAggOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOOrgaAggOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgaAggPatch(ctx context.Context, obj interface{}) (model.OrgaAggPatch, error) {
	var it model.OrgaAggPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"n_members", "n_guests"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "n_members":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_members"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.NMembers = data
			} else if tmp == nil {
				it.NMembers = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "n_guests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_guests"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.NGuests = data
			} else if tmp == nil {
				it.NGuests = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgaAggRef(ctx context.Context, obj interface{}) (model.OrgaAggRef, error) {
	var it model.OrgaAggRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"n_members", "n_guests"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "n_members":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_members"))
			it.NMembers, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_guests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_guests"))
			it.NGuests, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPendingUserFilter(ctx context.Context, obj interface{}) (model.PendingUserFilter, error) {
	var it model.PendingUserFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "username", "email", "email_token", "token", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.StringHashFilter); ok {
				it.Username = data
			} else if tmp == nil {
				it.Username = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.StringHashFilter`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.StringHashFilter); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.StringHashFilter`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email_token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_token"))
			it.EmailToken, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOPendingUserHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOPendingUserFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOPendingUserFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPendingUserOrder(ctx context.Context, obj interface{}) (model.PendingUserOrder, error) {
	var it model.PendingUserOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOPendingUserOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOPendingUserOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOPendingUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPendingUserPatch(ctx context.Context, obj interface{}) (model.PendingUserPatch, error) {
	var it model.PendingUserPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "password", "email_token", "token", "contracts", "subscribe"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Password = data
			} else if tmp == nil {
				it.Password = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email_token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_token"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.EmailToken = data
			} else if tmp == nil {
				it.EmailToken = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Token = data
			} else if tmp == nil {
				it.Token = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ContractRef); ok {
				it.Contracts = data
			} else if tmp == nil {
				it.Contracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subscribe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscribe"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.Subscribe = data
			} else if tmp == nil {
				it.Subscribe = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPendingUserRef(ctx context.Context, obj interface{}) (model.PendingUserRef, error) {
	var it model.PendingUserRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "updatedAt", "username", "password", "email", "email_token", "token", "contracts", "subscribe"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Username = data
			} else if tmp == nil {
				it.Username = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email_token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_token"))
			it.EmailToken, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			it.Contracts, err = ec.unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscribe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscribe"))
			it.Subscribe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointGeoFilter(ctx context.Context, obj interface{}) (model.PointGeoFilter, error) {
	var it model.PointGeoFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"near", "within"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "near":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("near"))
			it.Near, err = ec.unmarshalONearFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNearFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "within":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("within"))
			it.Within, err = ec.unmarshalOWithinFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐWithinFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointListRef(ctx context.Context, obj interface{}) (model.PointListRef, error) {
	var it model.PointListRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"points"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("points"))
			it.Points, err = ec.unmarshalNPointRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointRef(ctx context.Context, obj interface{}) (model.PointRef, error) {
	var it model.PointRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"longitude", "latitude"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPolygonGeoFilter(ctx context.Context, obj interface{}) (model.PolygonGeoFilter, error) {
	var it model.PolygonGeoFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"near", "within", "contains", "intersects"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "near":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("near"))
			it.Near, err = ec.unmarshalONearFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNearFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "within":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("within"))
			it.Within, err = ec.unmarshalOWithinFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐWithinFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contains"))
			it.Contains, err = ec.unmarshalOContainsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContainsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "intersects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("intersects"))
			it.Intersects, err = ec.unmarshalOIntersectsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐIntersectsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPolygonRef(ctx context.Context, obj interface{}) (model.PolygonRef, error) {
	var it model.PolygonRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"coordinates"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "coordinates":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinates"))
			it.Coordinates, err = ec.unmarshalNPointListRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointListRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostFilter(ctx context.Context, obj interface{}) (model.PostFilter, error) {
	var it model.PostFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "message", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOPostHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOPostFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOPostFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOPostFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostOrder(ctx context.Context, obj interface{}) (model.PostOrder, error) {
	var it model.PostOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOPostOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOPostOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOPostOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostPatch(ctx context.Context, obj interface{}) (model.PostPatch, error) {
	var it model.PostPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostRef(ctx context.Context, obj interface{}) (model.PostRef, error) {
	var it model.PostRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectColumnFilter(ctx context.Context, obj interface{}) (model.ProjectColumnFilter, error) {
	var it model.ProjectColumnFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOProjectColumnHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOProjectColumnFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOProjectColumnFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectColumnOrder(ctx context.Context, obj interface{}) (model.ProjectColumnOrder, error) {
	var it model.ProjectColumnOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOProjectColumnOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOProjectColumnOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOProjectColumnOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectColumnPatch(ctx context.Context, obj interface{}) (model.ProjectColumnPatch, error) {
	var it model.ProjectColumnPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"about", "pos", "tensions", "project"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pos"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Pos = data
			} else if tmp == nil {
				it.Pos = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOProjectTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ProjectTensionRef); ok {
				it.Tensions = data
			} else if tmp == nil {
				it.Tensions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ProjectTensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOProjectRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.ProjectRef); ok {
				it.Project = data
			} else if tmp == nil {
				it.Project = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ProjectRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectColumnRef(ctx context.Context, obj interface{}) (model.ProjectColumnRef, error) {
	var it model.ProjectColumnRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "about", "pos", "tensions", "project"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			it.About, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pos"))
			it.Pos, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions"))
			it.Tensions, err = ec.unmarshalOProjectTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project"))
			it.Project, err = ec.unmarshalOProjectRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectFilter(ctx context.Context, obj interface{}) (model.ProjectFilter, error) {
	var it model.ProjectFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "rootnameid", "parentnameid", "nameid", "name", "status", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentnameid"))
			it.Parentnameid, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.StringHashFilter); ok {
				it.Nameid = data
			} else if tmp == nil {
				it.Nameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.StringHashFilter`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringTermFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOProjectStatus_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatusHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOProjectHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOProjectFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOProjectFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectOrder(ctx context.Context, obj interface{}) (model.ProjectOrder, error) {
	var it model.ProjectOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOProjectOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOProjectOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOProjectOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectPatch(ctx context.Context, obj interface{}) (model.ProjectPatch, error) {
	var it model.ProjectPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "rootnameid", "parentnameid", "nameid", "name", "description", "status", "columns", "leaders", "nodes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Rootnameid = data
			} else if tmp == nil {
				it.Rootnameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "parentnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentnameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Parentnameid = data
			} else if tmp == nil {
				it.Parentnameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "unique")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "parentnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, f, nil, nil)
			}
			directive3 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive2, r, nil, nil, n)
			}

			tmp, err := directive3(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Nameid = data
			} else if tmp == nil {
				it.Nameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 100)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOProjectStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.ProjectStatus); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ProjectStatus`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOProjectColumnRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ProjectColumnRef); ok {
				it.Columns = data
			} else if tmp == nil {
				it.Columns = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ProjectColumnRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "leaders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaders"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Leaders = data
			} else if tmp == nil {
				it.Leaders = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "nodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodes"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Nodes = data
			} else if tmp == nil {
				it.Nodes = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectRef(ctx context.Context, obj interface{}) (model.ProjectRef, error) {
	var it model.ProjectRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdBy", "createdAt", "updatedAt", "rootnameid", "parentnameid", "nameid", "name", "description", "status", "columns", "leaders", "nodes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentnameid"))
			it.Parentnameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "unique")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "parentnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, f, nil, nil)
			}
			directive3 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive2, r, nil, nil, n)
			}

			tmp, err := directive3(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Nameid = data
			} else if tmp == nil {
				it.Nameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 100)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = data
			} else if tmp == nil {
				it.Description = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOProjectStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
			it.Columns, err = ec.unmarshalOProjectColumnRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "leaders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaders"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Leaders = data
			} else if tmp == nil {
				it.Leaders = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "nodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodes"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Nodes = data
			} else if tmp == nil {
				it.Nodes = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectStatus_hash(ctx context.Context, obj interface{}) (model.ProjectStatusHash, error) {
	var it model.ProjectStatusHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOProjectStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOProjectStatus2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectTensionFilter(ctx context.Context, obj interface{}) (model.ProjectTensionFilter, error) {
	var it model.ProjectTensionFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOProjectTensionHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOProjectTensionFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOProjectTensionFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectTensionOrder(ctx context.Context, obj interface{}) (model.ProjectTensionOrder, error) {
	var it model.ProjectTensionOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOProjectTensionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOProjectTensionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOProjectTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectTensionPatch(ctx context.Context, obj interface{}) (model.ProjectTensionPatch, error) {
	var it model.ProjectTensionPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tension", "pos", "pc"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pos"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Pos = data
			} else if tmp == nil {
				it.Pos = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pc"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOProjectColumnRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.ProjectColumnRef); ok {
				it.Pc = data
			} else if tmp == nil {
				it.Pc = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ProjectColumnRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectTensionRef(ctx context.Context, obj interface{}) (model.ProjectTensionRef, error) {
	var it model.ProjectTensionRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "tension", "pos", "pc"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tension"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionRef); ok {
				it.Tension = data
			} else if tmp == nil {
				it.Tension = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pos"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Pos = data
			} else if tmp == nil {
				it.Pos = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pc"))
			it.Pc, err = ec.unmarshalOProjectColumnRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReactionFilter(ctx context.Context, obj interface{}) (model.ReactionFilter, error) {
	var it model.ReactionFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "reactionid", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "reactionid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactionid"))
			it.Reactionid, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOReactionHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOReactionFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOReactionFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReactionOrder(ctx context.Context, obj interface{}) (model.ReactionOrder, error) {
	var it model.ReactionOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOReactionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOReactionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOReactionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReactionPatch(ctx context.Context, obj interface{}) (model.ReactionPatch, error) {
	var it model.ReactionPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user", "comment", "type_"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.User = data
			} else if tmp == nil {
				it.User = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.CommentRef); ok {
				it.Comment = data
			} else if tmp == nil {
				it.Comment = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.CommentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReactionRef(ctx context.Context, obj interface{}) (model.ReactionRef, error) {
	var it model.ReactionRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "reactionid", "user", "comment", "type_"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reactionid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactionid"))
			it.Reactionid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.User = data
			} else if tmp == nil {
				it.User = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.CommentRef); ok {
				it.Comment = data
			} else if tmp == nil {
				it.Comment = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.CommentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleExtFilter(ctx context.Context, obj interface{}) (model.RoleExtFilter, error) {
	var it model.RoleExtFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "rootnameid", "name", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOStringHashFilter_StringTermFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringTermFilter(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.StringHashFilterStringTermFilter); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.StringHashFilterStringTermFilter`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalORoleExtHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORoleExtFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORoleExtFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleExtOrder(ctx context.Context, obj interface{}) (model.RoleExtOrder, error) {
	var it model.RoleExtOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalORoleExtOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalORoleExtOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalORoleExtOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleExtPatch(ctx context.Context, obj interface{}) (model.RoleExtPatch, error) {
	var it model.RoleExtPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"rootnameid", "name", "about", "role_type", "color", "mandate", "roles", "nodes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Rootnameid = data
			} else if tmp == nil {
				it.Rootnameid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "unique")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "rootnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, f, nil, nil)
			}
			directive3 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive2, r, nil, nil, n)
			}

			tmp, err := directive3(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.RoleType); ok {
				it.RoleType = data
			} else if tmp == nil {
				it.RoleType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.RoleType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Color = data
			} else if tmp == nil {
				it.Color = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mandate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mandate"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMandateRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.MandateRef); ok {
				it.Mandate = data
			} else if tmp == nil {
				it.Mandate = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.MandateRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_ro == nil {
					return nil, errors.New("directive x_ro is not implemented")
				}
				return ec.directives.X_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Roles = data
			} else if tmp == nil {
				it.Roles = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "nodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodes"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Nodes = data
			} else if tmp == nil {
				it.Nodes = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleExtRef(ctx context.Context, obj interface{}) (model.RoleExtRef, error) {
	var it model.RoleExtRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "rootnameid", "name", "about", "role_type", "color", "mandate", "roles", "nodes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rootnameid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rootnameid"))
			it.Rootnameid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_alter == nil {
					return nil, errors.New("directive w_alter is not implemented")
				}
				return ec.directives.W_alter(ctx, obj, directive0, a)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "unique")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "rootnameid")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, f, nil, nil)
			}
			directive3 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "minLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 1)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive2, r, nil, nil, n)
			}

			tmp, err := directive3(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, n)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.About = data
			} else if tmp == nil {
				it.About = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "role_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_type"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.RoleType); ok {
				it.RoleType = data
			} else if tmp == nil {
				it.RoleType = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.RoleType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Color = data
			} else if tmp == nil {
				it.Color = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mandate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mandate"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMandateRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.MandateRef); ok {
				it.Mandate = data
			} else if tmp == nil {
				it.Mandate = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.MandateRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_ro == nil {
					return nil, errors.New("directive x_ro is not implemented")
				}
				return ec.directives.X_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Roles = data
			} else if tmp == nil {
				it.Roles = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "nodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodes"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Nodes = data
			} else if tmp == nil {
				it.Nodes = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleType_hash(ctx context.Context, obj interface{}) (model.RoleTypeHash, error) {
	var it model.RoleTypeHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalORoleType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringExactFilter(ctx context.Context, obj interface{}) (model.StringExactFilter, error) {
	var it model.StringExactFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in", "le", "lt", "ge", "gt", "between"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "between":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("between"))
			it.Between, err = ec.unmarshalOStringRange2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringRange(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFullTextFilter(ctx context.Context, obj interface{}) (model.StringFullTextFilter, error) {
	var it model.StringFullTextFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"alloftext", "anyoftext"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "alloftext":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alloftext"))
			it.Alloftext, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "anyoftext":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("anyoftext"))
			it.Anyoftext, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringHashFilter(ctx context.Context, obj interface{}) (model.StringHashFilter, error) {
	var it model.StringHashFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringHashFilter_StringRegExpFilter(ctx context.Context, obj interface{}) (model.StringHashFilterStringRegExpFilter, error) {
	var it model.StringHashFilterStringRegExpFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in", "regexp"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "regexp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regexp"))
			it.Regexp, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringHashFilter_StringTermFilter(ctx context.Context, obj interface{}) (model.StringHashFilterStringTermFilter, error) {
	var it model.StringHashFilterStringTermFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in", "allofterms", "anyofterms"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "allofterms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allofterms"))
			it.Allofterms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "anyofterms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("anyofterms"))
			it.Anyofterms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringRange(ctx context.Context, obj interface{}) (model.StringRange, error) {
	var it model.StringRange
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringRegExpFilter(ctx context.Context, obj interface{}) (model.StringRegExpFilter, error) {
	var it model.StringRegExpFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"regexp"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "regexp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regexp"))
			it.Regexp, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringTermFilter(ctx context.Context, obj interface{}) (model.StringTermFilter, error) {
	var it model.StringTermFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"allofterms", "anyofterms"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "allofterms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allofterms"))
			it.Allofterms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "anyofterms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("anyofterms"))
			it.Anyofterms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionEvent_hash(ctx context.Context, obj interface{}) (model.TensionEventHash, error) {
	var it model.TensionEventHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOTensionEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOTensionEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionFilter(ctx context.Context, obj interface{}) (model.TensionFilter, error) {
	var it model.TensionFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "message", "emitterid", "receiverid", "title", "type_", "status", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "emitterid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emitterid"))
			it.Emitterid, err = ec.unmarshalOStringHashFilter_StringRegExpFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverid"))
			it.Receiverid, err = ec.unmarshalOStringHashFilter_StringRegExpFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalOTensionType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionTypeHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOTensionStatus_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatusHash(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOTensionHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOTensionFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOTensionFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionOrder(ctx context.Context, obj interface{}) (model.TensionOrder, error) {
	var it model.TensionOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOTensionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOTensionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionPatch(ctx context.Context, obj interface{}) (model.TensionPatch, error) {
	var it model.TensionPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "emitter", "emitterid", "receiver", "receiverid", "title", "type_", "status", "action", "assignees", "labels", "comments", "blobs", "history", "mentions", "contracts", "subscribers", "projects", "n_open_contracts", "n_comments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "emitter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emitter"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Emitter = data
			} else if tmp == nil {
				it.Emitter = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "emitterid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emitterid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Emitterid = data
			} else if tmp == nil {
				it.Emitterid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "receiver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiver"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Receiver = data
			} else if tmp == nil {
				it.Receiver = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "receiverid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverid"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Receiverid = data
			} else if tmp == nil {
				it.Receiverid = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Title = data
			} else if tmp == nil {
				it.Title = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "tensionTypeCheck")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionType); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionStatus); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionStatus`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionAction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionAction); ok {
				it.Action = data
			} else if tmp == nil {
				it.Action = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionAction`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "assignees":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignees"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"AssigneeAdded", "AssigneeRemoved"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Assignees = data
			} else if tmp == nil {
				it.Assignees = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLabelRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"LabelAdded", "LabelRemoved"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.LabelRef); ok {
				it.Labels = data
			} else if tmp == nil {
				it.Labels = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.LabelRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"Created", "CommentPushed"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.CommentRef); ok {
				it.Comments = data
			} else if tmp == nil {
				it.Comments = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.CommentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "blobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blobs"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"BlobCreated", "BlobCommitted"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.BlobRef); ok {
				it.Blobs = data
			} else if tmp == nil {
				it.Blobs = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.BlobRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("history"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.EventRef); ok {
				it.History = data
			} else if tmp == nil {
				it.History = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.EventRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mentions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.EventRef); ok {
				it.Mentions = data
			} else if tmp == nil {
				it.Mentions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.EventRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ContractRef); ok {
				it.Contracts = data
			} else if tmp == nil {
				it.Contracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subscribers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscribers"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Subscribers = data
			} else if tmp == nil {
				it.Subscribers = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "projects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projects"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOProjectTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ProjectTensionRef); ok {
				it.Projects = data
			} else if tmp == nil {
				it.Projects = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ProjectTensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "n_open_contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_open_contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.NOpenContracts = data
			} else if tmp == nil {
				it.NOpenContracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "n_comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_comments"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.NComments = data
			} else if tmp == nil {
				it.NComments = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionRef(ctx context.Context, obj interface{}) (model.TensionRef, error) {
	var it model.TensionRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdBy", "createdAt", "updatedAt", "message", "emitter", "emitterid", "receiver", "receiverid", "title", "type_", "status", "action", "assignees", "labels", "comments", "blobs", "history", "mentions", "contracts", "subscribers", "projects", "n_open_contracts", "n_comments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emitter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emitter"))
			it.Emitter, err = ec.unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "emitterid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emitterid"))
			it.Emitterid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiver"))
			it.Receiver, err = ec.unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "receiverid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverid"))
			it.Receiverid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "tensionTypeCheck")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.TensionType); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.TensionType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOTensionStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalOTensionAction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignees":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignees"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"AssigneeAdded", "AssigneeRemoved"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Assignees = data
			} else if tmp == nil {
				it.Assignees = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLabelRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"LabelAdded", "LabelRemoved"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.LabelRef); ok {
				it.Labels = data
			} else if tmp == nil {
				it.Labels = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.LabelRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCommentRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"Created", "CommentPushed"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.CommentRef); ok {
				it.Comments = data
			} else if tmp == nil {
				it.Comments = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.CommentRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "blobs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blobs"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOBlobRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "hasEvent")
				if err != nil {
					return nil, err
				}
				e, err := ec.unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx, []interface{}{"BlobCreated", "BlobCommitted"})
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, nil, e, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "oneByOne")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.BlobRef); ok {
				it.Blobs = data
			} else if tmp == nil {
				it.Blobs = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.BlobRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("history"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.EventRef); ok {
				it.History = data
			} else if tmp == nil {
				it.History = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.EventRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "mentions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentions"))
			it.Mentions, err = ec.unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ContractRef); ok {
				it.Contracts = data
			} else if tmp == nil {
				it.Contracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subscribers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscribers"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserRef); ok {
				it.Subscribers = data
			} else if tmp == nil {
				it.Subscribers = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "projects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projects"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOProjectTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ProjectTensionRef); ok {
				it.Projects = data
			} else if tmp == nil {
				it.Projects = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ProjectTensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "n_open_contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_open_contracts"))
			it.NOpenContracts, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "n_comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("n_comments"))
			it.NComments, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionStatus_hash(ctx context.Context, obj interface{}) (model.TensionStatusHash, error) {
	var it model.TensionStatusHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOTensionStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOTensionStatus2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTensionType_hash(ctx context.Context, obj interface{}) (model.TensionTypeHash, error) {
	var it model.TensionTypeHash
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOTensionType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOTensionType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateBlobInput(ctx context.Context, obj interface{}) (model.UpdateBlobInput, error) {
	var it model.UpdateBlobInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOBlobPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOBlobPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCommentInput(ctx context.Context, obj interface{}) (model.UpdateCommentInput, error) {
	var it model.UpdateCommentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOCommentPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOCommentPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateContractInput(ctx context.Context, obj interface{}) (model.UpdateContractInput, error) {
	var it model.UpdateContractInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOContractPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOContractPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEventCountInput(ctx context.Context, obj interface{}) (model.UpdateEventCountInput, error) {
	var it model.UpdateEventCountInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOEventCountPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOEventCountPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEventFragmentInput(ctx context.Context, obj interface{}) (model.UpdateEventFragmentInput, error) {
	var it model.UpdateEventFragmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOEventFragmentPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOEventFragmentPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEventInput(ctx context.Context, obj interface{}) (model.UpdateEventInput, error) {
	var it model.UpdateEventInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOEventPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOEventPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateLabelInput(ctx context.Context, obj interface{}) (model.UpdateLabelInput, error) {
	var it model.UpdateLabelInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOLabelPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOLabelPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMandateInput(ctx context.Context, obj interface{}) (model.UpdateMandateInput, error) {
	var it model.UpdateMandateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOMandatePatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandatePatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOMandatePatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandatePatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNodeFragmentInput(ctx context.Context, obj interface{}) (model.UpdateNodeFragmentInput, error) {
	var it model.UpdateNodeFragmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNNodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalONodeFragmentPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalONodeFragmentPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNodeInput(ctx context.Context, obj interface{}) (model.UpdateNodeInput, error) {
	var it model.UpdateNodeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNNodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalONodePatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodePatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalONodePatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodePatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNotifInput(ctx context.Context, obj interface{}) (model.UpdateNotifInput, error) {
	var it model.UpdateNotifInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNNotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalONotifPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalONotifPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOrgaAggInput(ctx context.Context, obj interface{}) (model.UpdateOrgaAggInput, error) {
	var it model.UpdateOrgaAggInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOOrgaAggPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOOrgaAggPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePendingUserInput(ctx context.Context, obj interface{}) (model.UpdatePendingUserInput, error) {
	var it model.UpdatePendingUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOPendingUserPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOPendingUserPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePostInput(ctx context.Context, obj interface{}) (model.UpdatePostInput, error) {
	var it model.UpdatePostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNPostFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOPostPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOPostPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectColumnInput(ctx context.Context, obj interface{}) (model.UpdateProjectColumnInput, error) {
	var it model.UpdateProjectColumnInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOProjectColumnPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOProjectColumnPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectInput(ctx context.Context, obj interface{}) (model.UpdateProjectInput, error) {
	var it model.UpdateProjectInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOProjectPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOProjectPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectTensionInput(ctx context.Context, obj interface{}) (model.UpdateProjectTensionInput, error) {
	var it model.UpdateProjectTensionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOProjectTensionPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOProjectTensionPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateReactionInput(ctx context.Context, obj interface{}) (model.UpdateReactionInput, error) {
	var it model.UpdateReactionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOReactionPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOReactionPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRoleExtInput(ctx context.Context, obj interface{}) (model.UpdateRoleExtInput, error) {
	var it model.UpdateRoleExtInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNRoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalORoleExtPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalORoleExtPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTensionInput(ctx context.Context, obj interface{}) (model.UpdateTensionInput, error) {
	var it model.UpdateTensionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOTensionPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOTensionPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserEventInput(ctx context.Context, obj interface{}) (model.UpdateUserEventInput, error) {
	var it model.UpdateUserEventInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOUserEventPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOUserEventPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj interface{}) (model.UpdateUserInput, error) {
	var it model.UpdateUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOUserPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOUserPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserRightsInput(ctx context.Context, obj interface{}) (model.UpdateUserRightsInput, error) {
	var it model.UpdateUserRightsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOUserRightsPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOUserRightsPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateVoteInput(ctx context.Context, obj interface{}) (model.UpdateVoteInput, error) {
	var it model.UpdateVoteInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "set", "remove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "set":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			it.Set, err = ec.unmarshalOVotePatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVotePatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOVotePatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVotePatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserEventFilter(ctx context.Context, obj interface{}) (model.UserEventFilter, error) {
	var it model.UserEventFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "isRead", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRead"))
			it.IsRead, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOUserEventHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOUserEventFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOUserEventFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserEventOrder(ctx context.Context, obj interface{}) (model.UserEventOrder, error) {
	var it model.UserEventOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOUserEventOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOUserEventOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOUserEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserEventPatch(ctx context.Context, obj interface{}) (model.UserEventPatch, error) {
	var it model.UserEventPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "isRead", "user", "event"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRead"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsRead = data
			} else if tmp == nil {
				it.IsRead = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.User = data
			} else if tmp == nil {
				it.User = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEventKindRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.EventKindRef); ok {
				it.Event = data
			} else if tmp == nil {
				it.Event = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.EventKindRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserEventRef(ctx context.Context, obj interface{}) (model.UserEventRef, error) {
	var it model.UserEventRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "isRead", "user", "event"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRead"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.IsRead = data
			} else if tmp == nil {
				it.IsRead = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			it.User, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEventKindRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.EventKindRef); ok {
				it.Event = data
			} else if tmp == nil {
				it.Event = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.EventKindRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilter(ctx context.Context, obj interface{}) (model.UserFilter, error) {
	var it model.UserFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "username", "name", "email", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOStringHashFilter_StringRegExpFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_add == nil {
					return nil, errors.New("directive w_add is not implemented")
				}
				return ec.directives.W_add(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.StringHashFilterStringRegExpFilter); ok {
				it.Username = data
			} else if tmp == nil {
				it.Username = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.StringHashFilterStringRegExpFilter`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringRegExpFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringRegExpFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_add == nil {
					return nil, errors.New("directive w_add is not implemented")
				}
				return ec.directives.W_add(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.StringHashFilter); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.StringHashFilter`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOUserHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOUserFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOUserFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrder(ctx context.Context, obj interface{}) (model.UserOrder, error) {
	var it model.UserOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOUserOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOUserOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserPatch(ctx context.Context, obj interface{}) (model.UserPatch, error) {
	var it model.UserPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "lastAck", "name", "password", "bio", "location", "utc", "links", "skills", "notifyByEmail", "lang", "subscriptions", "watching", "rights", "roles", "backed_roles", "tensions_created", "tensions_assigned", "contracts", "reactions", "events", "markAllAsRead", "event_count"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lastAck":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastAck"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.LastAck = data
			} else if tmp == nil {
				it.LastAck = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Password = data
			} else if tmp == nil {
				it.Password = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "bio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bio"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, n)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Bio = data
			} else if tmp == nil {
				it.Bio = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Location = data
			} else if tmp == nil {
				it.Location = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "utc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("utc"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Utc = data
			} else if tmp == nil {
				it.Utc = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "links":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("links"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Links = data
			} else if tmp == nil {
				it.Links = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Skills = data
			} else if tmp == nil {
				it.Skills = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "notifyByEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifyByEmail"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.NotifyByEmail = data
			} else if tmp == nil {
				it.NotifyByEmail = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lang":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLang2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLang(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.Lang); ok {
				it.Lang = data
			} else if tmp == nil {
				it.Lang = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.Lang`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subscriptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.Subscriptions = data
			} else if tmp == nil {
				it.Subscriptions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "watching":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("watching"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Watching = data
			} else if tmp == nil {
				it.Watching = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rights":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rights"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRightsRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRightsRef); ok {
				it.Rights = data
			} else if tmp == nil {
				it.Rights = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRightsRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Roles = data
			} else if tmp == nil {
				it.Roles = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "backed_roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backed_roles"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.BackedRoles = data
			} else if tmp == nil {
				it.BackedRoles = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions_created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_created"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsCreated = data
			} else if tmp == nil {
				it.TensionsCreated = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions_assigned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_assigned"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsAssigned = data
			} else if tmp == nil {
				it.TensionsAssigned = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ContractRef); ok {
				it.Contracts = data
			} else if tmp == nil {
				it.Contracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "reactions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOReactionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ReactionRef); ok {
				it.Reactions = data
			} else if tmp == nil {
				it.Reactions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ReactionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "events":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("events"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserEventRef); ok {
				it.Events = data
			} else if tmp == nil {
				it.Events = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserEventRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "markAllAsRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("markAllAsRead"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "markAllAsRead")
				if err != nil {
					return nil, err
				}
				k, err := ec.unmarshalOString2ᚖstring(ctx, "username")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_meta_patch == nil {
					return nil, errors.New("directive w_meta_patch is not implemented")
				}
				return ec.directives.W_meta_patch(ctx, obj, directive0, f, k)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, nil, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MarkAllAsRead = data
			} else if tmp == nil {
				it.MarkAllAsRead = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "event_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_count"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEventCountRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.EventCountRef); ok {
				it.EventCount = data
			} else if tmp == nil {
				it.EventCount = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.EventCountRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRef(ctx context.Context, obj interface{}) (model.UserRef, error) {
	var it model.UserRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "lastAck", "username", "name", "email", "password", "bio", "location", "utc", "links", "skills", "notifyByEmail", "lang", "subscriptions", "watching", "rights", "roles", "backed_roles", "tensions_created", "tensions_assigned", "contracts", "reactions", "events", "markAllAsRead", "event_count"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastAck":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastAck"))
			it.LastAck, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_add == nil {
					return nil, errors.New("directive w_add is not implemented")
				}
				return ec.directives.W_add(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Username = data
			} else if tmp == nil {
				it.Username = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				a, err := ec.unmarshalNString2string(ctx, "lower")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_add == nil {
					return nil, errors.New("directive w_add is not implemented")
				}
				return ec.directives.W_add(ctx, obj, directive0, a)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bio"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "maxLen")
				if err != nil {
					return nil, err
				}
				n, err := ec.unmarshalOInt2ᚖint(ctx, 280)
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, n)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Bio = data
			} else if tmp == nil {
				it.Bio = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Location = data
			} else if tmp == nil {
				it.Location = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "utc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("utc"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Utc = data
			} else if tmp == nil {
				it.Utc = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "links":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("links"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Links = data
			} else if tmp == nil {
				it.Links = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "skills":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skills"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Skills = data
			} else if tmp == nil {
				it.Skills = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "notifyByEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifyByEmail"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.NotifyByEmail = data
			} else if tmp == nil {
				it.NotifyByEmail = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "lang":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOLang2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLang(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.Lang); ok {
				it.Lang = data
			} else if tmp == nil {
				it.Lang = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.Lang`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "subscriptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.Subscriptions = data
			} else if tmp == nil {
				it.Subscriptions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "watching":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("watching"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch == nil {
					return nil, errors.New("directive x_patch is not implemented")
				}
				return ec.directives.X_patch(ctx, obj, directive0, nil, nil, nil, nil)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, r, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Watching = data
			} else if tmp == nil {
				it.Watching = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rights":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rights"))
			it.Rights, err = ec.unmarshalOUserRightsRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.Roles = data
			} else if tmp == nil {
				it.Roles = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "backed_roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backed_roles"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.NodeRef); ok {
				it.BackedRoles = data
			} else if tmp == nil {
				it.BackedRoles = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions_created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_created"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsCreated = data
			} else if tmp == nil {
				it.TensionsCreated = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tensions_assigned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tensions_assigned"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.TensionRef); ok {
				it.TensionsAssigned = data
			} else if tmp == nil {
				it.TensionsAssigned = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.TensionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contracts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contracts"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ContractRef); ok {
				it.Contracts = data
			} else if tmp == nil {
				it.Contracts = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "reactions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reactions"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOReactionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.ReactionRef); ok {
				it.Reactions = data
			} else if tmp == nil {
				it.Reactions = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.ReactionRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "events":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("events"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventRefᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, nil, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]*model.UserEventRef); ok {
				it.Events = data
			} else if tmp == nil {
				it.Events = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []*fractale/fractal6.go/graph/model.UserEventRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "markAllAsRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("markAllAsRead"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				f, err := ec.unmarshalNString2string(ctx, "markAllAsRead")
				if err != nil {
					return nil, err
				}
				k, err := ec.unmarshalOString2ᚖstring(ctx, "username")
				if err != nil {
					return nil, err
				}
				if ec.directives.W_meta_patch == nil {
					return nil, errors.New("directive w_meta_patch is not implemented")
				}
				return ec.directives.W_meta_patch(ctx, obj, directive0, f, k)
			}
			directive2 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive1, nil, nil, nil, nil)
			}

			tmp, err := directive2(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MarkAllAsRead = data
			} else if tmp == nil {
				it.MarkAllAsRead = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "event_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event_count"))
			it.EventCount, err = ec.unmarshalOEventCountRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRightsFilter(ctx context.Context, obj interface{}) (model.UserRightsFilter, error) {
	var it model.UserRightsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOUserRightsHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOUserRightsFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOUserRightsFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRightsOrder(ctx context.Context, obj interface{}) (model.UserRightsOrder, error) {
	var it model.UserRightsOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOUserRightsOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOUserRightsOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOUserRightsOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRightsPatch(ctx context.Context, obj interface{}) (model.UserRightsPatch, error) {
	var it model.UserRightsPatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type_", "canLogin", "canCreateRoot", "maxPublicOrga", "maxPrivateOrga", "hasEmailNotifications"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserType(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserType); ok {
				it.Type = data
			} else if tmp == nil {
				it.Type = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserType`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "canLogin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canLogin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.CanLogin = data
			} else if tmp == nil {
				it.CanLogin = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "canCreateRoot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canCreateRoot"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.CanCreateRoot = data
			} else if tmp == nil {
				it.CanCreateRoot = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxPublicOrga":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPublicOrga"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.MaxPublicOrga = data
			} else if tmp == nil {
				it.MaxPublicOrga = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxPrivateOrga":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPrivateOrga"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.MaxPrivateOrga = data
			} else if tmp == nil {
				it.MaxPrivateOrga = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "hasEmailNotifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmailNotifications"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOBoolean2ᚖbool(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*bool); ok {
				it.HasEmailNotifications = data
			} else if tmp == nil {
				it.HasEmailNotifications = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRightsRef(ctx context.Context, obj interface{}) (model.UserRightsRef, error) {
	var it model.UserRightsRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type_", "canLogin", "canCreateRoot", "maxPublicOrga", "maxPrivateOrga", "hasEmailNotifications"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_"))
			it.Type, err = ec.unmarshalOUserType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserType(ctx, v)
			if err != nil {
				return it, err
			}
		case "canLogin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canLogin"))
			it.CanLogin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "canCreateRoot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canCreateRoot"))
			it.CanCreateRoot, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxPublicOrga":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPublicOrga"))
			it.MaxPublicOrga, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxPrivateOrga":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxPrivateOrga"))
			it.MaxPrivateOrga, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasEmailNotifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEmailNotifications"))
			it.HasEmailNotifications, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVoteFilter(ctx context.Context, obj interface{}) (model.VoteFilter, error) {
	var it model.VoteFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "message", "voteid", "has", "and", "or", "not"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "voteid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voteid"))
			it.Voteid, err = ec.unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "has":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has"))
			it.Has, err = ec.unmarshalOVoteHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteHasFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOVoteFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOVoteFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVoteOrder(ctx context.Context, obj interface{}) (model.VoteOrder, error) {
	var it model.VoteOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"asc", "desc", "then"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalOVoteOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desc"))
			it.Desc, err = ec.unmarshalOVoteOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrderable(ctx, v)
			if err != nil {
				return it, err
			}
		case "then":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("then"))
			it.Then, err = ec.unmarshalOVoteOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVotePatch(ctx context.Context, obj interface{}) (model.VotePatch, error) {
	var it model.VotePatch
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdBy", "createdAt", "updatedAt", "message", "contract", "node", "data"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.UserRef); ok {
				it.CreatedBy = data
			} else if tmp == nil {
				it.CreatedBy = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.UserRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.CreatedAt = data
			} else if tmp == nil {
				it.CreatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = data
			} else if tmp == nil {
				it.Message = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.ContractRef); ok {
				it.Contract = data
			} else if tmp == nil {
				it.Contract = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "node":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("node"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Node = data
			} else if tmp == nil {
				it.Node = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚕintᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				if ec.directives.X_patch_ro == nil {
					return nil, errors.New("directive x_patch_ro is not implemented")
				}
				return ec.directives.X_patch_ro(ctx, obj, directive0)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]int); ok {
				it.Data = data
			} else if tmp == nil {
				it.Data = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVoteRef(ctx context.Context, obj interface{}) (model.VoteRef, error) {
	var it model.VoteRef
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdBy", "createdAt", "updatedAt", "message", "voteid", "contract", "node", "data"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalODateTime2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "isOwner")
				if err != nil {
					return nil, err
				}
				f, err := ec.unmarshalOString2ᚖstring(ctx, "createdBy")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_alter == nil {
					return nil, errors.New("directive x_alter is not implemented")
				}
				return ec.directives.X_alter(ctx, obj, directive0, r, f, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.UpdatedAt = data
			} else if tmp == nil {
				it.UpdatedAt = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "voteid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voteid"))
			it.Voteid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.ContractRef); ok {
				it.Contract = data
			} else if tmp == nil {
				it.Contract = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.ContractRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "node":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("node"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				r, err := ec.unmarshalOString2ᚖstring(ctx, "ref")
				if err != nil {
					return nil, err
				}
				if ec.directives.X_add == nil {
					return nil, errors.New("directive x_add is not implemented")
				}
				return ec.directives.X_add(ctx, obj, directive0, r, nil, nil, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*model.NodeRef); ok {
				it.Node = data
			} else if tmp == nil {
				it.Node = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *fractale/fractal6.go/graph/model.NodeRef`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWithinFilter(ctx context.Context, obj interface{}) (model.WithinFilter, error) {
	var it model.WithinFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"polygon"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "polygon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("polygon"))
			it.Polygon, err = ec.unmarshalNPolygonRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonRef(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _EventKind(ctx context.Context, sel ast.SelectionSet, obj model.EventKind) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Event:
		return ec._Event(ctx, sel, &obj)
	case *model.Event:
		if obj == nil {
			return graphql.Null
		}
		return ec._Event(ctx, sel, obj)
	case model.Contract:
		return ec._Contract(ctx, sel, &obj)
	case *model.Contract:
		if obj == nil {
			return graphql.Null
		}
		return ec._Contract(ctx, sel, obj)
	case model.Notif:
		return ec._Notif(ctx, sel, &obj)
	case *model.Notif:
		if obj == nil {
			return graphql.Null
		}
		return ec._Notif(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var addBlobPayloadImplementors = []string{"AddBlobPayload"}

func (ec *executionContext) _AddBlobPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddBlobPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addBlobPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddBlobPayload")
		case "blob":

			out.Values[i] = ec._AddBlobPayload_blob(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddBlobPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addCommentPayloadImplementors = []string{"AddCommentPayload"}

func (ec *executionContext) _AddCommentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddCommentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addCommentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddCommentPayload")
		case "comment":

			out.Values[i] = ec._AddCommentPayload_comment(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddCommentPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addContractPayloadImplementors = []string{"AddContractPayload"}

func (ec *executionContext) _AddContractPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddContractPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addContractPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddContractPayload")
		case "contract":

			out.Values[i] = ec._AddContractPayload_contract(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddContractPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addEventCountPayloadImplementors = []string{"AddEventCountPayload"}

func (ec *executionContext) _AddEventCountPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddEventCountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addEventCountPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddEventCountPayload")
		case "eventCount":

			out.Values[i] = ec._AddEventCountPayload_eventCount(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddEventCountPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addEventFragmentPayloadImplementors = []string{"AddEventFragmentPayload"}

func (ec *executionContext) _AddEventFragmentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddEventFragmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addEventFragmentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddEventFragmentPayload")
		case "eventFragment":

			out.Values[i] = ec._AddEventFragmentPayload_eventFragment(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddEventFragmentPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addEventPayloadImplementors = []string{"AddEventPayload"}

func (ec *executionContext) _AddEventPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addEventPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddEventPayload")
		case "event":

			out.Values[i] = ec._AddEventPayload_event(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddEventPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addLabelPayloadImplementors = []string{"AddLabelPayload"}

func (ec *executionContext) _AddLabelPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddLabelPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addLabelPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddLabelPayload")
		case "label":

			out.Values[i] = ec._AddLabelPayload_label(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddLabelPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addMandatePayloadImplementors = []string{"AddMandatePayload"}

func (ec *executionContext) _AddMandatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddMandatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addMandatePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddMandatePayload")
		case "mandate":

			out.Values[i] = ec._AddMandatePayload_mandate(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddMandatePayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addNodeFragmentPayloadImplementors = []string{"AddNodeFragmentPayload"}

func (ec *executionContext) _AddNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddNodeFragmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addNodeFragmentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddNodeFragmentPayload")
		case "nodeFragment":

			out.Values[i] = ec._AddNodeFragmentPayload_nodeFragment(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddNodeFragmentPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addNodePayloadImplementors = []string{"AddNodePayload"}

func (ec *executionContext) _AddNodePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddNodePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addNodePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddNodePayload")
		case "node":

			out.Values[i] = ec._AddNodePayload_node(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddNodePayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addNotifPayloadImplementors = []string{"AddNotifPayload"}

func (ec *executionContext) _AddNotifPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddNotifPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addNotifPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddNotifPayload")
		case "notif":

			out.Values[i] = ec._AddNotifPayload_notif(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddNotifPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addOrgaAggPayloadImplementors = []string{"AddOrgaAggPayload"}

func (ec *executionContext) _AddOrgaAggPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddOrgaAggPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addOrgaAggPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddOrgaAggPayload")
		case "orgaAgg":

			out.Values[i] = ec._AddOrgaAggPayload_orgaAgg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddOrgaAggPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addPendingUserPayloadImplementors = []string{"AddPendingUserPayload"}

func (ec *executionContext) _AddPendingUserPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddPendingUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addPendingUserPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddPendingUserPayload")
		case "pendingUser":

			out.Values[i] = ec._AddPendingUserPayload_pendingUser(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddPendingUserPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addProjectColumnPayloadImplementors = []string{"AddProjectColumnPayload"}

func (ec *executionContext) _AddProjectColumnPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddProjectColumnPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addProjectColumnPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddProjectColumnPayload")
		case "projectColumn":

			out.Values[i] = ec._AddProjectColumnPayload_projectColumn(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddProjectColumnPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addProjectPayloadImplementors = []string{"AddProjectPayload"}

func (ec *executionContext) _AddProjectPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddProjectPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addProjectPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddProjectPayload")
		case "project":

			out.Values[i] = ec._AddProjectPayload_project(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddProjectPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addProjectTensionPayloadImplementors = []string{"AddProjectTensionPayload"}

func (ec *executionContext) _AddProjectTensionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddProjectTensionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addProjectTensionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddProjectTensionPayload")
		case "projectTension":

			out.Values[i] = ec._AddProjectTensionPayload_projectTension(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddProjectTensionPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addReactionPayloadImplementors = []string{"AddReactionPayload"}

func (ec *executionContext) _AddReactionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddReactionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addReactionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddReactionPayload")
		case "reaction":

			out.Values[i] = ec._AddReactionPayload_reaction(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddReactionPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addRoleExtPayloadImplementors = []string{"AddRoleExtPayload"}

func (ec *executionContext) _AddRoleExtPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddRoleExtPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addRoleExtPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddRoleExtPayload")
		case "roleExt":

			out.Values[i] = ec._AddRoleExtPayload_roleExt(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddRoleExtPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addTensionPayloadImplementors = []string{"AddTensionPayload"}

func (ec *executionContext) _AddTensionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddTensionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addTensionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddTensionPayload")
		case "tension":

			out.Values[i] = ec._AddTensionPayload_tension(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddTensionPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addUserEventPayloadImplementors = []string{"AddUserEventPayload"}

func (ec *executionContext) _AddUserEventPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddUserEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addUserEventPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddUserEventPayload")
		case "userEvent":

			out.Values[i] = ec._AddUserEventPayload_userEvent(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddUserEventPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addUserPayloadImplementors = []string{"AddUserPayload"}

func (ec *executionContext) _AddUserPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addUserPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddUserPayload")
		case "user":

			out.Values[i] = ec._AddUserPayload_user(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddUserPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addUserRightsPayloadImplementors = []string{"AddUserRightsPayload"}

func (ec *executionContext) _AddUserRightsPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddUserRightsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addUserRightsPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddUserRightsPayload")
		case "userRights":

			out.Values[i] = ec._AddUserRightsPayload_userRights(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddUserRightsPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addVotePayloadImplementors = []string{"AddVotePayload"}

func (ec *executionContext) _AddVotePayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddVotePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addVotePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddVotePayload")
		case "vote":

			out.Values[i] = ec._AddVotePayload_vote(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._AddVotePayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blobImplementors = []string{"Blob"}

func (ec *executionContext) _Blob(ctx context.Context, sel ast.SelectionSet, obj *model.Blob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blobImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Blob")
		case "tension":

			out.Values[i] = ec._Blob_tension(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blob_type":

			out.Values[i] = ec._Blob_blob_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pushedFlag":

			out.Values[i] = ec._Blob_pushedFlag(ctx, field, obj)

		case "archivedFlag":

			out.Values[i] = ec._Blob_archivedFlag(ctx, field, obj)

		case "node":

			out.Values[i] = ec._Blob_node(ctx, field, obj)

		case "md":

			out.Values[i] = ec._Blob_md(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Blob_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Blob_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Blob_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Blob_updatedAt(ctx, field, obj)

		case "message":

			out.Values[i] = ec._Blob_message(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blobAggregateResultImplementors = []string{"BlobAggregateResult"}

func (ec *executionContext) _BlobAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.BlobAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blobAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlobAggregateResult")
		case "count":

			out.Values[i] = ec._BlobAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._BlobAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._BlobAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._BlobAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._BlobAggregateResult_updatedAtMax(ctx, field, obj)

		case "messageMin":

			out.Values[i] = ec._BlobAggregateResult_messageMin(ctx, field, obj)

		case "messageMax":

			out.Values[i] = ec._BlobAggregateResult_messageMax(ctx, field, obj)

		case "pushedFlagMin":

			out.Values[i] = ec._BlobAggregateResult_pushedFlagMin(ctx, field, obj)

		case "pushedFlagMax":

			out.Values[i] = ec._BlobAggregateResult_pushedFlagMax(ctx, field, obj)

		case "archivedFlagMin":

			out.Values[i] = ec._BlobAggregateResult_archivedFlagMin(ctx, field, obj)

		case "archivedFlagMax":

			out.Values[i] = ec._BlobAggregateResult_archivedFlagMax(ctx, field, obj)

		case "mdMin":

			out.Values[i] = ec._BlobAggregateResult_mdMin(ctx, field, obj)

		case "mdMax":

			out.Values[i] = ec._BlobAggregateResult_mdMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentImplementors = []string{"Comment"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *model.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "message":

			out.Values[i] = ec._Comment_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reactions":

			out.Values[i] = ec._Comment_reactions(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Comment_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Comment_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Comment_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Comment_updatedAt(ctx, field, obj)

		case "reactionsAggregate":

			out.Values[i] = ec._Comment_reactionsAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentAggregateResultImplementors = []string{"CommentAggregateResult"}

func (ec *executionContext) _CommentAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.CommentAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentAggregateResult")
		case "count":

			out.Values[i] = ec._CommentAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._CommentAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._CommentAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._CommentAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._CommentAggregateResult_updatedAtMax(ctx, field, obj)

		case "messageMin":

			out.Values[i] = ec._CommentAggregateResult_messageMin(ctx, field, obj)

		case "messageMax":

			out.Values[i] = ec._CommentAggregateResult_messageMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractImplementors = []string{"Contract", "EventKind"}

func (ec *executionContext) _Contract(ctx context.Context, sel ast.SelectionSet, obj *model.Contract) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contract")
		case "contractid":

			out.Values[i] = ec._Contract_contractid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tension":

			out.Values[i] = ec._Contract_tension(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._Contract_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contract_type":

			out.Values[i] = ec._Contract_contract_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "closedAt":

			out.Values[i] = ec._Contract_closedAt(ctx, field, obj)

		case "event":

			out.Values[i] = ec._Contract_event(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "participants":

			out.Values[i] = ec._Contract_participants(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "candidates":

			out.Values[i] = ec._Contract_candidates(ctx, field, obj)

		case "pending_candidates":

			out.Values[i] = ec._Contract_pending_candidates(ctx, field, obj)

		case "comments":

			out.Values[i] = ec._Contract_comments(ctx, field, obj)

		case "isValidator":

			out.Values[i] = ec._Contract_isValidator(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Contract_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Contract_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Contract_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Contract_updatedAt(ctx, field, obj)

		case "message":

			out.Values[i] = ec._Contract_message(ctx, field, obj)

		case "participantsAggregate":

			out.Values[i] = ec._Contract_participantsAggregate(ctx, field, obj)

		case "candidatesAggregate":

			out.Values[i] = ec._Contract_candidatesAggregate(ctx, field, obj)

		case "pending_candidatesAggregate":

			out.Values[i] = ec._Contract_pending_candidatesAggregate(ctx, field, obj)

		case "commentsAggregate":

			out.Values[i] = ec._Contract_commentsAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractAggregateResultImplementors = []string{"ContractAggregateResult"}

func (ec *executionContext) _ContractAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.ContractAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContractAggregateResult")
		case "count":

			out.Values[i] = ec._ContractAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._ContractAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._ContractAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._ContractAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._ContractAggregateResult_updatedAtMax(ctx, field, obj)

		case "messageMin":

			out.Values[i] = ec._ContractAggregateResult_messageMin(ctx, field, obj)

		case "messageMax":

			out.Values[i] = ec._ContractAggregateResult_messageMax(ctx, field, obj)

		case "contractidMin":

			out.Values[i] = ec._ContractAggregateResult_contractidMin(ctx, field, obj)

		case "contractidMax":

			out.Values[i] = ec._ContractAggregateResult_contractidMax(ctx, field, obj)

		case "closedAtMin":

			out.Values[i] = ec._ContractAggregateResult_closedAtMin(ctx, field, obj)

		case "closedAtMax":

			out.Values[i] = ec._ContractAggregateResult_closedAtMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteBlobPayloadImplementors = []string{"DeleteBlobPayload"}

func (ec *executionContext) _DeleteBlobPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteBlobPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteBlobPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteBlobPayload")
		case "blob":

			out.Values[i] = ec._DeleteBlobPayload_blob(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteBlobPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteBlobPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteCommentPayloadImplementors = []string{"DeleteCommentPayload"}

func (ec *executionContext) _DeleteCommentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteCommentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteCommentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteCommentPayload")
		case "comment":

			out.Values[i] = ec._DeleteCommentPayload_comment(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteCommentPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteCommentPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteContractPayloadImplementors = []string{"DeleteContractPayload"}

func (ec *executionContext) _DeleteContractPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteContractPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteContractPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteContractPayload")
		case "contract":

			out.Values[i] = ec._DeleteContractPayload_contract(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteContractPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteContractPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteEventCountPayloadImplementors = []string{"DeleteEventCountPayload"}

func (ec *executionContext) _DeleteEventCountPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteEventCountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteEventCountPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteEventCountPayload")
		case "eventCount":

			out.Values[i] = ec._DeleteEventCountPayload_eventCount(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteEventCountPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteEventCountPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteEventFragmentPayloadImplementors = []string{"DeleteEventFragmentPayload"}

func (ec *executionContext) _DeleteEventFragmentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteEventFragmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteEventFragmentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteEventFragmentPayload")
		case "eventFragment":

			out.Values[i] = ec._DeleteEventFragmentPayload_eventFragment(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteEventFragmentPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteEventFragmentPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteEventPayloadImplementors = []string{"DeleteEventPayload"}

func (ec *executionContext) _DeleteEventPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteEventPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteEventPayload")
		case "event":

			out.Values[i] = ec._DeleteEventPayload_event(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteEventPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteEventPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteLabelPayloadImplementors = []string{"DeleteLabelPayload"}

func (ec *executionContext) _DeleteLabelPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteLabelPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteLabelPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteLabelPayload")
		case "label":

			out.Values[i] = ec._DeleteLabelPayload_label(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteLabelPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteLabelPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteMandatePayloadImplementors = []string{"DeleteMandatePayload"}

func (ec *executionContext) _DeleteMandatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMandatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMandatePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMandatePayload")
		case "mandate":

			out.Values[i] = ec._DeleteMandatePayload_mandate(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteMandatePayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteMandatePayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteNodeFragmentPayloadImplementors = []string{"DeleteNodeFragmentPayload"}

func (ec *executionContext) _DeleteNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteNodeFragmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteNodeFragmentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteNodeFragmentPayload")
		case "nodeFragment":

			out.Values[i] = ec._DeleteNodeFragmentPayload_nodeFragment(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteNodeFragmentPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteNodeFragmentPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteNodePayloadImplementors = []string{"DeleteNodePayload"}

func (ec *executionContext) _DeleteNodePayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteNodePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteNodePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteNodePayload")
		case "node":

			out.Values[i] = ec._DeleteNodePayload_node(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteNodePayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteNodePayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteNotifPayloadImplementors = []string{"DeleteNotifPayload"}

func (ec *executionContext) _DeleteNotifPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteNotifPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteNotifPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteNotifPayload")
		case "notif":

			out.Values[i] = ec._DeleteNotifPayload_notif(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteNotifPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteNotifPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteOrgaAggPayloadImplementors = []string{"DeleteOrgaAggPayload"}

func (ec *executionContext) _DeleteOrgaAggPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteOrgaAggPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteOrgaAggPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteOrgaAggPayload")
		case "orgaAgg":

			out.Values[i] = ec._DeleteOrgaAggPayload_orgaAgg(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteOrgaAggPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteOrgaAggPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deletePendingUserPayloadImplementors = []string{"DeletePendingUserPayload"}

func (ec *executionContext) _DeletePendingUserPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePendingUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePendingUserPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePendingUserPayload")
		case "pendingUser":

			out.Values[i] = ec._DeletePendingUserPayload_pendingUser(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeletePendingUserPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeletePendingUserPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deletePostPayloadImplementors = []string{"DeletePostPayload"}

func (ec *executionContext) _DeletePostPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePostPayload")
		case "post":

			out.Values[i] = ec._DeletePostPayload_post(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeletePostPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeletePostPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProjectColumnPayloadImplementors = []string{"DeleteProjectColumnPayload"}

func (ec *executionContext) _DeleteProjectColumnPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteProjectColumnPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProjectColumnPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProjectColumnPayload")
		case "projectColumn":

			out.Values[i] = ec._DeleteProjectColumnPayload_projectColumn(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteProjectColumnPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteProjectColumnPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProjectPayloadImplementors = []string{"DeleteProjectPayload"}

func (ec *executionContext) _DeleteProjectPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteProjectPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProjectPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProjectPayload")
		case "project":

			out.Values[i] = ec._DeleteProjectPayload_project(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteProjectPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteProjectPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProjectTensionPayloadImplementors = []string{"DeleteProjectTensionPayload"}

func (ec *executionContext) _DeleteProjectTensionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteProjectTensionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProjectTensionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProjectTensionPayload")
		case "projectTension":

			out.Values[i] = ec._DeleteProjectTensionPayload_projectTension(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteProjectTensionPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteProjectTensionPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteReactionPayloadImplementors = []string{"DeleteReactionPayload"}

func (ec *executionContext) _DeleteReactionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteReactionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteReactionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteReactionPayload")
		case "reaction":

			out.Values[i] = ec._DeleteReactionPayload_reaction(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteReactionPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteReactionPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteRoleExtPayloadImplementors = []string{"DeleteRoleExtPayload"}

func (ec *executionContext) _DeleteRoleExtPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteRoleExtPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteRoleExtPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteRoleExtPayload")
		case "roleExt":

			out.Values[i] = ec._DeleteRoleExtPayload_roleExt(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteRoleExtPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteRoleExtPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteTensionPayloadImplementors = []string{"DeleteTensionPayload"}

func (ec *executionContext) _DeleteTensionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteTensionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteTensionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteTensionPayload")
		case "tension":

			out.Values[i] = ec._DeleteTensionPayload_tension(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteTensionPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteTensionPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteUserEventPayloadImplementors = []string{"DeleteUserEventPayload"}

func (ec *executionContext) _DeleteUserEventPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteUserEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteUserEventPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteUserEventPayload")
		case "userEvent":

			out.Values[i] = ec._DeleteUserEventPayload_userEvent(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteUserEventPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteUserEventPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteUserPayloadImplementors = []string{"DeleteUserPayload"}

func (ec *executionContext) _DeleteUserPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteUserPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteUserPayload")
		case "user":

			out.Values[i] = ec._DeleteUserPayload_user(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteUserPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteUserPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteUserRightsPayloadImplementors = []string{"DeleteUserRightsPayload"}

func (ec *executionContext) _DeleteUserRightsPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteUserRightsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteUserRightsPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteUserRightsPayload")
		case "userRights":

			out.Values[i] = ec._DeleteUserRightsPayload_userRights(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteUserRightsPayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteUserRightsPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteVotePayloadImplementors = []string{"DeleteVotePayload"}

func (ec *executionContext) _DeleteVotePayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteVotePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteVotePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteVotePayload")
		case "vote":

			out.Values[i] = ec._DeleteVotePayload_vote(ctx, field, obj)

		case "msg":

			out.Values[i] = ec._DeleteVotePayload_msg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._DeleteVotePayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventImplementors = []string{"Event", "EventKind"}

func (ec *executionContext) _Event(ctx context.Context, sel ast.SelectionSet, obj *model.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Event")
		case "tension":

			out.Values[i] = ec._Event_tension(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "event_type":

			out.Values[i] = ec._Event_event_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mentioned":

			out.Values[i] = ec._Event_mentioned(ctx, field, obj)

		case "old":

			out.Values[i] = ec._Event_old(ctx, field, obj)

		case "new":

			out.Values[i] = ec._Event_new(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Event_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Event_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Event_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Event_updatedAt(ctx, field, obj)

		case "message":

			out.Values[i] = ec._Event_message(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventAggregateResultImplementors = []string{"EventAggregateResult"}

func (ec *executionContext) _EventAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.EventAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventAggregateResult")
		case "count":

			out.Values[i] = ec._EventAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._EventAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._EventAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._EventAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._EventAggregateResult_updatedAtMax(ctx, field, obj)

		case "messageMin":

			out.Values[i] = ec._EventAggregateResult_messageMin(ctx, field, obj)

		case "messageMax":

			out.Values[i] = ec._EventAggregateResult_messageMax(ctx, field, obj)

		case "oldMin":

			out.Values[i] = ec._EventAggregateResult_oldMin(ctx, field, obj)

		case "oldMax":

			out.Values[i] = ec._EventAggregateResult_oldMax(ctx, field, obj)

		case "newMin":

			out.Values[i] = ec._EventAggregateResult_newMin(ctx, field, obj)

		case "newMax":

			out.Values[i] = ec._EventAggregateResult_newMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventCountImplementors = []string{"EventCount"}

func (ec *executionContext) _EventCount(ctx context.Context, sel ast.SelectionSet, obj *model.EventCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventCountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventCount")
		case "unread_events":

			out.Values[i] = ec._EventCount_unread_events(ctx, field, obj)

		case "pending_contracts":

			out.Values[i] = ec._EventCount_pending_contracts(ctx, field, obj)

		case "assigned_tensions":

			out.Values[i] = ec._EventCount_assigned_tensions(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventCountAggregateResultImplementors = []string{"EventCountAggregateResult"}

func (ec *executionContext) _EventCountAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.EventCountAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventCountAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventCountAggregateResult")
		case "count":

			out.Values[i] = ec._EventCountAggregateResult_count(ctx, field, obj)

		case "unread_eventsMin":

			out.Values[i] = ec._EventCountAggregateResult_unread_eventsMin(ctx, field, obj)

		case "unread_eventsMax":

			out.Values[i] = ec._EventCountAggregateResult_unread_eventsMax(ctx, field, obj)

		case "unread_eventsSum":

			out.Values[i] = ec._EventCountAggregateResult_unread_eventsSum(ctx, field, obj)

		case "unread_eventsAvg":

			out.Values[i] = ec._EventCountAggregateResult_unread_eventsAvg(ctx, field, obj)

		case "pending_contractsMin":

			out.Values[i] = ec._EventCountAggregateResult_pending_contractsMin(ctx, field, obj)

		case "pending_contractsMax":

			out.Values[i] = ec._EventCountAggregateResult_pending_contractsMax(ctx, field, obj)

		case "pending_contractsSum":

			out.Values[i] = ec._EventCountAggregateResult_pending_contractsSum(ctx, field, obj)

		case "pending_contractsAvg":

			out.Values[i] = ec._EventCountAggregateResult_pending_contractsAvg(ctx, field, obj)

		case "assigned_tensionsMin":

			out.Values[i] = ec._EventCountAggregateResult_assigned_tensionsMin(ctx, field, obj)

		case "assigned_tensionsMax":

			out.Values[i] = ec._EventCountAggregateResult_assigned_tensionsMax(ctx, field, obj)

		case "assigned_tensionsSum":

			out.Values[i] = ec._EventCountAggregateResult_assigned_tensionsSum(ctx, field, obj)

		case "assigned_tensionsAvg":

			out.Values[i] = ec._EventCountAggregateResult_assigned_tensionsAvg(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventFragmentImplementors = []string{"EventFragment"}

func (ec *executionContext) _EventFragment(ctx context.Context, sel ast.SelectionSet, obj *model.EventFragment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventFragmentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventFragment")
		case "event_type":

			out.Values[i] = ec._EventFragment_event_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "old":

			out.Values[i] = ec._EventFragment_old(ctx, field, obj)

		case "new":

			out.Values[i] = ec._EventFragment_new(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventFragmentAggregateResultImplementors = []string{"EventFragmentAggregateResult"}

func (ec *executionContext) _EventFragmentAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.EventFragmentAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventFragmentAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventFragmentAggregateResult")
		case "count":

			out.Values[i] = ec._EventFragmentAggregateResult_count(ctx, field, obj)

		case "oldMin":

			out.Values[i] = ec._EventFragmentAggregateResult_oldMin(ctx, field, obj)

		case "oldMax":

			out.Values[i] = ec._EventFragmentAggregateResult_oldMax(ctx, field, obj)

		case "newMin":

			out.Values[i] = ec._EventFragmentAggregateResult_newMin(ctx, field, obj)

		case "newMax":

			out.Values[i] = ec._EventFragmentAggregateResult_newMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var labelImplementors = []string{"Label"}

func (ec *executionContext) _Label(ctx context.Context, sel ast.SelectionSet, obj *model.Label) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, labelImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Label")
		case "id":

			out.Values[i] = ec._Label_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rootnameid":

			out.Values[i] = ec._Label_rootnameid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Label_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Label_description(ctx, field, obj)

		case "color":

			out.Values[i] = ec._Label_color(ctx, field, obj)

		case "tensions":

			out.Values[i] = ec._Label_tensions(ctx, field, obj)

		case "nodes":

			out.Values[i] = ec._Label_nodes(ctx, field, obj)

		case "tensionsAggregate":

			out.Values[i] = ec._Label_tensionsAggregate(ctx, field, obj)

		case "nodesAggregate":

			out.Values[i] = ec._Label_nodesAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var labelAggregateResultImplementors = []string{"LabelAggregateResult"}

func (ec *executionContext) _LabelAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.LabelAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, labelAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LabelAggregateResult")
		case "count":

			out.Values[i] = ec._LabelAggregateResult_count(ctx, field, obj)

		case "rootnameidMin":

			out.Values[i] = ec._LabelAggregateResult_rootnameidMin(ctx, field, obj)

		case "rootnameidMax":

			out.Values[i] = ec._LabelAggregateResult_rootnameidMax(ctx, field, obj)

		case "nameMin":

			out.Values[i] = ec._LabelAggregateResult_nameMin(ctx, field, obj)

		case "nameMax":

			out.Values[i] = ec._LabelAggregateResult_nameMax(ctx, field, obj)

		case "descriptionMin":

			out.Values[i] = ec._LabelAggregateResult_descriptionMin(ctx, field, obj)

		case "descriptionMax":

			out.Values[i] = ec._LabelAggregateResult_descriptionMax(ctx, field, obj)

		case "colorMin":

			out.Values[i] = ec._LabelAggregateResult_colorMin(ctx, field, obj)

		case "colorMax":

			out.Values[i] = ec._LabelAggregateResult_colorMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mandateImplementors = []string{"Mandate"}

func (ec *executionContext) _Mandate(ctx context.Context, sel ast.SelectionSet, obj *model.Mandate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mandateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mandate")
		case "id":

			out.Values[i] = ec._Mandate_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purpose":

			out.Values[i] = ec._Mandate_purpose(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "responsabilities":

			out.Values[i] = ec._Mandate_responsabilities(ctx, field, obj)

		case "domains":

			out.Values[i] = ec._Mandate_domains(ctx, field, obj)

		case "policies":

			out.Values[i] = ec._Mandate_policies(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mandateAggregateResultImplementors = []string{"MandateAggregateResult"}

func (ec *executionContext) _MandateAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.MandateAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mandateAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MandateAggregateResult")
		case "count":

			out.Values[i] = ec._MandateAggregateResult_count(ctx, field, obj)

		case "purposeMin":

			out.Values[i] = ec._MandateAggregateResult_purposeMin(ctx, field, obj)

		case "purposeMax":

			out.Values[i] = ec._MandateAggregateResult_purposeMax(ctx, field, obj)

		case "responsabilitiesMin":

			out.Values[i] = ec._MandateAggregateResult_responsabilitiesMin(ctx, field, obj)

		case "responsabilitiesMax":

			out.Values[i] = ec._MandateAggregateResult_responsabilitiesMax(ctx, field, obj)

		case "domainsMin":

			out.Values[i] = ec._MandateAggregateResult_domainsMin(ctx, field, obj)

		case "domainsMax":

			out.Values[i] = ec._MandateAggregateResult_domainsMax(ctx, field, obj)

		case "policiesMin":

			out.Values[i] = ec._MandateAggregateResult_policiesMin(ctx, field, obj)

		case "policiesMax":

			out.Values[i] = ec._MandateAggregateResult_policiesMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var multiPolygonImplementors = []string{"MultiPolygon"}

func (ec *executionContext) _MultiPolygon(ctx context.Context, sel ast.SelectionSet, obj *model.MultiPolygon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, multiPolygonImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MultiPolygon")
		case "polygons":

			out.Values[i] = ec._MultiPolygon_polygons(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "addNode":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addNode(ctx, field)
			})

		case "updateNode":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateNode(ctx, field)
			})

		case "deleteNode":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteNode(ctx, field)
			})

		case "addNodeFragment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addNodeFragment(ctx, field)
			})

		case "updateNodeFragment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateNodeFragment(ctx, field)
			})

		case "deleteNodeFragment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteNodeFragment(ctx, field)
			})

		case "addMandate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addMandate(ctx, field)
			})

		case "updateMandate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMandate(ctx, field)
			})

		case "deleteMandate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMandate(ctx, field)
			})

		case "addLabel":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addLabel(ctx, field)
			})

		case "updateLabel":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLabel(ctx, field)
			})

		case "deleteLabel":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLabel(ctx, field)
			})

		case "addRoleExt":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addRoleExt(ctx, field)
			})

		case "updateRoleExt":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRoleExt(ctx, field)
			})

		case "deleteRoleExt":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteRoleExt(ctx, field)
			})

		case "addProject":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addProject(ctx, field)
			})

		case "updateProject":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProject(ctx, field)
			})

		case "deleteProject":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProject(ctx, field)
			})

		case "addProjectTension":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addProjectTension(ctx, field)
			})

		case "updateProjectTension":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProjectTension(ctx, field)
			})

		case "deleteProjectTension":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProjectTension(ctx, field)
			})

		case "addProjectColumn":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addProjectColumn(ctx, field)
			})

		case "updateProjectColumn":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProjectColumn(ctx, field)
			})

		case "deleteProjectColumn":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProjectColumn(ctx, field)
			})

		case "addOrgaAgg":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addOrgaAgg(ctx, field)
			})

		case "updateOrgaAgg":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOrgaAgg(ctx, field)
			})

		case "deleteOrgaAgg":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteOrgaAgg(ctx, field)
			})

		case "updatePost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePost(ctx, field)
			})

		case "deletePost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePost(ctx, field)
			})

		case "addTension":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addTension(ctx, field)
			})

		case "updateTension":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTension(ctx, field)
			})

		case "deleteTension":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTension(ctx, field)
			})

		case "addComment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addComment(ctx, field)
			})

		case "updateComment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateComment(ctx, field)
			})

		case "deleteComment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteComment(ctx, field)
			})

		case "addReaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addReaction(ctx, field)
			})

		case "updateReaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateReaction(ctx, field)
			})

		case "deleteReaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteReaction(ctx, field)
			})

		case "addBlob":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addBlob(ctx, field)
			})

		case "updateBlob":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateBlob(ctx, field)
			})

		case "deleteBlob":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteBlob(ctx, field)
			})

		case "addEvent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addEvent(ctx, field)
			})

		case "updateEvent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEvent(ctx, field)
			})

		case "deleteEvent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEvent(ctx, field)
			})

		case "addEventFragment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addEventFragment(ctx, field)
			})

		case "updateEventFragment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEventFragment(ctx, field)
			})

		case "deleteEventFragment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEventFragment(ctx, field)
			})

		case "addContract":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addContract(ctx, field)
			})

		case "updateContract":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateContract(ctx, field)
			})

		case "deleteContract":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteContract(ctx, field)
			})

		case "addVote":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addVote(ctx, field)
			})

		case "updateVote":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateVote(ctx, field)
			})

		case "deleteVote":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteVote(ctx, field)
			})

		case "addUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUser(ctx, field)
			})

		case "updateUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})

		case "deleteUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUser(ctx, field)
			})

		case "addPendingUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addPendingUser(ctx, field)
			})

		case "updatePendingUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePendingUser(ctx, field)
			})

		case "deletePendingUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePendingUser(ctx, field)
			})

		case "addUserRights":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserRights(ctx, field)
			})

		case "updateUserRights":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserRights(ctx, field)
			})

		case "deleteUserRights":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserRights(ctx, field)
			})

		case "addUserEvent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserEvent(ctx, field)
			})

		case "updateUserEvent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserEvent(ctx, field)
			})

		case "deleteUserEvent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserEvent(ctx, field)
			})

		case "addNotif":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addNotif(ctx, field)
			})

		case "updateNotif":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateNotif(ctx, field)
			})

		case "deleteNotif":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteNotif(ctx, field)
			})

		case "addEventCount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addEventCount(ctx, field)
			})

		case "updateEventCount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEventCount(ctx, field)
			})

		case "deleteEventCount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEventCount(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nodeImplementors = []string{"Node"}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj *model.Node) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nodeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Node")
		case "id":

			out.Values[i] = ec._Node_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Node_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Node_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Node_updatedAt(ctx, field, obj)

		case "nameid":

			out.Values[i] = ec._Node_nameid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rootnameid":

			out.Values[i] = ec._Node_rootnameid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "source":

			out.Values[i] = ec._Node_source(ctx, field, obj)

		case "name":

			out.Values[i] = ec._Node_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "about":

			out.Values[i] = ec._Node_about(ctx, field, obj)

		case "skills":

			out.Values[i] = ec._Node_skills(ctx, field, obj)

		case "isRoot":

			out.Values[i] = ec._Node_isRoot(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent":

			out.Values[i] = ec._Node_parent(ctx, field, obj)

		case "type_":

			out.Values[i] = ec._Node_type_(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tensions_out":

			out.Values[i] = ec._Node_tensions_out(ctx, field, obj)

		case "tensions_in":

			out.Values[i] = ec._Node_tensions_in(ctx, field, obj)

		case "visibility":

			out.Values[i] = ec._Node_visibility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mode":

			out.Values[i] = ec._Node_mode(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rights":

			out.Values[i] = ec._Node_rights(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isArchived":

			out.Values[i] = ec._Node_isArchived(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPersonal":

			out.Values[i] = ec._Node_isPersonal(ctx, field, obj)

		case "userCanJoin":

			out.Values[i] = ec._Node_userCanJoin(ctx, field, obj)

		case "guestCanCreateTension":

			out.Values[i] = ec._Node_guestCanCreateTension(ctx, field, obj)

		case "watchers":

			out.Values[i] = ec._Node_watchers(ctx, field, obj)

		case "children":

			out.Values[i] = ec._Node_children(ctx, field, obj)

		case "labels":

			out.Values[i] = ec._Node_labels(ctx, field, obj)

		case "roles":

			out.Values[i] = ec._Node_roles(ctx, field, obj)

		case "projects":

			out.Values[i] = ec._Node_projects(ctx, field, obj)

		case "pinned":

			out.Values[i] = ec._Node_pinned(ctx, field, obj)

		case "role_ext":

			out.Values[i] = ec._Node_role_ext(ctx, field, obj)

		case "role_type":

			out.Values[i] = ec._Node_role_type(ctx, field, obj)

		case "color":

			out.Values[i] = ec._Node_color(ctx, field, obj)

		case "first_link":

			out.Values[i] = ec._Node_first_link(ctx, field, obj)

		case "second_link":

			out.Values[i] = ec._Node_second_link(ctx, field, obj)

		case "contracts":

			out.Values[i] = ec._Node_contracts(ctx, field, obj)

		case "orga_agg":

			out.Values[i] = ec._Node_orga_agg(ctx, field, obj)

		case "events_history":

			out.Values[i] = ec._Node_events_history(ctx, field, obj)

		case "n_open_contracts":

			out.Values[i] = ec._Node_n_open_contracts(ctx, field, obj)

		case "tensions_outAggregate":

			out.Values[i] = ec._Node_tensions_outAggregate(ctx, field, obj)

		case "tensions_inAggregate":

			out.Values[i] = ec._Node_tensions_inAggregate(ctx, field, obj)

		case "watchersAggregate":

			out.Values[i] = ec._Node_watchersAggregate(ctx, field, obj)

		case "childrenAggregate":

			out.Values[i] = ec._Node_childrenAggregate(ctx, field, obj)

		case "labelsAggregate":

			out.Values[i] = ec._Node_labelsAggregate(ctx, field, obj)

		case "rolesAggregate":

			out.Values[i] = ec._Node_rolesAggregate(ctx, field, obj)

		case "projectsAggregate":

			out.Values[i] = ec._Node_projectsAggregate(ctx, field, obj)

		case "pinnedAggregate":

			out.Values[i] = ec._Node_pinnedAggregate(ctx, field, obj)

		case "contractsAggregate":

			out.Values[i] = ec._Node_contractsAggregate(ctx, field, obj)

		case "events_historyAggregate":

			out.Values[i] = ec._Node_events_historyAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nodeAggregateResultImplementors = []string{"NodeAggregateResult"}

func (ec *executionContext) _NodeAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.NodeAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nodeAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NodeAggregateResult")
		case "count":

			out.Values[i] = ec._NodeAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._NodeAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._NodeAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._NodeAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._NodeAggregateResult_updatedAtMax(ctx, field, obj)

		case "nameidMin":

			out.Values[i] = ec._NodeAggregateResult_nameidMin(ctx, field, obj)

		case "nameidMax":

			out.Values[i] = ec._NodeAggregateResult_nameidMax(ctx, field, obj)

		case "rootnameidMin":

			out.Values[i] = ec._NodeAggregateResult_rootnameidMin(ctx, field, obj)

		case "rootnameidMax":

			out.Values[i] = ec._NodeAggregateResult_rootnameidMax(ctx, field, obj)

		case "nameMin":

			out.Values[i] = ec._NodeAggregateResult_nameMin(ctx, field, obj)

		case "nameMax":

			out.Values[i] = ec._NodeAggregateResult_nameMax(ctx, field, obj)

		case "aboutMin":

			out.Values[i] = ec._NodeAggregateResult_aboutMin(ctx, field, obj)

		case "aboutMax":

			out.Values[i] = ec._NodeAggregateResult_aboutMax(ctx, field, obj)

		case "rightsMin":

			out.Values[i] = ec._NodeAggregateResult_rightsMin(ctx, field, obj)

		case "rightsMax":

			out.Values[i] = ec._NodeAggregateResult_rightsMax(ctx, field, obj)

		case "rightsSum":

			out.Values[i] = ec._NodeAggregateResult_rightsSum(ctx, field, obj)

		case "rightsAvg":

			out.Values[i] = ec._NodeAggregateResult_rightsAvg(ctx, field, obj)

		case "colorMin":

			out.Values[i] = ec._NodeAggregateResult_colorMin(ctx, field, obj)

		case "colorMax":

			out.Values[i] = ec._NodeAggregateResult_colorMax(ctx, field, obj)

		case "n_open_contractsMin":

			out.Values[i] = ec._NodeAggregateResult_n_open_contractsMin(ctx, field, obj)

		case "n_open_contractsMax":

			out.Values[i] = ec._NodeAggregateResult_n_open_contractsMax(ctx, field, obj)

		case "n_open_contractsSum":

			out.Values[i] = ec._NodeAggregateResult_n_open_contractsSum(ctx, field, obj)

		case "n_open_contractsAvg":

			out.Values[i] = ec._NodeAggregateResult_n_open_contractsAvg(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nodeFragmentImplementors = []string{"NodeFragment"}

func (ec *executionContext) _NodeFragment(ctx context.Context, sel ast.SelectionSet, obj *model.NodeFragment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nodeFragmentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NodeFragment")
		case "id":

			out.Values[i] = ec._NodeFragment_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nameid":

			out.Values[i] = ec._NodeFragment_nameid(ctx, field, obj)

		case "name":

			out.Values[i] = ec._NodeFragment_name(ctx, field, obj)

		case "about":

			out.Values[i] = ec._NodeFragment_about(ctx, field, obj)

		case "mandate":

			out.Values[i] = ec._NodeFragment_mandate(ctx, field, obj)

		case "skills":

			out.Values[i] = ec._NodeFragment_skills(ctx, field, obj)

		case "visibility":

			out.Values[i] = ec._NodeFragment_visibility(ctx, field, obj)

		case "mode":

			out.Values[i] = ec._NodeFragment_mode(ctx, field, obj)

		case "type_":

			out.Values[i] = ec._NodeFragment_type_(ctx, field, obj)

		case "first_link":

			out.Values[i] = ec._NodeFragment_first_link(ctx, field, obj)

		case "second_link":

			out.Values[i] = ec._NodeFragment_second_link(ctx, field, obj)

		case "role_ext":

			out.Values[i] = ec._NodeFragment_role_ext(ctx, field, obj)

		case "role_type":

			out.Values[i] = ec._NodeFragment_role_type(ctx, field, obj)

		case "color":

			out.Values[i] = ec._NodeFragment_color(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nodeFragmentAggregateResultImplementors = []string{"NodeFragmentAggregateResult"}

func (ec *executionContext) _NodeFragmentAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.NodeFragmentAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nodeFragmentAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NodeFragmentAggregateResult")
		case "count":

			out.Values[i] = ec._NodeFragmentAggregateResult_count(ctx, field, obj)

		case "nameidMin":

			out.Values[i] = ec._NodeFragmentAggregateResult_nameidMin(ctx, field, obj)

		case "nameidMax":

			out.Values[i] = ec._NodeFragmentAggregateResult_nameidMax(ctx, field, obj)

		case "nameMin":

			out.Values[i] = ec._NodeFragmentAggregateResult_nameMin(ctx, field, obj)

		case "nameMax":

			out.Values[i] = ec._NodeFragmentAggregateResult_nameMax(ctx, field, obj)

		case "aboutMin":

			out.Values[i] = ec._NodeFragmentAggregateResult_aboutMin(ctx, field, obj)

		case "aboutMax":

			out.Values[i] = ec._NodeFragmentAggregateResult_aboutMax(ctx, field, obj)

		case "first_linkMin":

			out.Values[i] = ec._NodeFragmentAggregateResult_first_linkMin(ctx, field, obj)

		case "first_linkMax":

			out.Values[i] = ec._NodeFragmentAggregateResult_first_linkMax(ctx, field, obj)

		case "second_linkMin":

			out.Values[i] = ec._NodeFragmentAggregateResult_second_linkMin(ctx, field, obj)

		case "second_linkMax":

			out.Values[i] = ec._NodeFragmentAggregateResult_second_linkMax(ctx, field, obj)

		case "role_extMin":

			out.Values[i] = ec._NodeFragmentAggregateResult_role_extMin(ctx, field, obj)

		case "role_extMax":

			out.Values[i] = ec._NodeFragmentAggregateResult_role_extMax(ctx, field, obj)

		case "colorMin":

			out.Values[i] = ec._NodeFragmentAggregateResult_colorMin(ctx, field, obj)

		case "colorMax":

			out.Values[i] = ec._NodeFragmentAggregateResult_colorMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notifImplementors = []string{"Notif", "EventKind"}

func (ec *executionContext) _Notif(ctx context.Context, sel ast.SelectionSet, obj *model.Notif) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notifImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Notif")
		case "tension_":

			out.Values[i] = ec._Notif_tension_(ctx, field, obj)

		case "contract":

			out.Values[i] = ec._Notif_contract(ctx, field, obj)

		case "link":

			out.Values[i] = ec._Notif_link(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Notif_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Notif_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Notif_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Notif_updatedAt(ctx, field, obj)

		case "message":

			out.Values[i] = ec._Notif_message(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notifAggregateResultImplementors = []string{"NotifAggregateResult"}

func (ec *executionContext) _NotifAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.NotifAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notifAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotifAggregateResult")
		case "count":

			out.Values[i] = ec._NotifAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._NotifAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._NotifAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._NotifAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._NotifAggregateResult_updatedAtMax(ctx, field, obj)

		case "messageMin":

			out.Values[i] = ec._NotifAggregateResult_messageMin(ctx, field, obj)

		case "messageMax":

			out.Values[i] = ec._NotifAggregateResult_messageMax(ctx, field, obj)

		case "linkMin":

			out.Values[i] = ec._NotifAggregateResult_linkMin(ctx, field, obj)

		case "linkMax":

			out.Values[i] = ec._NotifAggregateResult_linkMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgaAggImplementors = []string{"OrgaAgg"}

func (ec *executionContext) _OrgaAgg(ctx context.Context, sel ast.SelectionSet, obj *model.OrgaAgg) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgaAggImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgaAgg")
		case "n_members":

			out.Values[i] = ec._OrgaAgg_n_members(ctx, field, obj)

		case "n_guests":

			out.Values[i] = ec._OrgaAgg_n_guests(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgaAggAggregateResultImplementors = []string{"OrgaAggAggregateResult"}

func (ec *executionContext) _OrgaAggAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.OrgaAggAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgaAggAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgaAggAggregateResult")
		case "count":

			out.Values[i] = ec._OrgaAggAggregateResult_count(ctx, field, obj)

		case "n_membersMin":

			out.Values[i] = ec._OrgaAggAggregateResult_n_membersMin(ctx, field, obj)

		case "n_membersMax":

			out.Values[i] = ec._OrgaAggAggregateResult_n_membersMax(ctx, field, obj)

		case "n_membersSum":

			out.Values[i] = ec._OrgaAggAggregateResult_n_membersSum(ctx, field, obj)

		case "n_membersAvg":

			out.Values[i] = ec._OrgaAggAggregateResult_n_membersAvg(ctx, field, obj)

		case "n_guestsMin":

			out.Values[i] = ec._OrgaAggAggregateResult_n_guestsMin(ctx, field, obj)

		case "n_guestsMax":

			out.Values[i] = ec._OrgaAggAggregateResult_n_guestsMax(ctx, field, obj)

		case "n_guestsSum":

			out.Values[i] = ec._OrgaAggAggregateResult_n_guestsSum(ctx, field, obj)

		case "n_guestsAvg":

			out.Values[i] = ec._OrgaAggAggregateResult_n_guestsAvg(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pendingUserImplementors = []string{"PendingUser"}

func (ec *executionContext) _PendingUser(ctx context.Context, sel ast.SelectionSet, obj *model.PendingUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pendingUserImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PendingUser")
		case "id":

			out.Values[i] = ec._PendingUser_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._PendingUser_updatedAt(ctx, field, obj)

		case "username":

			out.Values[i] = ec._PendingUser_username(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "password":

			out.Values[i] = ec._PendingUser_password(ctx, field, obj)

		case "email":

			out.Values[i] = ec._PendingUser_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email_token":

			out.Values[i] = ec._PendingUser_email_token(ctx, field, obj)

		case "token":

			out.Values[i] = ec._PendingUser_token(ctx, field, obj)

		case "contracts":

			out.Values[i] = ec._PendingUser_contracts(ctx, field, obj)

		case "subscribe":

			out.Values[i] = ec._PendingUser_subscribe(ctx, field, obj)

		case "contractsAggregate":

			out.Values[i] = ec._PendingUser_contractsAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pendingUserAggregateResultImplementors = []string{"PendingUserAggregateResult"}

func (ec *executionContext) _PendingUserAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.PendingUserAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pendingUserAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PendingUserAggregateResult")
		case "count":

			out.Values[i] = ec._PendingUserAggregateResult_count(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._PendingUserAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._PendingUserAggregateResult_updatedAtMax(ctx, field, obj)

		case "usernameMin":

			out.Values[i] = ec._PendingUserAggregateResult_usernameMin(ctx, field, obj)

		case "usernameMax":

			out.Values[i] = ec._PendingUserAggregateResult_usernameMax(ctx, field, obj)

		case "passwordMin":

			out.Values[i] = ec._PendingUserAggregateResult_passwordMin(ctx, field, obj)

		case "passwordMax":

			out.Values[i] = ec._PendingUserAggregateResult_passwordMax(ctx, field, obj)

		case "emailMin":

			out.Values[i] = ec._PendingUserAggregateResult_emailMin(ctx, field, obj)

		case "emailMax":

			out.Values[i] = ec._PendingUserAggregateResult_emailMax(ctx, field, obj)

		case "email_tokenMin":

			out.Values[i] = ec._PendingUserAggregateResult_email_tokenMin(ctx, field, obj)

		case "email_tokenMax":

			out.Values[i] = ec._PendingUserAggregateResult_email_tokenMax(ctx, field, obj)

		case "tokenMin":

			out.Values[i] = ec._PendingUserAggregateResult_tokenMin(ctx, field, obj)

		case "tokenMax":

			out.Values[i] = ec._PendingUserAggregateResult_tokenMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pointImplementors = []string{"Point"}

func (ec *executionContext) _Point(ctx context.Context, sel ast.SelectionSet, obj *model.Point) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pointImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Point")
		case "longitude":

			out.Values[i] = ec._Point_longitude(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "latitude":

			out.Values[i] = ec._Point_latitude(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pointListImplementors = []string{"PointList"}

func (ec *executionContext) _PointList(ctx context.Context, sel ast.SelectionSet, obj *model.PointList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pointListImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PointList")
		case "points":

			out.Values[i] = ec._PointList_points(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var polygonImplementors = []string{"Polygon"}

func (ec *executionContext) _Polygon(ctx context.Context, sel ast.SelectionSet, obj *model.Polygon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, polygonImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Polygon")
		case "coordinates":

			out.Values[i] = ec._Polygon_coordinates(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postImplementors = []string{"Post"}

func (ec *executionContext) _Post(ctx context.Context, sel ast.SelectionSet, obj *model.Post) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Post")
		case "id":

			out.Values[i] = ec._Post_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Post_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Post_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Post_updatedAt(ctx, field, obj)

		case "message":

			out.Values[i] = ec._Post_message(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postAggregateResultImplementors = []string{"PostAggregateResult"}

func (ec *executionContext) _PostAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.PostAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostAggregateResult")
		case "count":

			out.Values[i] = ec._PostAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._PostAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._PostAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._PostAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._PostAggregateResult_updatedAtMax(ctx, field, obj)

		case "messageMin":

			out.Values[i] = ec._PostAggregateResult_messageMin(ctx, field, obj)

		case "messageMax":

			out.Values[i] = ec._PostAggregateResult_messageMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectImplementors = []string{"Project"}

func (ec *executionContext) _Project(ctx context.Context, sel ast.SelectionSet, obj *model.Project) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Project")
		case "id":

			out.Values[i] = ec._Project_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Project_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Project_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Project_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rootnameid":

			out.Values[i] = ec._Project_rootnameid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentnameid":

			out.Values[i] = ec._Project_parentnameid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nameid":

			out.Values[i] = ec._Project_nameid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Project_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Project_description(ctx, field, obj)

		case "status":

			out.Values[i] = ec._Project_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "columns":

			out.Values[i] = ec._Project_columns(ctx, field, obj)

		case "leaders":

			out.Values[i] = ec._Project_leaders(ctx, field, obj)

		case "nodes":

			out.Values[i] = ec._Project_nodes(ctx, field, obj)

		case "columnsAggregate":

			out.Values[i] = ec._Project_columnsAggregate(ctx, field, obj)

		case "leadersAggregate":

			out.Values[i] = ec._Project_leadersAggregate(ctx, field, obj)

		case "nodesAggregate":

			out.Values[i] = ec._Project_nodesAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectAggregateResultImplementors = []string{"ProjectAggregateResult"}

func (ec *executionContext) _ProjectAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectAggregateResult")
		case "count":

			out.Values[i] = ec._ProjectAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._ProjectAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._ProjectAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._ProjectAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._ProjectAggregateResult_updatedAtMax(ctx, field, obj)

		case "rootnameidMin":

			out.Values[i] = ec._ProjectAggregateResult_rootnameidMin(ctx, field, obj)

		case "rootnameidMax":

			out.Values[i] = ec._ProjectAggregateResult_rootnameidMax(ctx, field, obj)

		case "parentnameidMin":

			out.Values[i] = ec._ProjectAggregateResult_parentnameidMin(ctx, field, obj)

		case "parentnameidMax":

			out.Values[i] = ec._ProjectAggregateResult_parentnameidMax(ctx, field, obj)

		case "nameidMin":

			out.Values[i] = ec._ProjectAggregateResult_nameidMin(ctx, field, obj)

		case "nameidMax":

			out.Values[i] = ec._ProjectAggregateResult_nameidMax(ctx, field, obj)

		case "nameMin":

			out.Values[i] = ec._ProjectAggregateResult_nameMin(ctx, field, obj)

		case "nameMax":

			out.Values[i] = ec._ProjectAggregateResult_nameMax(ctx, field, obj)

		case "descriptionMin":

			out.Values[i] = ec._ProjectAggregateResult_descriptionMin(ctx, field, obj)

		case "descriptionMax":

			out.Values[i] = ec._ProjectAggregateResult_descriptionMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectColumnImplementors = []string{"ProjectColumn"}

func (ec *executionContext) _ProjectColumn(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectColumn) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectColumnImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectColumn")
		case "id":

			out.Values[i] = ec._ProjectColumn_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._ProjectColumn_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "about":

			out.Values[i] = ec._ProjectColumn_about(ctx, field, obj)

		case "pos":

			out.Values[i] = ec._ProjectColumn_pos(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tensions":

			out.Values[i] = ec._ProjectColumn_tensions(ctx, field, obj)

		case "project":

			out.Values[i] = ec._ProjectColumn_project(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tensionsAggregate":

			out.Values[i] = ec._ProjectColumn_tensionsAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectColumnAggregateResultImplementors = []string{"ProjectColumnAggregateResult"}

func (ec *executionContext) _ProjectColumnAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectColumnAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectColumnAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectColumnAggregateResult")
		case "count":

			out.Values[i] = ec._ProjectColumnAggregateResult_count(ctx, field, obj)

		case "nameMin":

			out.Values[i] = ec._ProjectColumnAggregateResult_nameMin(ctx, field, obj)

		case "nameMax":

			out.Values[i] = ec._ProjectColumnAggregateResult_nameMax(ctx, field, obj)

		case "aboutMin":

			out.Values[i] = ec._ProjectColumnAggregateResult_aboutMin(ctx, field, obj)

		case "aboutMax":

			out.Values[i] = ec._ProjectColumnAggregateResult_aboutMax(ctx, field, obj)

		case "posMin":

			out.Values[i] = ec._ProjectColumnAggregateResult_posMin(ctx, field, obj)

		case "posMax":

			out.Values[i] = ec._ProjectColumnAggregateResult_posMax(ctx, field, obj)

		case "posSum":

			out.Values[i] = ec._ProjectColumnAggregateResult_posSum(ctx, field, obj)

		case "posAvg":

			out.Values[i] = ec._ProjectColumnAggregateResult_posAvg(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectTensionImplementors = []string{"ProjectTension"}

func (ec *executionContext) _ProjectTension(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectTension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectTensionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectTension")
		case "id":

			out.Values[i] = ec._ProjectTension_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tension":

			out.Values[i] = ec._ProjectTension_tension(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pos":

			out.Values[i] = ec._ProjectTension_pos(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pc":

			out.Values[i] = ec._ProjectTension_pc(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectTensionAggregateResultImplementors = []string{"ProjectTensionAggregateResult"}

func (ec *executionContext) _ProjectTensionAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectTensionAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectTensionAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectTensionAggregateResult")
		case "count":

			out.Values[i] = ec._ProjectTensionAggregateResult_count(ctx, field, obj)

		case "posMin":

			out.Values[i] = ec._ProjectTensionAggregateResult_posMin(ctx, field, obj)

		case "posMax":

			out.Values[i] = ec._ProjectTensionAggregateResult_posMax(ctx, field, obj)

		case "posSum":

			out.Values[i] = ec._ProjectTensionAggregateResult_posSum(ctx, field, obj)

		case "posAvg":

			out.Values[i] = ec._ProjectTensionAggregateResult_posAvg(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getNode":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNode(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryNode":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryNode(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateNode":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateNode(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getNodeFragment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNodeFragment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryNodeFragment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryNodeFragment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateNodeFragment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateNodeFragment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getMandate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMandate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryMandate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryMandate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateMandate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateMandate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getLabel":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLabel(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryLabel":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryLabel(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateLabel":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateLabel(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getRoleExt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRoleExt(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryRoleExt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryRoleExt(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateRoleExt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateRoleExt(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getProject":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProject(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryProject":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryProject(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateProject":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateProject(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getProjectTension":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectTension(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryProjectTension":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryProjectTension(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateProjectTension":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateProjectTension(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getProjectColumn":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectColumn(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryProjectColumn":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryProjectColumn(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateProjectColumn":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateProjectColumn(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryOrgaAgg":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryOrgaAgg(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateOrgaAgg":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateOrgaAgg(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPost":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPost(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryPost":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryPost(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregatePost":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregatePost(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getTension":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTension(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryTension":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryTension(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateTension":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateTension(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getComment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getComment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryComment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryComment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateComment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateComment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getReaction":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getReaction(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryReaction":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryReaction(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateReaction":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateReaction(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getBlob":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBlob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryBlob":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryBlob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateBlob":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateBlob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getEvent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEvent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryEvent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryEvent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateEvent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateEvent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryEventFragment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryEventFragment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateEventFragment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateEventFragment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getContract":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getContract(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryContract":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryContract(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateContract":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateContract(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getVote":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVote(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryVote":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryVote(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateVote":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateVote(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPendingUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPendingUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryPendingUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryPendingUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregatePendingUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregatePendingUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryUserRights":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserRights(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateUserRights":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateUserRights(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserEvent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserEvent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryUserEvent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserEvent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateUserEvent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateUserEvent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getNotif":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNotif(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryNotif":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryNotif(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateNotif":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateNotif(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "queryEventCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryEventCount(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aggregateEventCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aggregateEventCount(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reactionImplementors = []string{"Reaction"}

func (ec *executionContext) _Reaction(ctx context.Context, sel ast.SelectionSet, obj *model.Reaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reactionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Reaction")
		case "id":

			out.Values[i] = ec._Reaction_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reactionid":

			out.Values[i] = ec._Reaction_reactionid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._Reaction_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comment":

			out.Values[i] = ec._Reaction_comment(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type_":

			out.Values[i] = ec._Reaction_type_(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reactionAggregateResultImplementors = []string{"ReactionAggregateResult"}

func (ec *executionContext) _ReactionAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.ReactionAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reactionAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReactionAggregateResult")
		case "count":

			out.Values[i] = ec._ReactionAggregateResult_count(ctx, field, obj)

		case "reactionidMin":

			out.Values[i] = ec._ReactionAggregateResult_reactionidMin(ctx, field, obj)

		case "reactionidMax":

			out.Values[i] = ec._ReactionAggregateResult_reactionidMax(ctx, field, obj)

		case "type_Min":

			out.Values[i] = ec._ReactionAggregateResult_type_Min(ctx, field, obj)

		case "type_Max":

			out.Values[i] = ec._ReactionAggregateResult_type_Max(ctx, field, obj)

		case "type_Sum":

			out.Values[i] = ec._ReactionAggregateResult_type_Sum(ctx, field, obj)

		case "type_Avg":

			out.Values[i] = ec._ReactionAggregateResult_type_Avg(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleExtImplementors = []string{"RoleExt"}

func (ec *executionContext) _RoleExt(ctx context.Context, sel ast.SelectionSet, obj *model.RoleExt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleExtImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleExt")
		case "id":

			out.Values[i] = ec._RoleExt_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rootnameid":

			out.Values[i] = ec._RoleExt_rootnameid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._RoleExt_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "about":

			out.Values[i] = ec._RoleExt_about(ctx, field, obj)

		case "role_type":

			out.Values[i] = ec._RoleExt_role_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "color":

			out.Values[i] = ec._RoleExt_color(ctx, field, obj)

		case "mandate":

			out.Values[i] = ec._RoleExt_mandate(ctx, field, obj)

		case "roles":

			out.Values[i] = ec._RoleExt_roles(ctx, field, obj)

		case "nodes":

			out.Values[i] = ec._RoleExt_nodes(ctx, field, obj)

		case "rolesAggregate":

			out.Values[i] = ec._RoleExt_rolesAggregate(ctx, field, obj)

		case "nodesAggregate":

			out.Values[i] = ec._RoleExt_nodesAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleExtAggregateResultImplementors = []string{"RoleExtAggregateResult"}

func (ec *executionContext) _RoleExtAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.RoleExtAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleExtAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleExtAggregateResult")
		case "count":

			out.Values[i] = ec._RoleExtAggregateResult_count(ctx, field, obj)

		case "rootnameidMin":

			out.Values[i] = ec._RoleExtAggregateResult_rootnameidMin(ctx, field, obj)

		case "rootnameidMax":

			out.Values[i] = ec._RoleExtAggregateResult_rootnameidMax(ctx, field, obj)

		case "nameMin":

			out.Values[i] = ec._RoleExtAggregateResult_nameMin(ctx, field, obj)

		case "nameMax":

			out.Values[i] = ec._RoleExtAggregateResult_nameMax(ctx, field, obj)

		case "aboutMin":

			out.Values[i] = ec._RoleExtAggregateResult_aboutMin(ctx, field, obj)

		case "aboutMax":

			out.Values[i] = ec._RoleExtAggregateResult_aboutMax(ctx, field, obj)

		case "colorMin":

			out.Values[i] = ec._RoleExtAggregateResult_colorMin(ctx, field, obj)

		case "colorMax":

			out.Values[i] = ec._RoleExtAggregateResult_colorMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tensionImplementors = []string{"Tension"}

func (ec *executionContext) _Tension(ctx context.Context, sel ast.SelectionSet, obj *model.Tension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tensionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tension")
		case "emitter":

			out.Values[i] = ec._Tension_emitter(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emitterid":

			out.Values[i] = ec._Tension_emitterid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "receiver":

			out.Values[i] = ec._Tension_receiver(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "receiverid":

			out.Values[i] = ec._Tension_receiverid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._Tension_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type_":

			out.Values[i] = ec._Tension_type_(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._Tension_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "action":

			out.Values[i] = ec._Tension_action(ctx, field, obj)

		case "assignees":

			out.Values[i] = ec._Tension_assignees(ctx, field, obj)

		case "labels":

			out.Values[i] = ec._Tension_labels(ctx, field, obj)

		case "comments":

			out.Values[i] = ec._Tension_comments(ctx, field, obj)

		case "blobs":

			out.Values[i] = ec._Tension_blobs(ctx, field, obj)

		case "history":

			out.Values[i] = ec._Tension_history(ctx, field, obj)

		case "mentions":

			out.Values[i] = ec._Tension_mentions(ctx, field, obj)

		case "contracts":

			out.Values[i] = ec._Tension_contracts(ctx, field, obj)

		case "subscribers":

			out.Values[i] = ec._Tension_subscribers(ctx, field, obj)

		case "projects":

			out.Values[i] = ec._Tension_projects(ctx, field, obj)

		case "n_open_contracts":

			out.Values[i] = ec._Tension_n_open_contracts(ctx, field, obj)

		case "n_comments":

			out.Values[i] = ec._Tension_n_comments(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Tension_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Tension_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Tension_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Tension_updatedAt(ctx, field, obj)

		case "message":

			out.Values[i] = ec._Tension_message(ctx, field, obj)

		case "assigneesAggregate":

			out.Values[i] = ec._Tension_assigneesAggregate(ctx, field, obj)

		case "labelsAggregate":

			out.Values[i] = ec._Tension_labelsAggregate(ctx, field, obj)

		case "commentsAggregate":

			out.Values[i] = ec._Tension_commentsAggregate(ctx, field, obj)

		case "blobsAggregate":

			out.Values[i] = ec._Tension_blobsAggregate(ctx, field, obj)

		case "historyAggregate":

			out.Values[i] = ec._Tension_historyAggregate(ctx, field, obj)

		case "mentionsAggregate":

			out.Values[i] = ec._Tension_mentionsAggregate(ctx, field, obj)

		case "contractsAggregate":

			out.Values[i] = ec._Tension_contractsAggregate(ctx, field, obj)

		case "subscribersAggregate":

			out.Values[i] = ec._Tension_subscribersAggregate(ctx, field, obj)

		case "projectsAggregate":

			out.Values[i] = ec._Tension_projectsAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tensionAggregateResultImplementors = []string{"TensionAggregateResult"}

func (ec *executionContext) _TensionAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.TensionAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tensionAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TensionAggregateResult")
		case "count":

			out.Values[i] = ec._TensionAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._TensionAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._TensionAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._TensionAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._TensionAggregateResult_updatedAtMax(ctx, field, obj)

		case "messageMin":

			out.Values[i] = ec._TensionAggregateResult_messageMin(ctx, field, obj)

		case "messageMax":

			out.Values[i] = ec._TensionAggregateResult_messageMax(ctx, field, obj)

		case "emitteridMin":

			out.Values[i] = ec._TensionAggregateResult_emitteridMin(ctx, field, obj)

		case "emitteridMax":

			out.Values[i] = ec._TensionAggregateResult_emitteridMax(ctx, field, obj)

		case "receiveridMin":

			out.Values[i] = ec._TensionAggregateResult_receiveridMin(ctx, field, obj)

		case "receiveridMax":

			out.Values[i] = ec._TensionAggregateResult_receiveridMax(ctx, field, obj)

		case "titleMin":

			out.Values[i] = ec._TensionAggregateResult_titleMin(ctx, field, obj)

		case "titleMax":

			out.Values[i] = ec._TensionAggregateResult_titleMax(ctx, field, obj)

		case "n_open_contractsMin":

			out.Values[i] = ec._TensionAggregateResult_n_open_contractsMin(ctx, field, obj)

		case "n_open_contractsMax":

			out.Values[i] = ec._TensionAggregateResult_n_open_contractsMax(ctx, field, obj)

		case "n_open_contractsSum":

			out.Values[i] = ec._TensionAggregateResult_n_open_contractsSum(ctx, field, obj)

		case "n_open_contractsAvg":

			out.Values[i] = ec._TensionAggregateResult_n_open_contractsAvg(ctx, field, obj)

		case "n_commentsMin":

			out.Values[i] = ec._TensionAggregateResult_n_commentsMin(ctx, field, obj)

		case "n_commentsMax":

			out.Values[i] = ec._TensionAggregateResult_n_commentsMax(ctx, field, obj)

		case "n_commentsSum":

			out.Values[i] = ec._TensionAggregateResult_n_commentsSum(ctx, field, obj)

		case "n_commentsAvg":

			out.Values[i] = ec._TensionAggregateResult_n_commentsAvg(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateBlobPayloadImplementors = []string{"UpdateBlobPayload"}

func (ec *executionContext) _UpdateBlobPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateBlobPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateBlobPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateBlobPayload")
		case "blob":

			out.Values[i] = ec._UpdateBlobPayload_blob(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateBlobPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCommentPayloadImplementors = []string{"UpdateCommentPayload"}

func (ec *executionContext) _UpdateCommentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateCommentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCommentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCommentPayload")
		case "comment":

			out.Values[i] = ec._UpdateCommentPayload_comment(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateCommentPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateContractPayloadImplementors = []string{"UpdateContractPayload"}

func (ec *executionContext) _UpdateContractPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateContractPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateContractPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateContractPayload")
		case "contract":

			out.Values[i] = ec._UpdateContractPayload_contract(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateContractPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateEventCountPayloadImplementors = []string{"UpdateEventCountPayload"}

func (ec *executionContext) _UpdateEventCountPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateEventCountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateEventCountPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateEventCountPayload")
		case "eventCount":

			out.Values[i] = ec._UpdateEventCountPayload_eventCount(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateEventCountPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateEventFragmentPayloadImplementors = []string{"UpdateEventFragmentPayload"}

func (ec *executionContext) _UpdateEventFragmentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateEventFragmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateEventFragmentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateEventFragmentPayload")
		case "eventFragment":

			out.Values[i] = ec._UpdateEventFragmentPayload_eventFragment(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateEventFragmentPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateEventPayloadImplementors = []string{"UpdateEventPayload"}

func (ec *executionContext) _UpdateEventPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateEventPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateEventPayload")
		case "event":

			out.Values[i] = ec._UpdateEventPayload_event(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateEventPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateLabelPayloadImplementors = []string{"UpdateLabelPayload"}

func (ec *executionContext) _UpdateLabelPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateLabelPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateLabelPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateLabelPayload")
		case "label":

			out.Values[i] = ec._UpdateLabelPayload_label(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateLabelPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateMandatePayloadImplementors = []string{"UpdateMandatePayload"}

func (ec *executionContext) _UpdateMandatePayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMandatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMandatePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMandatePayload")
		case "mandate":

			out.Values[i] = ec._UpdateMandatePayload_mandate(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateMandatePayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateNodeFragmentPayloadImplementors = []string{"UpdateNodeFragmentPayload"}

func (ec *executionContext) _UpdateNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateNodeFragmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateNodeFragmentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateNodeFragmentPayload")
		case "nodeFragment":

			out.Values[i] = ec._UpdateNodeFragmentPayload_nodeFragment(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateNodeFragmentPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateNodePayloadImplementors = []string{"UpdateNodePayload"}

func (ec *executionContext) _UpdateNodePayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateNodePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateNodePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateNodePayload")
		case "node":

			out.Values[i] = ec._UpdateNodePayload_node(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateNodePayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateNotifPayloadImplementors = []string{"UpdateNotifPayload"}

func (ec *executionContext) _UpdateNotifPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateNotifPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateNotifPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateNotifPayload")
		case "notif":

			out.Values[i] = ec._UpdateNotifPayload_notif(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateNotifPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateOrgaAggPayloadImplementors = []string{"UpdateOrgaAggPayload"}

func (ec *executionContext) _UpdateOrgaAggPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateOrgaAggPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateOrgaAggPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateOrgaAggPayload")
		case "orgaAgg":

			out.Values[i] = ec._UpdateOrgaAggPayload_orgaAgg(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateOrgaAggPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePendingUserPayloadImplementors = []string{"UpdatePendingUserPayload"}

func (ec *executionContext) _UpdatePendingUserPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePendingUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePendingUserPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePendingUserPayload")
		case "pendingUser":

			out.Values[i] = ec._UpdatePendingUserPayload_pendingUser(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdatePendingUserPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePostPayloadImplementors = []string{"UpdatePostPayload"}

func (ec *executionContext) _UpdatePostPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePostPayload")
		case "post":

			out.Values[i] = ec._UpdatePostPayload_post(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdatePostPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProjectColumnPayloadImplementors = []string{"UpdateProjectColumnPayload"}

func (ec *executionContext) _UpdateProjectColumnPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateProjectColumnPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProjectColumnPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProjectColumnPayload")
		case "projectColumn":

			out.Values[i] = ec._UpdateProjectColumnPayload_projectColumn(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateProjectColumnPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProjectPayloadImplementors = []string{"UpdateProjectPayload"}

func (ec *executionContext) _UpdateProjectPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateProjectPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProjectPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProjectPayload")
		case "project":

			out.Values[i] = ec._UpdateProjectPayload_project(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateProjectPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProjectTensionPayloadImplementors = []string{"UpdateProjectTensionPayload"}

func (ec *executionContext) _UpdateProjectTensionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateProjectTensionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProjectTensionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProjectTensionPayload")
		case "projectTension":

			out.Values[i] = ec._UpdateProjectTensionPayload_projectTension(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateProjectTensionPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateReactionPayloadImplementors = []string{"UpdateReactionPayload"}

func (ec *executionContext) _UpdateReactionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateReactionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateReactionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateReactionPayload")
		case "reaction":

			out.Values[i] = ec._UpdateReactionPayload_reaction(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateReactionPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateRoleExtPayloadImplementors = []string{"UpdateRoleExtPayload"}

func (ec *executionContext) _UpdateRoleExtPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateRoleExtPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateRoleExtPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateRoleExtPayload")
		case "roleExt":

			out.Values[i] = ec._UpdateRoleExtPayload_roleExt(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateRoleExtPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateTensionPayloadImplementors = []string{"UpdateTensionPayload"}

func (ec *executionContext) _UpdateTensionPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateTensionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateTensionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateTensionPayload")
		case "tension":

			out.Values[i] = ec._UpdateTensionPayload_tension(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateTensionPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateUserEventPayloadImplementors = []string{"UpdateUserEventPayload"}

func (ec *executionContext) _UpdateUserEventPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateUserEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateUserEventPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateUserEventPayload")
		case "userEvent":

			out.Values[i] = ec._UpdateUserEventPayload_userEvent(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateUserEventPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateUserPayloadImplementors = []string{"UpdateUserPayload"}

func (ec *executionContext) _UpdateUserPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateUserPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateUserPayload")
		case "user":

			out.Values[i] = ec._UpdateUserPayload_user(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateUserPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateUserRightsPayloadImplementors = []string{"UpdateUserRightsPayload"}

func (ec *executionContext) _UpdateUserRightsPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateUserRightsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateUserRightsPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateUserRightsPayload")
		case "userRights":

			out.Values[i] = ec._UpdateUserRightsPayload_userRights(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateUserRightsPayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateVotePayloadImplementors = []string{"UpdateVotePayload"}

func (ec *executionContext) _UpdateVotePayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateVotePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateVotePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateVotePayload")
		case "vote":

			out.Values[i] = ec._UpdateVotePayload_vote(ctx, field, obj)

		case "numUids":

			out.Values[i] = ec._UpdateVotePayload_numUids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._User_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastAck":

			out.Values[i] = ec._User_lastAck(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":

			out.Values[i] = ec._User_username(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._User_name(ctx, field, obj)

		case "email":

			out.Values[i] = ec._User_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "password":

			out.Values[i] = ec._User_password(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bio":

			out.Values[i] = ec._User_bio(ctx, field, obj)

		case "location":

			out.Values[i] = ec._User_location(ctx, field, obj)

		case "utc":

			out.Values[i] = ec._User_utc(ctx, field, obj)

		case "links":

			out.Values[i] = ec._User_links(ctx, field, obj)

		case "skills":

			out.Values[i] = ec._User_skills(ctx, field, obj)

		case "notifyByEmail":

			out.Values[i] = ec._User_notifyByEmail(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lang":

			out.Values[i] = ec._User_lang(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscriptions":

			out.Values[i] = ec._User_subscriptions(ctx, field, obj)

		case "watching":

			out.Values[i] = ec._User_watching(ctx, field, obj)

		case "rights":

			out.Values[i] = ec._User_rights(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roles":

			out.Values[i] = ec._User_roles(ctx, field, obj)

		case "backed_roles":

			out.Values[i] = ec._User_backed_roles(ctx, field, obj)

		case "tensions_created":

			out.Values[i] = ec._User_tensions_created(ctx, field, obj)

		case "tensions_assigned":

			out.Values[i] = ec._User_tensions_assigned(ctx, field, obj)

		case "contracts":

			out.Values[i] = ec._User_contracts(ctx, field, obj)

		case "reactions":

			out.Values[i] = ec._User_reactions(ctx, field, obj)

		case "events":

			out.Values[i] = ec._User_events(ctx, field, obj)

		case "markAllAsRead":

			out.Values[i] = ec._User_markAllAsRead(ctx, field, obj)

		case "event_count":

			out.Values[i] = ec._User_event_count(ctx, field, obj)

		case "subscriptionsAggregate":

			out.Values[i] = ec._User_subscriptionsAggregate(ctx, field, obj)

		case "watchingAggregate":

			out.Values[i] = ec._User_watchingAggregate(ctx, field, obj)

		case "rolesAggregate":

			out.Values[i] = ec._User_rolesAggregate(ctx, field, obj)

		case "backed_rolesAggregate":

			out.Values[i] = ec._User_backed_rolesAggregate(ctx, field, obj)

		case "tensions_createdAggregate":

			out.Values[i] = ec._User_tensions_createdAggregate(ctx, field, obj)

		case "tensions_assignedAggregate":

			out.Values[i] = ec._User_tensions_assignedAggregate(ctx, field, obj)

		case "contractsAggregate":

			out.Values[i] = ec._User_contractsAggregate(ctx, field, obj)

		case "reactionsAggregate":

			out.Values[i] = ec._User_reactionsAggregate(ctx, field, obj)

		case "eventsAggregate":

			out.Values[i] = ec._User_eventsAggregate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userAggregateResultImplementors = []string{"UserAggregateResult"}

func (ec *executionContext) _UserAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.UserAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAggregateResult")
		case "count":

			out.Values[i] = ec._UserAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._UserAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._UserAggregateResult_createdAtMax(ctx, field, obj)

		case "lastAckMin":

			out.Values[i] = ec._UserAggregateResult_lastAckMin(ctx, field, obj)

		case "lastAckMax":

			out.Values[i] = ec._UserAggregateResult_lastAckMax(ctx, field, obj)

		case "usernameMin":

			out.Values[i] = ec._UserAggregateResult_usernameMin(ctx, field, obj)

		case "usernameMax":

			out.Values[i] = ec._UserAggregateResult_usernameMax(ctx, field, obj)

		case "nameMin":

			out.Values[i] = ec._UserAggregateResult_nameMin(ctx, field, obj)

		case "nameMax":

			out.Values[i] = ec._UserAggregateResult_nameMax(ctx, field, obj)

		case "emailMin":

			out.Values[i] = ec._UserAggregateResult_emailMin(ctx, field, obj)

		case "emailMax":

			out.Values[i] = ec._UserAggregateResult_emailMax(ctx, field, obj)

		case "passwordMin":

			out.Values[i] = ec._UserAggregateResult_passwordMin(ctx, field, obj)

		case "passwordMax":

			out.Values[i] = ec._UserAggregateResult_passwordMax(ctx, field, obj)

		case "bioMin":

			out.Values[i] = ec._UserAggregateResult_bioMin(ctx, field, obj)

		case "bioMax":

			out.Values[i] = ec._UserAggregateResult_bioMax(ctx, field, obj)

		case "locationMin":

			out.Values[i] = ec._UserAggregateResult_locationMin(ctx, field, obj)

		case "locationMax":

			out.Values[i] = ec._UserAggregateResult_locationMax(ctx, field, obj)

		case "utcMin":

			out.Values[i] = ec._UserAggregateResult_utcMin(ctx, field, obj)

		case "utcMax":

			out.Values[i] = ec._UserAggregateResult_utcMax(ctx, field, obj)

		case "markAllAsReadMin":

			out.Values[i] = ec._UserAggregateResult_markAllAsReadMin(ctx, field, obj)

		case "markAllAsReadMax":

			out.Values[i] = ec._UserAggregateResult_markAllAsReadMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userEventImplementors = []string{"UserEvent"}

func (ec *executionContext) _UserEvent(ctx context.Context, sel ast.SelectionSet, obj *model.UserEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEventImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEvent")
		case "id":

			out.Values[i] = ec._UserEvent_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._UserEvent_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRead":

			out.Values[i] = ec._UserEvent_isRead(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._UserEvent_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "event":

			out.Values[i] = ec._UserEvent_event(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userEventAggregateResultImplementors = []string{"UserEventAggregateResult"}

func (ec *executionContext) _UserEventAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.UserEventAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEventAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEventAggregateResult")
		case "count":

			out.Values[i] = ec._UserEventAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._UserEventAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._UserEventAggregateResult_createdAtMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRightsImplementors = []string{"UserRights"}

func (ec *executionContext) _UserRights(ctx context.Context, sel ast.SelectionSet, obj *model.UserRights) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRightsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRights")
		case "type_":

			out.Values[i] = ec._UserRights_type_(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "canLogin":

			out.Values[i] = ec._UserRights_canLogin(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "canCreateRoot":

			out.Values[i] = ec._UserRights_canCreateRoot(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxPublicOrga":

			out.Values[i] = ec._UserRights_maxPublicOrga(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxPrivateOrga":

			out.Values[i] = ec._UserRights_maxPrivateOrga(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasEmailNotifications":

			out.Values[i] = ec._UserRights_hasEmailNotifications(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRightsAggregateResultImplementors = []string{"UserRightsAggregateResult"}

func (ec *executionContext) _UserRightsAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.UserRightsAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRightsAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRightsAggregateResult")
		case "count":

			out.Values[i] = ec._UserRightsAggregateResult_count(ctx, field, obj)

		case "maxPublicOrgaMin":

			out.Values[i] = ec._UserRightsAggregateResult_maxPublicOrgaMin(ctx, field, obj)

		case "maxPublicOrgaMax":

			out.Values[i] = ec._UserRightsAggregateResult_maxPublicOrgaMax(ctx, field, obj)

		case "maxPublicOrgaSum":

			out.Values[i] = ec._UserRightsAggregateResult_maxPublicOrgaSum(ctx, field, obj)

		case "maxPublicOrgaAvg":

			out.Values[i] = ec._UserRightsAggregateResult_maxPublicOrgaAvg(ctx, field, obj)

		case "maxPrivateOrgaMin":

			out.Values[i] = ec._UserRightsAggregateResult_maxPrivateOrgaMin(ctx, field, obj)

		case "maxPrivateOrgaMax":

			out.Values[i] = ec._UserRightsAggregateResult_maxPrivateOrgaMax(ctx, field, obj)

		case "maxPrivateOrgaSum":

			out.Values[i] = ec._UserRightsAggregateResult_maxPrivateOrgaSum(ctx, field, obj)

		case "maxPrivateOrgaAvg":

			out.Values[i] = ec._UserRightsAggregateResult_maxPrivateOrgaAvg(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voteImplementors = []string{"Vote"}

func (ec *executionContext) _Vote(ctx context.Context, sel ast.SelectionSet, obj *model.Vote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voteImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vote")
		case "voteid":

			out.Values[i] = ec._Vote_voteid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contract":

			out.Values[i] = ec._Vote_contract(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._Vote_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":

			out.Values[i] = ec._Vote_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._Vote_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._Vote_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Vote_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Vote_updatedAt(ctx, field, obj)

		case "message":

			out.Values[i] = ec._Vote_message(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voteAggregateResultImplementors = []string{"VoteAggregateResult"}

func (ec *executionContext) _VoteAggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.VoteAggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voteAggregateResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoteAggregateResult")
		case "count":

			out.Values[i] = ec._VoteAggregateResult_count(ctx, field, obj)

		case "createdAtMin":

			out.Values[i] = ec._VoteAggregateResult_createdAtMin(ctx, field, obj)

		case "createdAtMax":

			out.Values[i] = ec._VoteAggregateResult_createdAtMax(ctx, field, obj)

		case "updatedAtMin":

			out.Values[i] = ec._VoteAggregateResult_updatedAtMin(ctx, field, obj)

		case "updatedAtMax":

			out.Values[i] = ec._VoteAggregateResult_updatedAtMax(ctx, field, obj)

		case "messageMin":

			out.Values[i] = ec._VoteAggregateResult_messageMin(ctx, field, obj)

		case "messageMax":

			out.Values[i] = ec._VoteAggregateResult_messageMax(ctx, field, obj)

		case "voteidMin":

			out.Values[i] = ec._VoteAggregateResult_voteidMin(ctx, field, obj)

		case "voteidMax":

			out.Values[i] = ec._VoteAggregateResult_voteidMax(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAddBlobInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInputᚄ(ctx context.Context, v interface{}) ([]*model.AddBlobInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddBlobInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddBlobInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddBlobInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobInput(ctx context.Context, v interface{}) (*model.AddBlobInput, error) {
	res, err := ec.unmarshalInputAddBlobInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddCommentInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInputᚄ(ctx context.Context, v interface{}) ([]*model.AddCommentInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddCommentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddCommentInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddCommentInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentInput(ctx context.Context, v interface{}) (*model.AddCommentInput, error) {
	res, err := ec.unmarshalInputAddCommentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddContractInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddContractInputᚄ(ctx context.Context, v interface{}) ([]*model.AddContractInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddContractInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddContractInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddContractInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddContractInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddContractInput(ctx context.Context, v interface{}) (*model.AddContractInput, error) {
	res, err := ec.unmarshalInputAddContractInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddEventCountInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventCountInputᚄ(ctx context.Context, v interface{}) ([]*model.AddEventCountInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddEventCountInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddEventCountInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventCountInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddEventCountInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventCountInput(ctx context.Context, v interface{}) (*model.AddEventCountInput, error) {
	res, err := ec.unmarshalInputAddEventCountInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddEventFragmentInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventFragmentInputᚄ(ctx context.Context, v interface{}) ([]*model.AddEventFragmentInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddEventFragmentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddEventFragmentInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventFragmentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddEventFragmentInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventFragmentInput(ctx context.Context, v interface{}) (*model.AddEventFragmentInput, error) {
	res, err := ec.unmarshalInputAddEventFragmentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddEventInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInputᚄ(ctx context.Context, v interface{}) ([]*model.AddEventInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddEventInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddEventInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddEventInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventInput(ctx context.Context, v interface{}) (*model.AddEventInput, error) {
	res, err := ec.unmarshalInputAddEventInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddLabelInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInputᚄ(ctx context.Context, v interface{}) ([]*model.AddLabelInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddLabelInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddLabelInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddLabelInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelInput(ctx context.Context, v interface{}) (*model.AddLabelInput, error) {
	res, err := ec.unmarshalInputAddLabelInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddMandateInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInputᚄ(ctx context.Context, v interface{}) ([]*model.AddMandateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddMandateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddMandateInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddMandateInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandateInput(ctx context.Context, v interface{}) (*model.AddMandateInput, error) {
	res, err := ec.unmarshalInputAddMandateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddNodeFragmentInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInputᚄ(ctx context.Context, v interface{}) ([]*model.AddNodeFragmentInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddNodeFragmentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddNodeFragmentInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddNodeFragmentInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentInput(ctx context.Context, v interface{}) (*model.AddNodeFragmentInput, error) {
	res, err := ec.unmarshalInputAddNodeFragmentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddNodeInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInputᚄ(ctx context.Context, v interface{}) ([]*model.AddNodeInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddNodeInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddNodeInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddNodeInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeInput(ctx context.Context, v interface{}) (*model.AddNodeInput, error) {
	res, err := ec.unmarshalInputAddNodeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddNotifInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNotifInputᚄ(ctx context.Context, v interface{}) ([]*model.AddNotifInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddNotifInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddNotifInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNotifInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddNotifInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNotifInput(ctx context.Context, v interface{}) (*model.AddNotifInput, error) {
	res, err := ec.unmarshalInputAddNotifInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddOrgaAggInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddOrgaAggInputᚄ(ctx context.Context, v interface{}) ([]*model.AddOrgaAggInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddOrgaAggInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddOrgaAggInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddOrgaAggInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddOrgaAggInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddOrgaAggInput(ctx context.Context, v interface{}) (*model.AddOrgaAggInput, error) {
	res, err := ec.unmarshalInputAddOrgaAggInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddPendingUserInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddPendingUserInputᚄ(ctx context.Context, v interface{}) ([]*model.AddPendingUserInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddPendingUserInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddPendingUserInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddPendingUserInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddPendingUserInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddPendingUserInput(ctx context.Context, v interface{}) (*model.AddPendingUserInput, error) {
	res, err := ec.unmarshalInputAddPendingUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddProjectColumnInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectColumnInputᚄ(ctx context.Context, v interface{}) ([]*model.AddProjectColumnInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddProjectColumnInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddProjectColumnInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectColumnInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddProjectColumnInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectColumnInput(ctx context.Context, v interface{}) (*model.AddProjectColumnInput, error) {
	res, err := ec.unmarshalInputAddProjectColumnInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddProjectInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectInputᚄ(ctx context.Context, v interface{}) ([]*model.AddProjectInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddProjectInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddProjectInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddProjectInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectInput(ctx context.Context, v interface{}) (*model.AddProjectInput, error) {
	res, err := ec.unmarshalInputAddProjectInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddProjectTensionInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectTensionInputᚄ(ctx context.Context, v interface{}) ([]*model.AddProjectTensionInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddProjectTensionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddProjectTensionInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectTensionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddProjectTensionInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectTensionInput(ctx context.Context, v interface{}) (*model.AddProjectTensionInput, error) {
	res, err := ec.unmarshalInputAddProjectTensionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddReactionInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddReactionInputᚄ(ctx context.Context, v interface{}) ([]*model.AddReactionInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddReactionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddReactionInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddReactionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddReactionInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddReactionInput(ctx context.Context, v interface{}) (*model.AddReactionInput, error) {
	res, err := ec.unmarshalInputAddReactionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddRoleExtInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddRoleExtInputᚄ(ctx context.Context, v interface{}) ([]*model.AddRoleExtInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddRoleExtInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddRoleExtInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddRoleExtInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddRoleExtInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddRoleExtInput(ctx context.Context, v interface{}) (*model.AddRoleExtInput, error) {
	res, err := ec.unmarshalInputAddRoleExtInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddTensionInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInputᚄ(ctx context.Context, v interface{}) ([]*model.AddTensionInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddTensionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddTensionInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddTensionInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionInput(ctx context.Context, v interface{}) (*model.AddTensionInput, error) {
	res, err := ec.unmarshalInputAddTensionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddUserEventInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserEventInputᚄ(ctx context.Context, v interface{}) ([]*model.AddUserEventInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddUserEventInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddUserEventInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserEventInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddUserEventInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserEventInput(ctx context.Context, v interface{}) (*model.AddUserEventInput, error) {
	res, err := ec.unmarshalInputAddUserEventInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddUserInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInputᚄ(ctx context.Context, v interface{}) ([]*model.AddUserInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddUserInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddUserInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddUserInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserInput(ctx context.Context, v interface{}) (*model.AddUserInput, error) {
	res, err := ec.unmarshalInputAddUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddUserRightsInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInputᚄ(ctx context.Context, v interface{}) ([]*model.AddUserRightsInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddUserRightsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddUserRightsInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddUserRightsInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsInput(ctx context.Context, v interface{}) (*model.AddUserRightsInput, error) {
	res, err := ec.unmarshalInputAddUserRightsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddVoteInput2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddVoteInputᚄ(ctx context.Context, v interface{}) ([]*model.AddVoteInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AddVoteInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAddVoteInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddVoteInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAddVoteInput2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddVoteInput(ctx context.Context, v interface{}) (*model.AddVoteInput, error) {
	res, err := ec.unmarshalInputAddVoteInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBlob2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx context.Context, sel ast.SelectionSet, v *model.Blob) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Blob(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBlobFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx context.Context, v interface{}) (model.BlobFilter, error) {
	res, err := ec.unmarshalInputBlobFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx context.Context, v interface{}) (*model.BlobFilter, error) {
	res, err := ec.unmarshalInputBlobFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlobRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx context.Context, v interface{}) (*model.BlobRef, error) {
	res, err := ec.unmarshalInputBlobRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlobType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, v interface{}) (model.BlobType, error) {
	var res model.BlobType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBlobType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, sel ast.SelectionSet, v model.BlobType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNComment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v *model.Comment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx context.Context, v interface{}) (model.CommentFilter, error) {
	res, err := ec.unmarshalInputCommentFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx context.Context, v interface{}) (*model.CommentFilter, error) {
	res, err := ec.unmarshalInputCommentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx context.Context, v interface{}) (*model.CommentRef, error) {
	res, err := ec.unmarshalInputCommentRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContract2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v *model.Contract) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Contract(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContractFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx context.Context, v interface{}) (model.ContractFilter, error) {
	res, err := ec.unmarshalInputContractFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx context.Context, v interface{}) (*model.ContractFilter, error) {
	res, err := ec.unmarshalInputContractFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx context.Context, v interface{}) (*model.ContractRef, error) {
	res, err := ec.unmarshalInputContractRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContractStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx context.Context, v interface{}) (model.ContractStatus, error) {
	var res model.ContractStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx context.Context, sel ast.SelectionSet, v model.ContractStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNContractType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx context.Context, v interface{}) (model.ContractType, error) {
	var res model.ContractType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx context.Context, sel ast.SelectionSet, v model.ContractType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDateTime2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDgraphIndex2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndex(ctx context.Context, v interface{}) (model.DgraphIndex, error) {
	var res model.DgraphIndex
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDgraphIndex2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndex(ctx context.Context, sel ast.SelectionSet, v model.DgraphIndex) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v *model.Event) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Event(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEventCountFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx context.Context, v interface{}) (model.EventCountFilter, error) {
	res, err := ec.unmarshalInputEventCountFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx context.Context, v interface{}) (*model.EventCountFilter, error) {
	res, err := ec.unmarshalInputEventCountFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx context.Context, v interface{}) (model.EventFilter, error) {
	res, err := ec.unmarshalInputEventFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx context.Context, v interface{}) (*model.EventFilter, error) {
	res, err := ec.unmarshalInputEventFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEventFragment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragment(ctx context.Context, sel ast.SelectionSet, v *model.EventFragment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EventFragment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEventFragmentFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx context.Context, v interface{}) (model.EventFragmentFilter, error) {
	res, err := ec.unmarshalInputEventFragmentFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx context.Context, v interface{}) (*model.EventFragmentFilter, error) {
	res, err := ec.unmarshalInputEventFragmentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventFragmentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentRef(ctx context.Context, v interface{}) (*model.EventFragmentRef, error) {
	res, err := ec.unmarshalInputEventFragmentRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEventKind2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKind(ctx context.Context, sel ast.SelectionSet, v model.EventKind) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EventKind(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEventKindRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindRef(ctx context.Context, v interface{}) (*model.EventKindRef, error) {
	res, err := ec.unmarshalInputEventKindRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventKindType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindType(ctx context.Context, v interface{}) (model.EventKindType, error) {
	var res model.EventKindType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEventKindType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindType(ctx context.Context, sel ast.SelectionSet, v model.EventKindType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEventRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRef(ctx context.Context, v interface{}) (*model.EventRef, error) {
	res, err := ec.unmarshalInputEventRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHTTPMethod2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐHTTPMethod(ctx context.Context, v interface{}) (model.HTTPMethod, error) {
	var res model.HTTPMethod
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHTTPMethod2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐHTTPMethod(ctx context.Context, sel ast.SelectionSet, v model.HTTPMethod) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInt642string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt642string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLabel2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v *model.Label) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Label(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLabelFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) (model.LabelFilter, error) {
	res, err := ec.unmarshalInputLabelFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) (*model.LabelFilter, error) {
	res, err := ec.unmarshalInputLabelFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLabelRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRef(ctx context.Context, v interface{}) (*model.LabelRef, error) {
	res, err := ec.unmarshalInputLabelRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLang2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLang(ctx context.Context, v interface{}) (model.Lang, error) {
	var res model.Lang
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLang2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLang(ctx context.Context, sel ast.SelectionSet, v model.Lang) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMandateFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx context.Context, v interface{}) (model.MandateFilter, error) {
	res, err := ec.unmarshalInputMandateFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx context.Context, v interface{}) (*model.MandateFilter, error) {
	res, err := ec.unmarshalInputMandateFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v *model.Node) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNodeFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx context.Context, v interface{}) (model.NodeFilter, error) {
	res, err := ec.unmarshalInputNodeFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx context.Context, v interface{}) (*model.NodeFilter, error) {
	res, err := ec.unmarshalInputNodeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNodeFragmentFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx context.Context, v interface{}) (model.NodeFragmentFilter, error) {
	res, err := ec.unmarshalInputNodeFragmentFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx context.Context, v interface{}) (*model.NodeFragmentFilter, error) {
	res, err := ec.unmarshalInputNodeFragmentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNodeMode2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, v interface{}) (model.NodeMode, error) {
	var res model.NodeMode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNodeMode2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, sel ast.SelectionSet, v model.NodeMode) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx context.Context, v interface{}) (*model.NodeRef, error) {
	res, err := ec.unmarshalInputNodeRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNodeType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, v interface{}) (model.NodeType, error) {
	var res model.NodeType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNodeType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, sel ast.SelectionSet, v model.NodeType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNodeVisibility2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx context.Context, v interface{}) (model.NodeVisibility, error) {
	var res model.NodeVisibility
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNodeVisibility2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx context.Context, sel ast.SelectionSet, v model.NodeVisibility) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNotifFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx context.Context, v interface{}) (model.NotifFilter, error) {
	res, err := ec.unmarshalInputNotifFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx context.Context, v interface{}) (*model.NotifFilter, error) {
	res, err := ec.unmarshalInputNotifFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrgaAggFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx context.Context, v interface{}) (model.OrgaAggFilter, error) {
	res, err := ec.unmarshalInputOrgaAggFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx context.Context, v interface{}) (*model.OrgaAggFilter, error) {
	res, err := ec.unmarshalInputOrgaAggFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPendingUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx context.Context, sel ast.SelectionSet, v *model.PendingUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PendingUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPendingUserFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx context.Context, v interface{}) (model.PendingUserFilter, error) {
	res, err := ec.unmarshalInputPendingUserFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx context.Context, v interface{}) (*model.PendingUserFilter, error) {
	res, err := ec.unmarshalInputPendingUserFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPendingUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserRef(ctx context.Context, v interface{}) (*model.PendingUserRef, error) {
	res, err := ec.unmarshalInputPendingUserRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Point) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPoint2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPoint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPoint2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPoint(ctx context.Context, sel ast.SelectionSet, v *model.Point) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Point(ctx, sel, v)
}

func (ec *executionContext) marshalNPointList2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointListᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PointList) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPointList2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPointList2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointList(ctx context.Context, sel ast.SelectionSet, v *model.PointList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PointList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPointListRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointListRefᚄ(ctx context.Context, v interface{}) ([]*model.PointListRef, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PointListRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPointListRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointListRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPointListRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointListRef(ctx context.Context, v interface{}) (*model.PointListRef, error) {
	res, err := ec.unmarshalInputPointListRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPointRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointRefᚄ(ctx context.Context, v interface{}) ([]*model.PointRef, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PointRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPointRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPointRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointRef(ctx context.Context, v interface{}) (*model.PointRef, error) {
	res, err := ec.unmarshalInputPointRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPolygon2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Polygon) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPolygon2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygon(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPolygon2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygon(ctx context.Context, sel ast.SelectionSet, v *model.Polygon) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Polygon(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPolygonRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonRefᚄ(ctx context.Context, v interface{}) ([]*model.PolygonRef, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PolygonRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPolygonRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPolygonRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonRef(ctx context.Context, v interface{}) (*model.PolygonRef, error) {
	res, err := ec.unmarshalInputPolygonRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPostFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx context.Context, v interface{}) (model.PostFilter, error) {
	res, err := ec.unmarshalInputPostFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPostFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx context.Context, v interface{}) (*model.PostFilter, error) {
	res, err := ec.unmarshalInputPostFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProject2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx context.Context, sel ast.SelectionSet, v *model.Project) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectColumn2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx context.Context, sel ast.SelectionSet, v *model.ProjectColumn) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectColumn(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectColumnFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx context.Context, v interface{}) (model.ProjectColumnFilter, error) {
	res, err := ec.unmarshalInputProjectColumnFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx context.Context, v interface{}) (*model.ProjectColumnFilter, error) {
	res, err := ec.unmarshalInputProjectColumnFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectColumnRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRef(ctx context.Context, v interface{}) (*model.ProjectColumnRef, error) {
	res, err := ec.unmarshalInputProjectColumnRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx context.Context, v interface{}) (model.ProjectFilter, error) {
	res, err := ec.unmarshalInputProjectFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx context.Context, v interface{}) (*model.ProjectFilter, error) {
	res, err := ec.unmarshalInputProjectFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRef(ctx context.Context, v interface{}) (*model.ProjectRef, error) {
	res, err := ec.unmarshalInputProjectRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, v interface{}) (model.ProjectStatus, error) {
	var res model.ProjectStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, sel ast.SelectionSet, v model.ProjectStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNProjectTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx context.Context, sel ast.SelectionSet, v *model.ProjectTension) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectTension(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectTensionFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx context.Context, v interface{}) (model.ProjectTensionFilter, error) {
	res, err := ec.unmarshalInputProjectTensionFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx context.Context, v interface{}) (*model.ProjectTensionFilter, error) {
	res, err := ec.unmarshalInputProjectTensionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionRef(ctx context.Context, v interface{}) (*model.ProjectTensionRef, error) {
	res, err := ec.unmarshalInputProjectTensionRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReaction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx context.Context, sel ast.SelectionSet, v *model.Reaction) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Reaction(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReactionFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx context.Context, v interface{}) (model.ReactionFilter, error) {
	res, err := ec.unmarshalInputReactionFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx context.Context, v interface{}) (*model.ReactionFilter, error) {
	res, err := ec.unmarshalInputReactionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReactionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionRef(ctx context.Context, v interface{}) (*model.ReactionRef, error) {
	res, err := ec.unmarshalInputReactionRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRoleExt2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx context.Context, sel ast.SelectionSet, v *model.RoleExt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RoleExt(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleExtFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx context.Context, v interface{}) (model.RoleExtFilter, error) {
	res, err := ec.unmarshalInputRoleExtFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx context.Context, v interface{}) (*model.RoleExtFilter, error) {
	res, err := ec.unmarshalInputRoleExtFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleExtRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRef(ctx context.Context, v interface{}) (*model.RoleExtRef, error) {
	res, err := ec.unmarshalInputRoleExtRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, v interface{}) (model.RoleType, error) {
	var res model.RoleType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRoleType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, sel ast.SelectionSet, v model.RoleType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx context.Context, sel ast.SelectionSet, v *model.Tension) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tension(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTensionEvent2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, v interface{}) (model.TensionEvent, error) {
	var res model.TensionEvent
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTensionEvent2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, sel ast.SelectionSet, v model.TensionEvent) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTensionFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx context.Context, v interface{}) (model.TensionFilter, error) {
	res, err := ec.unmarshalInputTensionFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx context.Context, v interface{}) (*model.TensionFilter, error) {
	res, err := ec.unmarshalInputTensionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx context.Context, v interface{}) (*model.TensionRef, error) {
	res, err := ec.unmarshalInputTensionRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTensionStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, v interface{}) (model.TensionStatus, error) {
	var res model.TensionStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTensionStatus2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, sel ast.SelectionSet, v model.TensionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTensionType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, v interface{}) (model.TensionType, error) {
	var res model.TensionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTensionType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, sel ast.SelectionSet, v model.TensionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUpdateBlobInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateBlobInput(ctx context.Context, v interface{}) (model.UpdateBlobInput, error) {
	res, err := ec.unmarshalInputUpdateBlobInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCommentInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateCommentInput(ctx context.Context, v interface{}) (model.UpdateCommentInput, error) {
	res, err := ec.unmarshalInputUpdateCommentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateContractInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateContractInput(ctx context.Context, v interface{}) (model.UpdateContractInput, error) {
	res, err := ec.unmarshalInputUpdateContractInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateEventCountInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventCountInput(ctx context.Context, v interface{}) (model.UpdateEventCountInput, error) {
	res, err := ec.unmarshalInputUpdateEventCountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateEventFragmentInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventFragmentInput(ctx context.Context, v interface{}) (model.UpdateEventFragmentInput, error) {
	res, err := ec.unmarshalInputUpdateEventFragmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateEventInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventInput(ctx context.Context, v interface{}) (model.UpdateEventInput, error) {
	res, err := ec.unmarshalInputUpdateEventInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateLabelInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateLabelInput(ctx context.Context, v interface{}) (model.UpdateLabelInput, error) {
	res, err := ec.unmarshalInputUpdateLabelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMandateInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateMandateInput(ctx context.Context, v interface{}) (model.UpdateMandateInput, error) {
	res, err := ec.unmarshalInputUpdateMandateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateNodeFragmentInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeFragmentInput(ctx context.Context, v interface{}) (model.UpdateNodeFragmentInput, error) {
	res, err := ec.unmarshalInputUpdateNodeFragmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateNodeInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeInput(ctx context.Context, v interface{}) (model.UpdateNodeInput, error) {
	res, err := ec.unmarshalInputUpdateNodeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateNotifInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNotifInput(ctx context.Context, v interface{}) (model.UpdateNotifInput, error) {
	res, err := ec.unmarshalInputUpdateNotifInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateOrgaAggInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateOrgaAggInput(ctx context.Context, v interface{}) (model.UpdateOrgaAggInput, error) {
	res, err := ec.unmarshalInputUpdateOrgaAggInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePendingUserInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePendingUserInput(ctx context.Context, v interface{}) (model.UpdatePendingUserInput, error) {
	res, err := ec.unmarshalInputUpdatePendingUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePostInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePostInput(ctx context.Context, v interface{}) (model.UpdatePostInput, error) {
	res, err := ec.unmarshalInputUpdatePostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectColumnInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectColumnInput(ctx context.Context, v interface{}) (model.UpdateProjectColumnInput, error) {
	res, err := ec.unmarshalInputUpdateProjectColumnInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectInput(ctx context.Context, v interface{}) (model.UpdateProjectInput, error) {
	res, err := ec.unmarshalInputUpdateProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectTensionInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectTensionInput(ctx context.Context, v interface{}) (model.UpdateProjectTensionInput, error) {
	res, err := ec.unmarshalInputUpdateProjectTensionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateReactionInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateReactionInput(ctx context.Context, v interface{}) (model.UpdateReactionInput, error) {
	res, err := ec.unmarshalInputUpdateReactionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateRoleExtInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateRoleExtInput(ctx context.Context, v interface{}) (model.UpdateRoleExtInput, error) {
	res, err := ec.unmarshalInputUpdateRoleExtInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTensionInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateTensionInput(ctx context.Context, v interface{}) (model.UpdateTensionInput, error) {
	res, err := ec.unmarshalInputUpdateTensionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserEventInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserEventInput(ctx context.Context, v interface{}) (model.UpdateUserEventInput, error) {
	res, err := ec.unmarshalInputUpdateUserEventInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserInput(ctx context.Context, v interface{}) (model.UpdateUserInput, error) {
	res, err := ec.unmarshalInputUpdateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserRightsInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserRightsInput(ctx context.Context, v interface{}) (model.UpdateUserRightsInput, error) {
	res, err := ec.unmarshalInputUpdateUserRightsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateVoteInput2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateVoteInput(ctx context.Context, v interface{}) (model.UpdateVoteInput, error) {
	res, err := ec.unmarshalInputUpdateVoteInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx context.Context, sel ast.SelectionSet, v *model.UserEvent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserEventFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx context.Context, v interface{}) (model.UserEventFilter, error) {
	res, err := ec.unmarshalInputUserEventFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx context.Context, v interface{}) (*model.UserEventFilter, error) {
	res, err := ec.unmarshalInputUserEventFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserEventRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventRef(ctx context.Context, v interface{}) (*model.UserEventRef, error) {
	res, err := ec.unmarshalInputUserEventRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx context.Context, v interface{}) (model.UserFilter, error) {
	res, err := ec.unmarshalInputUserFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx context.Context, v interface{}) (*model.UserFilter, error) {
	res, err := ec.unmarshalInputUserFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx context.Context, v interface{}) (*model.UserRef, error) {
	res, err := ec.unmarshalInputUserRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserRights2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx context.Context, sel ast.SelectionSet, v *model.UserRights) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserRights(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserRightsFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx context.Context, v interface{}) (model.UserRightsFilter, error) {
	res, err := ec.unmarshalInputUserRightsFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx context.Context, v interface{}) (*model.UserRightsFilter, error) {
	res, err := ec.unmarshalInputUserRightsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserRightsRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx context.Context, v interface{}) (*model.UserRightsRef, error) {
	res, err := ec.unmarshalInputUserRightsRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserType(ctx context.Context, v interface{}) (model.UserType, error) {
	var res model.UserType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserType(ctx context.Context, sel ast.SelectionSet, v model.UserType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVote2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Vote) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVote2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVote2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx context.Context, sel ast.SelectionSet, v *model.Vote) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Vote(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVoteFilter2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx context.Context, v interface{}) (model.VoteFilter, error) {
	res, err := ec.unmarshalInputVoteFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx context.Context, v interface{}) (*model.VoteFilter, error) {
	res, err := ec.unmarshalInputVoteFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVoteRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRefᚄ(ctx context.Context, v interface{}) ([]*model.VoteRef, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.VoteRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVoteRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVoteRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRef(ctx context.Context, v interface{}) (*model.VoteRef, error) {
	res, err := ec.unmarshalInputVoteRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAddBlobPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddBlobPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddBlobPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddBlobPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddCommentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddCommentPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddCommentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddCommentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddContractPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddContractPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddContractPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddContractPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddEventCountPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventCountPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddEventCountPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddEventCountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddEventFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventFragmentPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddEventFragmentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddEventFragmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddEventPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddEventPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddEventPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddLabelPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddLabelPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddLabelPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddLabelPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddMandatePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddMandatePayload(ctx context.Context, sel ast.SelectionSet, v *model.AddMandatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddMandatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddNodeFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddNodeFragmentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddNodeFragmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddNodePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNodePayload(ctx context.Context, sel ast.SelectionSet, v *model.AddNodePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddNodePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddNotifPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddNotifPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddNotifPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddNotifPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddOrgaAggPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddOrgaAggPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddOrgaAggPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddOrgaAggPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddPendingUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddPendingUserPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddPendingUserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddPendingUserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddProjectColumnPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectColumnPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddProjectColumnPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddProjectColumnPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddProjectPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddProjectPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddProjectPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddProjectTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddProjectTensionPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddProjectTensionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddProjectTensionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddReactionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddReactionPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddReactionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddReactionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddRoleExtPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddRoleExtPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddRoleExtPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddRoleExtPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddTensionPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddTensionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddTensionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddUserEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserEventPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddUserEventPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddUserEventPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddUserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddUserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddUserRightsPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddUserRightsPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddUserRightsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddUserRightsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddVotePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAddVotePayload(ctx context.Context, sel ast.SelectionSet, v *model.AddVotePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddVotePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthRule2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx context.Context, v interface{}) ([]*model.AuthRule, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AuthRule, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAuthRule2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAuthRule2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐAuthRule(ctx context.Context, v interface{}) (*model.AuthRule, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuthRule(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlob2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx context.Context, sel ast.SelectionSet, v []*model.Blob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBlob2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBlob2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Blob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBlob2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOBlob2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlob(ctx context.Context, sel ast.SelectionSet, v *model.Blob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Blob(ctx, sel, v)
}

func (ec *executionContext) marshalOBlobAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.BlobAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlobAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlobFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx context.Context, v interface{}) ([]*model.BlobFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.BlobFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBlobFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobFilter(ctx context.Context, v interface{}) (*model.BlobFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlobFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlobHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobHasFilter(ctx context.Context, v interface{}) ([]*model.BlobHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.BlobHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBlobHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBlobHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.BlobHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBlobHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOBlobHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobHasFilter(ctx context.Context, v interface{}) (*model.BlobHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BlobHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlobHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.BlobHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBlobOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrder(ctx context.Context, v interface{}) (*model.BlobOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlobOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlobOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx context.Context, v interface{}) (*model.BlobOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BlobOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlobOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobOrderable(ctx context.Context, sel ast.SelectionSet, v *model.BlobOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBlobPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobPatch(ctx context.Context, v interface{}) (*model.BlobPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlobPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlobRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRefᚄ(ctx context.Context, v interface{}) ([]*model.BlobRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.BlobRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlobRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBlobRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobRef(ctx context.Context, v interface{}) (*model.BlobRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlobRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlobType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, v interface{}) ([]*model.BlobType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.BlobType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBlobType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBlobType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, sel ast.SelectionSet, v []*model.BlobType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBlobType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOBlobType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, v interface{}) (*model.BlobType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BlobType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlobType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobType(ctx context.Context, sel ast.SelectionSet, v *model.BlobType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBlobType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐBlobTypeHash(ctx context.Context, v interface{}) (*model.BlobTypeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlobType_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v []*model.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOComment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOComment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v *model.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) marshalOCommentAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.CommentAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommentAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommentFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx context.Context, v interface{}) ([]*model.CommentFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CommentFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCommentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentFilter(ctx context.Context, v interface{}) (*model.CommentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCommentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCommentHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentHasFilter(ctx context.Context, v interface{}) ([]*model.CommentHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CommentHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCommentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommentHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.CommentHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOCommentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentHasFilter(ctx context.Context, v interface{}) (*model.CommentHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CommentHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.CommentHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCommentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrder(ctx context.Context, v interface{}) (*model.CommentOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCommentOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCommentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx context.Context, v interface{}) (*model.CommentOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CommentOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentOrderable(ctx context.Context, sel ast.SelectionSet, v *model.CommentOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCommentPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentPatch(ctx context.Context, v interface{}) (*model.CommentPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCommentPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCommentRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRefᚄ(ctx context.Context, v interface{}) ([]*model.CommentRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CommentRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCommentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCommentRef(ctx context.Context, v interface{}) (*model.CommentRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCommentRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContainsFilter(ctx context.Context, v interface{}) (*model.ContainsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContract2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v []*model.Contract) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContract2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContract2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Contract) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContract2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOContract2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v *model.Contract) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Contract(ctx, sel, v)
}

func (ec *executionContext) marshalOContractAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.ContractAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContractAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContractFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx context.Context, v interface{}) ([]*model.ContractFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContractFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContractFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractFilter(ctx context.Context, v interface{}) (*model.ContractFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContractFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContractHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractHasFilter(ctx context.Context, v interface{}) ([]*model.ContractHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContractHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContractHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOContractHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.ContractHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContractHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOContractHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractHasFilter(ctx context.Context, v interface{}) (*model.ContractHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ContractHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContractHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.ContractHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContractOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrder(ctx context.Context, v interface{}) (*model.ContractOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContractOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContractOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrderable(ctx context.Context, v interface{}) (*model.ContractOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ContractOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContractOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractOrderable(ctx context.Context, sel ast.SelectionSet, v *model.ContractOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContractPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractPatch(ctx context.Context, v interface{}) (*model.ContractPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContractPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContractRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRefᚄ(ctx context.Context, v interface{}) ([]*model.ContractRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContractRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContractRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractRef(ctx context.Context, v interface{}) (*model.ContractRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContractRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContractStatus2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx context.Context, v interface{}) ([]*model.ContractStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContractStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContractStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOContractStatus2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx context.Context, sel ast.SelectionSet, v []*model.ContractStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContractStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOContractStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx context.Context, v interface{}) (*model.ContractStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ContractStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContractStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatus(ctx context.Context, sel ast.SelectionSet, v *model.ContractStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContractStatus_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractStatusHash(ctx context.Context, v interface{}) (*model.ContractStatusHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContractStatus_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContractType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx context.Context, v interface{}) ([]*model.ContractType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContractType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContractType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOContractType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx context.Context, sel ast.SelectionSet, v []*model.ContractType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContractType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOContractType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx context.Context, v interface{}) (*model.ContractType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ContractType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContractType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractType(ctx context.Context, sel ast.SelectionSet, v *model.ContractType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContractType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐContractTypeHash(ctx context.Context, v interface{}) (*model.ContractTypeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContractType_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCustomHTTP2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐCustomHTTP(ctx context.Context, v interface{}) (*model.CustomHTTP, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCustomHTTP(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODateTime2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODateTime2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODateTime2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalODateTime2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalODateTime2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalODateTimeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeFilter(ctx context.Context, v interface{}) (*model.DateTimeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDateTimeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODateTimeRange2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDateTimeRange(ctx context.Context, v interface{}) (*model.DateTimeRange, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDateTimeRange(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeleteBlobPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteBlobPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteBlobPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteBlobPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteCommentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteCommentPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteCommentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteCommentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteContractPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteContractPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteContractPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteContractPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteEventCountPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteEventCountPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteEventCountPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteEventCountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteEventFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteEventFragmentPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteEventFragmentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteEventFragmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteEventPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteEventPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteEventPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteLabelPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteLabelPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteLabelPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteLabelPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteMandatePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteMandatePayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteMandatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteMandatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteNodeFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteNodeFragmentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteNodeFragmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteNodePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNodePayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteNodePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteNodePayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteNotifPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteNotifPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteNotifPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteNotifPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteOrgaAggPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteOrgaAggPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteOrgaAggPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteOrgaAggPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeletePendingUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeletePendingUserPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeletePendingUserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeletePendingUserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeletePostPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeletePostPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeletePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeletePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteProjectColumnPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteProjectColumnPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteProjectColumnPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteProjectColumnPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteProjectPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteProjectPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteProjectPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteProjectPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteProjectTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteProjectTensionPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteProjectTensionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteProjectTensionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteReactionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteReactionPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteReactionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteReactionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteRoleExtPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteRoleExtPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteRoleExtPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteRoleExtPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteTensionPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteTensionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteTensionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteUserEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteUserEventPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteUserEventPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteUserEventPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteUserPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteUserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteUserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteUserRightsPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteUserRightsPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteUserRightsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteUserRightsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteVotePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDeleteVotePayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteVotePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteVotePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalODgraphIndex2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx context.Context, v interface{}) ([]model.DgraphIndex, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DgraphIndex, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDgraphIndex2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndex(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODgraphIndex2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndexᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DgraphIndex) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDgraphIndex2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐDgraphIndex(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v []*model.Event) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Event) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v *model.Event) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Event(ctx, sel, v)
}

func (ec *executionContext) marshalOEventAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.EventAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventAggregateResult(ctx, sel, v)
}

func (ec *executionContext) marshalOEventCount2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCount(ctx context.Context, sel ast.SelectionSet, v []*model.EventCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEventCount2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEventCount2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCount(ctx context.Context, sel ast.SelectionSet, v *model.EventCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventCount(ctx, sel, v)
}

func (ec *executionContext) marshalOEventCountAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.EventCountAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventCountAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEventCountFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx context.Context, v interface{}) ([]*model.EventCountFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EventCountFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEventCountFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountFilter(ctx context.Context, v interface{}) (*model.EventCountFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventCountFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventCountHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountHasFilter(ctx context.Context, v interface{}) ([]*model.EventCountHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EventCountHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEventCountHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEventCountHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.EventCountHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEventCountHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOEventCountHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountHasFilter(ctx context.Context, v interface{}) (*model.EventCountHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EventCountHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventCountHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.EventCountHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEventCountOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrder(ctx context.Context, v interface{}) (*model.EventCountOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventCountOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventCountOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrderable(ctx context.Context, v interface{}) (*model.EventCountOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EventCountOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventCountOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountOrderable(ctx context.Context, sel ast.SelectionSet, v *model.EventCountOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEventCountPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountPatch(ctx context.Context, v interface{}) (*model.EventCountPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventCountPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventCountRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventCountRef(ctx context.Context, v interface{}) (*model.EventCountRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventCountRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx context.Context, v interface{}) ([]*model.EventFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EventFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFilter(ctx context.Context, v interface{}) (*model.EventFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragment(ctx context.Context, sel ast.SelectionSet, v []*model.EventFragment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEventFragment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEventFragment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragment(ctx context.Context, sel ast.SelectionSet, v *model.EventFragment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventFragment(ctx, sel, v)
}

func (ec *executionContext) marshalOEventFragmentAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.EventFragmentAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventFragmentAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEventFragmentFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx context.Context, v interface{}) ([]*model.EventFragmentFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EventFragmentFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEventFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentFilter(ctx context.Context, v interface{}) (*model.EventFragmentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventFragmentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventFragmentHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentHasFilter(ctx context.Context, v interface{}) ([]*model.EventFragmentHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EventFragmentHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEventFragmentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEventFragmentHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.EventFragmentHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEventFragmentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOEventFragmentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentHasFilter(ctx context.Context, v interface{}) (*model.EventFragmentHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EventFragmentHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventFragmentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.EventFragmentHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEventFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrder(ctx context.Context, v interface{}) (*model.EventFragmentOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventFragmentOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventFragmentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrderable(ctx context.Context, v interface{}) (*model.EventFragmentOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EventFragmentOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventFragmentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentOrderable(ctx context.Context, sel ast.SelectionSet, v *model.EventFragmentOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEventFragmentPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentPatch(ctx context.Context, v interface{}) (*model.EventFragmentPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventFragmentPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventFragmentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventFragmentRef(ctx context.Context, v interface{}) (*model.EventFragmentRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventFragmentRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventHasFilter(ctx context.Context, v interface{}) ([]*model.EventHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EventHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEventHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEventHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.EventHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEventHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOEventHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventHasFilter(ctx context.Context, v interface{}) (*model.EventHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EventHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.EventHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOEventKind2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EventKind) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEventKind2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKind(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOEventKindFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindFilter(ctx context.Context, v interface{}) (*model.EventKindFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventKindFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventKindRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindRefᚄ(ctx context.Context, v interface{}) ([]*model.EventKindRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EventKindRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEventKindRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEventKindType2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindTypeᚄ(ctx context.Context, v interface{}) ([]model.EventKindType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.EventKindType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEventKindType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEventKindType2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EventKindType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEventKindType2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventKindType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrder(ctx context.Context, v interface{}) (*model.EventOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx context.Context, v interface{}) (*model.EventOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EventOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventOrderable(ctx context.Context, sel ast.SelectionSet, v *model.EventOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEventPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventPatch(ctx context.Context, v interface{}) (*model.EventPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRefᚄ(ctx context.Context, v interface{}) ([]*model.EventRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EventRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEventRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEventRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐEventRef(ctx context.Context, v interface{}) (*model.EventRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloatRange2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐFloatRange(ctx context.Context, v interface{}) (*model.FloatRange, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFloatRange(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGenerateMutationParams2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐGenerateMutationParams(ctx context.Context, v interface{}) (*model.GenerateMutationParams, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGenerateMutationParams(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGenerateQueryParams2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐGenerateQueryParams(ctx context.Context, v interface{}) (*model.GenerateQueryParams, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGenerateQueryParams(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt642ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt642ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt642ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt642ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt642ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOInt64Range2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐInt64Range(ctx context.Context, v interface{}) (*model.Int64Range, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt64Range(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOIntRange2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐIntRange(ctx context.Context, v interface{}) (*model.IntRange, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntRange(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOIntersectsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐIntersectsFilter(ctx context.Context, v interface{}) (*model.IntersectsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntersectsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLabel2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v []*model.Label) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLabel2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLabel2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Label) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLabel2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOLabel2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v *model.Label) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Label(ctx, sel, v)
}

func (ec *executionContext) marshalOLabelAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.LabelAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LabelAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLabelFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) ([]*model.LabelFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.LabelFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLabelFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) (*model.LabelFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLabelFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLabelHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelHasFilter(ctx context.Context, v interface{}) ([]*model.LabelHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.LabelHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLabelHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLabelHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.LabelHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLabelHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOLabelHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelHasFilter(ctx context.Context, v interface{}) (*model.LabelHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.LabelHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLabelHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.LabelHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLabelOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrder(ctx context.Context, v interface{}) (*model.LabelOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLabelOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLabelOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx context.Context, v interface{}) (*model.LabelOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.LabelOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLabelOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelOrderable(ctx context.Context, sel ast.SelectionSet, v *model.LabelOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLabelPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelPatch(ctx context.Context, v interface{}) (*model.LabelPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLabelPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLabelRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRefᚄ(ctx context.Context, v interface{}) ([]*model.LabelRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.LabelRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLabelRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLabelRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLang2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLang(ctx context.Context, v interface{}) (*model.Lang, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Lang)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLang2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐLang(ctx context.Context, sel ast.SelectionSet, v *model.Lang) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMandate2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx context.Context, sel ast.SelectionSet, v []*model.Mandate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMandate2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMandate2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandate(ctx context.Context, sel ast.SelectionSet, v *model.Mandate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Mandate(ctx, sel, v)
}

func (ec *executionContext) marshalOMandateAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.MandateAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MandateAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMandateFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx context.Context, v interface{}) ([]*model.MandateFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.MandateFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMandateFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateFilter(ctx context.Context, v interface{}) (*model.MandateFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMandateFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMandateHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateHasFilter(ctx context.Context, v interface{}) ([]*model.MandateHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.MandateHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMandateHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMandateHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.MandateHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMandateHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOMandateHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateHasFilter(ctx context.Context, v interface{}) (*model.MandateHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MandateHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMandateHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.MandateHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMandateOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrder(ctx context.Context, v interface{}) (*model.MandateOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMandateOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMandateOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx context.Context, v interface{}) (*model.MandateOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MandateOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMandateOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateOrderable(ctx context.Context, sel ast.SelectionSet, v *model.MandateOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMandatePatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandatePatch(ctx context.Context, v interface{}) (*model.MandatePatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMandatePatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMandateRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMandateRef(ctx context.Context, v interface{}) (*model.MandateRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMandateRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMode(ctx context.Context, v interface{}) (*model.Mode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Mode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMode(ctx context.Context, sel ast.SelectionSet, v *model.Mode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMultiPolygonRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐMultiPolygonRef(ctx context.Context, v interface{}) (*model.MultiPolygonRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMultiPolygonRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONearFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNearFilter(ctx context.Context, v interface{}) (*model.NearFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNearFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v []*model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalONode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalONode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v *model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalONodeAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.NodeAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NodeAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalONodeFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx context.Context, v interface{}) ([]*model.NodeFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NodeFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONodeFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFilter(ctx context.Context, v interface{}) (*model.NodeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONodeFragment2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx context.Context, sel ast.SelectionSet, v []*model.NodeFragment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONodeFragment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalONodeFragment2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragment(ctx context.Context, sel ast.SelectionSet, v *model.NodeFragment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NodeFragment(ctx, sel, v)
}

func (ec *executionContext) marshalONodeFragmentAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.NodeFragmentAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NodeFragmentAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalONodeFragmentFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx context.Context, v interface{}) ([]*model.NodeFragmentFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NodeFragmentFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONodeFragmentFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentFilter(ctx context.Context, v interface{}) (*model.NodeFragmentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeFragmentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONodeFragmentHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentHasFilter(ctx context.Context, v interface{}) ([]*model.NodeFragmentHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NodeFragmentHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONodeFragmentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONodeFragmentHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.NodeFragmentHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONodeFragmentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalONodeFragmentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentHasFilter(ctx context.Context, v interface{}) (*model.NodeFragmentHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NodeFragmentHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONodeFragmentHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.NodeFragmentHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeFragmentOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrder(ctx context.Context, v interface{}) (*model.NodeFragmentOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeFragmentOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONodeFragmentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx context.Context, v interface{}) (*model.NodeFragmentOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NodeFragmentOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONodeFragmentOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentOrderable(ctx context.Context, sel ast.SelectionSet, v *model.NodeFragmentOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeFragmentPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentPatch(ctx context.Context, v interface{}) (*model.NodeFragmentPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeFragmentPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONodeFragmentRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeFragmentRef(ctx context.Context, v interface{}) (*model.NodeFragmentRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeFragmentRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONodeHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeHasFilter(ctx context.Context, v interface{}) ([]*model.NodeHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NodeHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONodeHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONodeHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.NodeHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONodeHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalONodeHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeHasFilter(ctx context.Context, v interface{}) (*model.NodeHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NodeHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONodeHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.NodeHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeMode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, v interface{}) ([]*model.NodeMode, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NodeMode, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONodeMode2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, sel ast.SelectionSet, v []*model.NodeMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, v interface{}) (*model.NodeMode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NodeMode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONodeMode2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeMode(ctx context.Context, sel ast.SelectionSet, v *model.NodeMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeMode_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeModeHash(ctx context.Context, v interface{}) (*model.NodeModeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeMode_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONodeOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrder(ctx context.Context, v interface{}) (*model.NodeOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONodeOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx context.Context, v interface{}) (*model.NodeOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NodeOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONodeOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeOrderable(ctx context.Context, sel ast.SelectionSet, v *model.NodeOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodePatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodePatch(ctx context.Context, v interface{}) (*model.NodePatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodePatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONodeRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRefᚄ(ctx context.Context, v interface{}) ([]*model.NodeRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NodeRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONodeRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeRef(ctx context.Context, v interface{}) (*model.NodeRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONodeType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, v interface{}) ([]*model.NodeType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NodeType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONodeType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, sel ast.SelectionSet, v []*model.NodeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, v interface{}) (*model.NodeType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NodeType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONodeType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeType(ctx context.Context, sel ast.SelectionSet, v *model.NodeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeTypeHash(ctx context.Context, v interface{}) (*model.NodeTypeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeType_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONodeVisibility2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx context.Context, v interface{}) ([]*model.NodeVisibility, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NodeVisibility, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONodeVisibility2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx context.Context, sel ast.SelectionSet, v []*model.NodeVisibility) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx context.Context, v interface{}) (*model.NodeVisibility, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NodeVisibility)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONodeVisibility2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibility(ctx context.Context, sel ast.SelectionSet, v *model.NodeVisibility) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONodeVisibility_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNodeVisibilityHash(ctx context.Context, v interface{}) (*model.NodeVisibilityHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNodeVisibility_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONotif2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotif(ctx context.Context, sel ast.SelectionSet, v []*model.Notif) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONotif2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotif(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalONotif2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotif(ctx context.Context, sel ast.SelectionSet, v *model.Notif) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Notif(ctx, sel, v)
}

func (ec *executionContext) marshalONotifAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.NotifAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NotifAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalONotifFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx context.Context, v interface{}) ([]*model.NotifFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NotifFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONotifFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifFilter(ctx context.Context, v interface{}) (*model.NotifFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNotifFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONotifHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifHasFilter(ctx context.Context, v interface{}) ([]*model.NotifHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NotifHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONotifHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONotifHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.NotifHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONotifHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalONotifHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifHasFilter(ctx context.Context, v interface{}) (*model.NotifHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NotifHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONotifHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.NotifHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONotifOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrder(ctx context.Context, v interface{}) (*model.NotifOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNotifOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONotifOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrderable(ctx context.Context, v interface{}) (*model.NotifOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NotifOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONotifOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifOrderable(ctx context.Context, sel ast.SelectionSet, v *model.NotifOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONotifPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifPatch(ctx context.Context, v interface{}) (*model.NotifPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNotifPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONotifRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐNotifRef(ctx context.Context, v interface{}) (*model.NotifRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNotifRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrgaAgg2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAgg(ctx context.Context, sel ast.SelectionSet, v []*model.OrgaAgg) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrgaAgg2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAgg(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOrgaAgg2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAgg(ctx context.Context, sel ast.SelectionSet, v *model.OrgaAgg) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrgaAgg(ctx, sel, v)
}

func (ec *executionContext) marshalOOrgaAggAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.OrgaAggAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrgaAggAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrgaAggFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx context.Context, v interface{}) ([]*model.OrgaAggFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OrgaAggFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOrgaAggFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggFilter(ctx context.Context, v interface{}) (*model.OrgaAggFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrgaAggFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrgaAggHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggHasFilter(ctx context.Context, v interface{}) ([]*model.OrgaAggHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OrgaAggHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOrgaAggHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOrgaAggHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.OrgaAggHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrgaAggHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOOrgaAggHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggHasFilter(ctx context.Context, v interface{}) (*model.OrgaAggHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OrgaAggHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrgaAggHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.OrgaAggHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOOrgaAggOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrder(ctx context.Context, v interface{}) (*model.OrgaAggOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrgaAggOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrgaAggOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrderable(ctx context.Context, v interface{}) (*model.OrgaAggOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OrgaAggOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrgaAggOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggOrderable(ctx context.Context, sel ast.SelectionSet, v *model.OrgaAggOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOOrgaAggPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggPatch(ctx context.Context, v interface{}) (*model.OrgaAggPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrgaAggPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrgaAggRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐOrgaAggRef(ctx context.Context, v interface{}) (*model.OrgaAggRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrgaAggRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPendingUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx context.Context, sel ast.SelectionSet, v []*model.PendingUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPendingUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPendingUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PendingUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPendingUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPendingUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUser(ctx context.Context, sel ast.SelectionSet, v *model.PendingUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PendingUser(ctx, sel, v)
}

func (ec *executionContext) marshalOPendingUserAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.PendingUserAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PendingUserAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPendingUserFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx context.Context, v interface{}) ([]*model.PendingUserFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PendingUserFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPendingUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserFilter(ctx context.Context, v interface{}) (*model.PendingUserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPendingUserFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPendingUserHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserHasFilter(ctx context.Context, v interface{}) ([]*model.PendingUserHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PendingUserHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPendingUserHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPendingUserHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.PendingUserHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPendingUserHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOPendingUserHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserHasFilter(ctx context.Context, v interface{}) (*model.PendingUserHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PendingUserHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPendingUserHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.PendingUserHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPendingUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrder(ctx context.Context, v interface{}) (*model.PendingUserOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPendingUserOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPendingUserOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrderable(ctx context.Context, v interface{}) (*model.PendingUserOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PendingUserOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPendingUserOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserOrderable(ctx context.Context, sel ast.SelectionSet, v *model.PendingUserOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPendingUserPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserPatch(ctx context.Context, v interface{}) (*model.PendingUserPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPendingUserPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPendingUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserRefᚄ(ctx context.Context, v interface{}) ([]*model.PendingUserRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PendingUserRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPendingUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPendingUserRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPointRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPointRef(ctx context.Context, v interface{}) (*model.PointRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPointRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPolygonRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPolygonRef(ctx context.Context, v interface{}) (*model.PolygonRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPolygonRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPost2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx context.Context, sel ast.SelectionSet, v []*model.Post) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPost2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPost2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPost(ctx context.Context, sel ast.SelectionSet, v *model.Post) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Post(ctx, sel, v)
}

func (ec *executionContext) marshalOPostAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.PostAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PostAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPostFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx context.Context, v interface{}) ([]*model.PostFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PostFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPostFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPostFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostFilter(ctx context.Context, v interface{}) (*model.PostFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPostFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPostHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostHasFilter(ctx context.Context, v interface{}) ([]*model.PostHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PostHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPostHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPostHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.PostHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPostHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOPostHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostHasFilter(ctx context.Context, v interface{}) (*model.PostHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PostHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPostHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.PostHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPostOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrder(ctx context.Context, v interface{}) (*model.PostOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPostOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPostOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx context.Context, v interface{}) (*model.PostOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PostOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPostOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostOrderable(ctx context.Context, sel ast.SelectionSet, v *model.PostOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPostPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐPostPatch(ctx context.Context, v interface{}) (*model.PostPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPostPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProject2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx context.Context, sel ast.SelectionSet, v []*model.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProject2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProject2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProject2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProject2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProject(ctx context.Context, sel ast.SelectionSet, v *model.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.ProjectAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectAggregateResult(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectColumn2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectColumn2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProjectColumn2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectColumn2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProjectColumn2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumn(ctx context.Context, sel ast.SelectionSet, v *model.ProjectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectColumn(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectColumnAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.ProjectColumnAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectColumnAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProjectColumnFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx context.Context, v interface{}) ([]*model.ProjectColumnFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectColumnFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectColumnFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnFilter(ctx context.Context, v interface{}) (*model.ProjectColumnFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectColumnFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectColumnHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnHasFilter(ctx context.Context, v interface{}) ([]*model.ProjectColumnHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectColumnHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProjectColumnHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProjectColumnHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectColumnHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectColumnHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOProjectColumnHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnHasFilter(ctx context.Context, v interface{}) (*model.ProjectColumnHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProjectColumnHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectColumnHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.ProjectColumnHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectColumnOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrder(ctx context.Context, v interface{}) (*model.ProjectColumnOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectColumnOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectColumnOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrderable(ctx context.Context, v interface{}) (*model.ProjectColumnOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProjectColumnOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectColumnOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnOrderable(ctx context.Context, sel ast.SelectionSet, v *model.ProjectColumnOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectColumnPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnPatch(ctx context.Context, v interface{}) (*model.ProjectColumnPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectColumnPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectColumnRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRefᚄ(ctx context.Context, v interface{}) ([]*model.ProjectColumnRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectColumnRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectColumnRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectColumnRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectColumnRef(ctx context.Context, v interface{}) (*model.ProjectColumnRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectColumnRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx context.Context, v interface{}) ([]*model.ProjectFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectFilter(ctx context.Context, v interface{}) (*model.ProjectFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectHasFilter(ctx context.Context, v interface{}) ([]*model.ProjectHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProjectHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProjectHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOProjectHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectHasFilter(ctx context.Context, v interface{}) (*model.ProjectHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProjectHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.ProjectHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrder(ctx context.Context, v interface{}) (*model.ProjectOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrderable(ctx context.Context, v interface{}) (*model.ProjectOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProjectOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectOrderable(ctx context.Context, sel ast.SelectionSet, v *model.ProjectOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectPatch(ctx context.Context, v interface{}) (*model.ProjectPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRefᚄ(ctx context.Context, v interface{}) ([]*model.ProjectRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectRef(ctx context.Context, v interface{}) (*model.ProjectRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectStatus2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, v interface{}) ([]*model.ProjectStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProjectStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProjectStatus2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOProjectStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, v interface{}) (*model.ProjectStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProjectStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, sel ast.SelectionSet, v *model.ProjectStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectStatus_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectStatusHash(ctx context.Context, v interface{}) (*model.ProjectStatusHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectStatus_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectTension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProjectTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectTension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProjectTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTension(ctx context.Context, sel ast.SelectionSet, v *model.ProjectTension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectTension(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.ProjectTensionAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectTensionAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProjectTensionFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx context.Context, v interface{}) ([]*model.ProjectTensionFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectTensionFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionFilter(ctx context.Context, v interface{}) (*model.ProjectTensionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectTensionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectTensionHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionHasFilter(ctx context.Context, v interface{}) ([]*model.ProjectTensionHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectTensionHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProjectTensionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProjectTensionHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectTensionHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectTensionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOProjectTensionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionHasFilter(ctx context.Context, v interface{}) (*model.ProjectTensionHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProjectTensionHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectTensionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.ProjectTensionHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrder(ctx context.Context, v interface{}) (*model.ProjectTensionOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectTensionOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectTensionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrderable(ctx context.Context, v interface{}) (*model.ProjectTensionOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProjectTensionOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectTensionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionOrderable(ctx context.Context, sel ast.SelectionSet, v *model.ProjectTensionOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOProjectTensionPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionPatch(ctx context.Context, v interface{}) (*model.ProjectTensionPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectTensionPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionRefᚄ(ctx context.Context, v interface{}) ([]*model.ProjectTensionRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProjectTensionRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐProjectTensionRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReaction2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx context.Context, sel ast.SelectionSet, v []*model.Reaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReaction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReaction2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Reaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReaction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOReaction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReaction(ctx context.Context, sel ast.SelectionSet, v *model.Reaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Reaction(ctx, sel, v)
}

func (ec *executionContext) marshalOReactionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.ReactionAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReactionAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReactionFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx context.Context, v interface{}) ([]*model.ReactionFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ReactionFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOReactionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionFilter(ctx context.Context, v interface{}) (*model.ReactionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReactionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReactionHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionHasFilter(ctx context.Context, v interface{}) ([]*model.ReactionHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ReactionHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOReactionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReactionHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.ReactionHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReactionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOReactionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionHasFilter(ctx context.Context, v interface{}) (*model.ReactionHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ReactionHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReactionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.ReactionHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReactionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrder(ctx context.Context, v interface{}) (*model.ReactionOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReactionOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReactionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrderable(ctx context.Context, v interface{}) (*model.ReactionOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ReactionOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReactionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionOrderable(ctx context.Context, sel ast.SelectionSet, v *model.ReactionOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOReactionPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionPatch(ctx context.Context, v interface{}) (*model.ReactionPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReactionPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOReactionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionRefᚄ(ctx context.Context, v interface{}) ([]*model.ReactionRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ReactionRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNReactionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐReactionRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORoleExt2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx context.Context, sel ast.SelectionSet, v []*model.RoleExt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORoleExt2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORoleExt2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RoleExt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRoleExt2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORoleExt2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExt(ctx context.Context, sel ast.SelectionSet, v *model.RoleExt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RoleExt(ctx, sel, v)
}

func (ec *executionContext) marshalORoleExtAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.RoleExtAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RoleExtAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalORoleExtFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx context.Context, v interface{}) ([]*model.RoleExtFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RoleExtFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORoleExtFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtFilter(ctx context.Context, v interface{}) (*model.RoleExtFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleExtFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORoleExtHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtHasFilter(ctx context.Context, v interface{}) ([]*model.RoleExtHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RoleExtHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORoleExtHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORoleExtHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.RoleExtHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORoleExtHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalORoleExtHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtHasFilter(ctx context.Context, v interface{}) (*model.RoleExtHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RoleExtHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORoleExtHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.RoleExtHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORoleExtOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrder(ctx context.Context, v interface{}) (*model.RoleExtOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleExtOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORoleExtOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrderable(ctx context.Context, v interface{}) (*model.RoleExtOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RoleExtOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORoleExtOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtOrderable(ctx context.Context, sel ast.SelectionSet, v *model.RoleExtOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORoleExtPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtPatch(ctx context.Context, v interface{}) (*model.RoleExtPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleExtPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORoleExtRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRefᚄ(ctx context.Context, v interface{}) ([]*model.RoleExtRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RoleExtRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRoleExtRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORoleExtRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleExtRef(ctx context.Context, v interface{}) (*model.RoleExtRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleExtRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORoleType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, v interface{}) ([]*model.RoleType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RoleType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORoleType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, sel ast.SelectionSet, v []*model.RoleType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, v interface{}) (*model.RoleType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RoleType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORoleType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleType(ctx context.Context, sel ast.SelectionSet, v *model.RoleType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORoleType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐRoleTypeHash(ctx context.Context, v interface{}) (*model.RoleTypeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleType_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStringFullTextFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringFullTextFilter(ctx context.Context, v interface{}) (*model.StringFullTextFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringFullTextFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStringHashFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilter(ctx context.Context, v interface{}) (*model.StringHashFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringHashFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStringHashFilter_StringRegExpFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringRegExpFilter(ctx context.Context, v interface{}) (*model.StringHashFilterStringRegExpFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringHashFilter_StringRegExpFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStringHashFilter_StringTermFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringHashFilterStringTermFilter(ctx context.Context, v interface{}) (*model.StringHashFilterStringTermFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringHashFilter_StringTermFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStringRange2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringRange(ctx context.Context, v interface{}) (*model.StringRange, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringRange(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStringRegExpFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringRegExpFilter(ctx context.Context, v interface{}) (*model.StringRegExpFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringRegExpFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStringTermFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐStringTermFilter(ctx context.Context, v interface{}) (*model.StringTermFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringTermFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx context.Context, sel ast.SelectionSet, v []*model.Tension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTension2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Tension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTension2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTension(ctx context.Context, sel ast.SelectionSet, v *model.Tension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tension(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTensionAction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx context.Context, v interface{}) (*model.TensionAction, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TensionAction)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTensionAction2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAction(ctx context.Context, sel ast.SelectionSet, v *model.TensionAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOTensionAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.TensionAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TensionAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx context.Context, v interface{}) ([]model.TensionEvent, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.TensionEvent, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTensionEvent2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTensionEvent2ᚕfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventᚄ(ctx context.Context, sel ast.SelectionSet, v []model.TensionEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTensionEvent2fractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTensionEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, v interface{}) ([]*model.TensionEvent, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TensionEvent, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTensionEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTensionEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, sel ast.SelectionSet, v []*model.TensionEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTensionEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOTensionEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, v interface{}) (*model.TensionEvent, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TensionEvent)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTensionEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEvent(ctx context.Context, sel ast.SelectionSet, v *model.TensionEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionEvent_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionEventHash(ctx context.Context, v interface{}) (*model.TensionEventHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTensionEvent_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTensionFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx context.Context, v interface{}) ([]*model.TensionFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TensionFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTensionFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionFilter(ctx context.Context, v interface{}) (*model.TensionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTensionFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTensionHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionHasFilter(ctx context.Context, v interface{}) ([]*model.TensionHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TensionHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTensionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTensionHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.TensionHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTensionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOTensionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionHasFilter(ctx context.Context, v interface{}) (*model.TensionHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TensionHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTensionHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.TensionHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrder(ctx context.Context, v interface{}) (*model.TensionOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTensionOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTensionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx context.Context, v interface{}) (*model.TensionOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TensionOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTensionOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionOrderable(ctx context.Context, sel ast.SelectionSet, v *model.TensionOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionPatch(ctx context.Context, v interface{}) (*model.TensionPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTensionPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTensionRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRefᚄ(ctx context.Context, v interface{}) ([]*model.TensionRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TensionRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTensionRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionRef(ctx context.Context, v interface{}) (*model.TensionRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTensionRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTensionStatus2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, v interface{}) ([]*model.TensionStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TensionStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTensionStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTensionStatus2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, sel ast.SelectionSet, v []*model.TensionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTensionStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOTensionStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, v interface{}) (*model.TensionStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TensionStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTensionStatus2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatus(ctx context.Context, sel ast.SelectionSet, v *model.TensionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionStatus_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionStatusHash(ctx context.Context, v interface{}) (*model.TensionStatusHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTensionStatus_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTensionType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, v interface{}) ([]*model.TensionType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TensionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTensionType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTensionType2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, sel ast.SelectionSet, v []*model.TensionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTensionType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOTensionType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, v interface{}) (*model.TensionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TensionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTensionType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionType(ctx context.Context, sel ast.SelectionSet, v *model.TensionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTensionType_hash2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐTensionTypeHash(ctx context.Context, v interface{}) (*model.TensionTypeHash, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTensionType_hash(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpdateBlobPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateBlobPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateBlobPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateBlobPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateCommentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateCommentPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateCommentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCommentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateContractPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateContractPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateContractPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateContractPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateEventCountPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventCountPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateEventCountPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateEventCountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateEventFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventFragmentPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateEventFragmentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateEventFragmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateEventPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateEventPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateEventPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateLabelPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateLabelPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateLabelPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateLabelPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateMandatePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateMandatePayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateMandatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateMandatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateNodeFragmentPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodeFragmentPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateNodeFragmentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateNodeFragmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateNodePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNodePayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateNodePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateNodePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateNotifPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateNotifPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateNotifPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateNotifPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateOrgaAggPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateOrgaAggPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateOrgaAggPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateOrgaAggPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdatePendingUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePendingUserPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdatePendingUserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdatePendingUserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdatePostPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdatePostPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdatePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdatePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateProjectColumnPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectColumnPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateProjectColumnPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateProjectColumnPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateProjectPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateProjectPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateProjectPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateProjectTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateProjectTensionPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateProjectTensionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateProjectTensionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateReactionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateReactionPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateReactionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateReactionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateRoleExtPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateRoleExtPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateRoleExtPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateRoleExtPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateTensionPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateTensionPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateTensionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateTensionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateUserEventPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserEventPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateUserEventPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateUserEventPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateUserPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateUserPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateUserPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateUserRightsPayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateUserRightsPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateUserRightsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateUserRightsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateVotePayload2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUpdateVotePayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateVotePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateVotePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUser2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUser2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.UserAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserAggregateResult(ctx, sel, v)
}

func (ec *executionContext) marshalOUserEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx context.Context, sel ast.SelectionSet, v []*model.UserEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserEvent2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUserEvent2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEvent(ctx context.Context, sel ast.SelectionSet, v *model.UserEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserEvent(ctx, sel, v)
}

func (ec *executionContext) marshalOUserEventAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.UserEventAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserEventAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserEventFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx context.Context, v interface{}) ([]*model.UserEventFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserEventFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserEventFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventFilter(ctx context.Context, v interface{}) (*model.UserEventFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserEventFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserEventHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventHasFilter(ctx context.Context, v interface{}) ([]*model.UserEventHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserEventHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserEventHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUserEventHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.UserEventHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserEventHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOUserEventHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventHasFilter(ctx context.Context, v interface{}) (*model.UserEventHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UserEventHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserEventHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.UserEventHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserEventOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrder(ctx context.Context, v interface{}) (*model.UserEventOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserEventOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserEventOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrderable(ctx context.Context, v interface{}) (*model.UserEventOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UserEventOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserEventOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventOrderable(ctx context.Context, sel ast.SelectionSet, v *model.UserEventOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserEventPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventPatch(ctx context.Context, v interface{}) (*model.UserEventPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserEventPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserEventRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventRefᚄ(ctx context.Context, v interface{}) ([]*model.UserEventRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserEventRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserEventRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserEventRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx context.Context, v interface{}) ([]*model.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserFilter(ctx context.Context, v interface{}) (*model.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserHasFilter(ctx context.Context, v interface{}) ([]*model.UserHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUserHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.UserHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOUserHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserHasFilter(ctx context.Context, v interface{}) (*model.UserHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UserHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.UserHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrder(ctx context.Context, v interface{}) (*model.UserOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx context.Context, v interface{}) (*model.UserOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UserOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserOrderable(ctx context.Context, sel ast.SelectionSet, v *model.UserOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserPatch(ctx context.Context, v interface{}) (*model.UserPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRefᚄ(ctx context.Context, v interface{}) ([]*model.UserRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRef(ctx context.Context, v interface{}) (*model.UserRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserRights2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx context.Context, sel ast.SelectionSet, v []*model.UserRights) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserRights2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserRights2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRights(ctx context.Context, sel ast.SelectionSet, v *model.UserRights) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserRights(ctx, sel, v)
}

func (ec *executionContext) marshalOUserRightsAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.UserRightsAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserRightsAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserRightsFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx context.Context, v interface{}) ([]*model.UserRightsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserRightsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserRightsFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsFilter(ctx context.Context, v interface{}) (*model.UserRightsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRightsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserRightsHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsHasFilter(ctx context.Context, v interface{}) ([]*model.UserRightsHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserRightsHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserRightsHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUserRightsHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.UserRightsHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserRightsHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOUserRightsHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsHasFilter(ctx context.Context, v interface{}) (*model.UserRightsHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UserRightsHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserRightsHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.UserRightsHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserRightsOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrder(ctx context.Context, v interface{}) (*model.UserRightsOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRightsOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserRightsOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx context.Context, v interface{}) (*model.UserRightsOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UserRightsOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserRightsOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsOrderable(ctx context.Context, sel ast.SelectionSet, v *model.UserRightsOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUserRightsPatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsPatch(ctx context.Context, v interface{}) (*model.UserRightsPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRightsPatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserRightsRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserRightsRef(ctx context.Context, v interface{}) (*model.UserRightsRef, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRightsRef(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserType(ctx context.Context, v interface{}) (*model.UserType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UserType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserType2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐUserType(ctx context.Context, sel ast.SelectionSet, v *model.UserType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOVote2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx context.Context, sel ast.SelectionSet, v []*model.Vote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVote2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVote2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Vote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVote2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOVote2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVote(ctx context.Context, sel ast.SelectionSet, v *model.Vote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Vote(ctx, sel, v)
}

func (ec *executionContext) marshalOVoteAggregateResult2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteAggregateResult(ctx context.Context, sel ast.SelectionSet, v *model.VoteAggregateResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoteAggregateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVoteFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx context.Context, v interface{}) ([]*model.VoteFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.VoteFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVoteFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteFilter(ctx context.Context, v interface{}) (*model.VoteFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVoteFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVoteHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteHasFilter(ctx context.Context, v interface{}) ([]*model.VoteHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.VoteHasFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVoteHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteHasFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVoteHasFilter2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteHasFilter(ctx context.Context, sel ast.SelectionSet, v []*model.VoteHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVoteHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteHasFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOVoteHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteHasFilter(ctx context.Context, v interface{}) (*model.VoteHasFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.VoteHasFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVoteHasFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteHasFilter(ctx context.Context, sel ast.SelectionSet, v *model.VoteHasFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOVoteOrder2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrder(ctx context.Context, v interface{}) (*model.VoteOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVoteOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVoteOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrderable(ctx context.Context, v interface{}) (*model.VoteOrderable, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.VoteOrderable)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVoteOrderable2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteOrderable(ctx context.Context, sel ast.SelectionSet, v *model.VoteOrderable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOVotePatch2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVotePatch(ctx context.Context, v interface{}) (*model.VotePatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVotePatch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVoteRef2ᚕᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRefᚄ(ctx context.Context, v interface{}) ([]*model.VoteRef, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.VoteRef, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVoteRef2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐVoteRef(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWithinFilter2ᚖfractaleᚋfractal6ᚗgoᚋgraphᚋmodelᚐWithinFilter(ctx context.Context, v interface{}) (*model.WithinFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWithinFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
