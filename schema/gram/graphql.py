#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class GRAPHQLBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig = None, **settings):
        base_config = ParserConfig.new(
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re='',
            eol_comments_re='',
            ignorecase=False,
            namechars='',
            parseinfo=False,
        )
        config = base_config.replace_config(config)
        config = config.merge(**settings)
        super().__init__(text, config=config)


class GRAPHQLParser(Parser):
    def __init__(self, config: ParserConfig = None, **settings):
        base_config = ParserConfig.new(
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re='',
            eol_comments_re='',
            ignorecase=False,
            namechars='',
            parseinfo=False,
            keywords=KEYWORDS,
        )
        config = base_config.replace_config(config)
        config = config.merge(**settings)
        super().__init__(config=config)

    @tatsumasu()
    def _start_(self):  # noqa

        def block0():
            self._definition_()
        self._positive_closure(block0)
        self._check_eof()

    @tatsumasu()
    def _definition_(self):  # noqa
        with self._choice():
            with self._option():
                self._COMMENTS_()
            with self._option():
                self._executable_definition_()
            with self._option():
                self._type_system_definition_()
            self._error(
                'expecting one of: '
                '<LINE_COMMENT> <DOC> <COMMENTS>'
                '<operation_definition>'
                '<fragment_definition>'
                '<executable_definition>'
                '<schema_definition>'
                '<directive_definition>'
                '<interface_type_definition>'
                '<enum_type_definition>'
                '<object_type_definition>'
                '<type_system_extension>'
                '<input_object_type_definition>'
                '<union_type_definition>'
                '<scalar_type_definition>'
                '<type_system_definition>'
            )

    @tatsumasu()
    def _executable_definition_(self):  # noqa
        with self._choice():
            with self._option():
                self._operation_definition_()
            with self._option():
                self._fragment_definition_()
            self._error(
                'expecting one of: '
                '<operation_type> <selection_set>'
                "<operation_definition> 'fragment'"
                '<fragment_definition>'
            )

    @tatsumasu()
    def _operation_definition_(self):  # noqa
        with self._choice():
            with self._option():
                self._operation_type_()
                with self._optional():
                    self._name_()
                with self._optional():
                    self._variable_definitions_()
                with self._optional():
                    self._directives_()
                self._selection_set_()
            with self._option():
                self._selection_set_()
            self._error(
                'expecting one of: '
                "'query' 'mutation' 'subscription'"
                "<operation_type> '{' <selection_set>"
            )

    @tatsumasu()
    def _operation_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('query')
            with self._option():
                self._token('mutation')
            with self._option():
                self._token('subscription')
            self._error(
                'expecting one of: '
                "'query' 'mutation' 'subscription'"
            )

    @tatsumasu()
    def _selection_set_(self):  # noqa
        self._token('{')

        def block0():
            self._selection_()
        self._positive_closure(block0)
        self._token('}')

    @tatsumasu()
    def _selection_(self):  # noqa
        with self._choice():
            with self._option():
                self._field_()
            with self._option():
                self._fragment_spread_()
            with self._option():
                self._inline_fragment_()
            self._error(
                'expecting one of: '
                "<name> <alias> <field> '...'"
                '<fragment_spread> <inline_fragment>'
            )

    @tatsumasu()
    def _field_(self):  # noqa
        with self._optional():
            self._alias_()
        self._name_()
        with self._optional():
            self._arguments_()
        with self._optional():
            self._directives_()
        with self._optional():
            self._selection_set_()

    @tatsumasu()
    def _arguments_(self):  # noqa
        self._token('(')
        self._argument_()

        def block0():
            self._token(',')
            self._argument_()
        self._closure(block0)
        self._token(')')

    @tatsumasu()
    def _argument_(self):  # noqa

        def block0():
            self._LINE_COMMENT_()
        self._closure(block0)
        self._name_()
        self._token(':')
        with self._group():
            with self._choice():
                with self._option():
                    self._value_()
                with self._option():
                    self._token('[')
                    self._value_()

                    def block2():
                        self._token(',')
                        self._value_()
                    self._closure(block2)
                    self._token(']')
                self._error(
                    'expecting one of: '
                    "<value> '['"
                )

    @tatsumasu()
    def _alias_(self):  # noqa
        self._name_()
        self._token(':')

    @tatsumasu()
    def _fragment_spread_(self):  # noqa
        self._token('...')
        self._fragment_name_()
        with self._optional():
            self._directives_()

    @tatsumasu()
    def _fragment_definition_(self):  # noqa
        self._token('fragment')
        self._fragment_name_()
        self._token('on')
        self._type_condition_()
        with self._optional():
            self._directives_()
        self._selection_set_()

    @tatsumasu()
    def _fragment_name_(self):  # noqa
        self._name_()

    @tatsumasu()
    def _type_condition_(self):  # noqa
        self._token('on')
        self._named_type_()

    @tatsumasu()
    def _inline_fragment_(self):  # noqa
        self._token('...')
        with self._optional():
            self._type_condition_()
        with self._optional():
            self._directives_()
        self._selection_set_()

    @tatsumasu()
    def _value_(self):  # noqa

        def block0():
            self._LINE_COMMENT_()
        self._closure(block0)
        self.__value_()

    @tatsumasu()
    def __value_(self):  # noqa
        with self._choice():
            with self._option():
                self._variable_()
            with self._option():
                self._int_value_()
            with self._option():
                self._float_value_()
            with self._option():
                self._string_value_()
            with self._option():
                self._boolean_value_()
            with self._option():
                self._null_value_()
            with self._option():
                self._enum_value_()
            with self._option():
                self._list_value_()
            with self._option():
                self._object_value_()
            self._error(
                'expecting one of: '
                "'$' <variable> <int> <int_value> <float>"
                '<float_value> <BLOCK_STRING> <STRING>'
                "<string_value> 'true' 'false'"
                "<boolean_value> 'null' <null_value>"
                "<name> <enum_value> '[' <list_value> '{'"
                '<object_value>'
            )

    @tatsumasu()
    def _int_value_(self):  # noqa
        self._int_()
        self.name_last_node('_join')
        self._define(
            ['_join'],
            []
        )

    @tatsumasu()
    def _float_value_(self):  # noqa
        self._float_()
        self.name_last_node('_join')
        self._define(
            ['_join'],
            []
        )

    @tatsumasu()
    def _boolean_value_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('true')
            with self._option():
                self._token('false')
            self._error(
                'expecting one of: '
                "'true' 'false'"
            )

    @tatsumasu()
    def _string_value_(self):  # noqa
        with self._choice():
            with self._option():
                self._BLOCK_STRING_()
            with self._option():
                self._STRING_()
            self._error(
                'expecting one of: '
                '\'"""\' <BLOCK_STRING> \'"\' <STRING>'
            )

    @tatsumasu()
    def _null_value_(self):  # noqa
        self._token('null')

    @tatsumasu()
    def _enum_value_(self):  # noqa
        self._name_()

    @tatsumasu()
    def _list_value_(self):  # noqa
        self._token('[')
        self._value_()

        def block0():
            self._token(',')
            self._value_()
        self._closure(block0)
        self._token(']')

    @tatsumasu()
    def _object_value_(self):  # noqa
        self._token('{')
        self._object_field_()
        self._token('}')

    @tatsumasu()
    def _object_field_(self):  # noqa
        self._name_()
        self._token(':')
        self._value_()

    @tatsumasu()
    def _variable_(self):  # noqa
        self._token('$')
        self._name_()

    @tatsumasu()
    def _variable_definitions_(self):  # noqa
        self._token('(')

        def block0():
            self._variable_definition_()
        self._positive_closure(block0)
        self._token(')')

    @tatsumasu()
    def _variable_definition_(self):  # noqa
        self._variable_()
        self._token(':')
        self._type_()
        with self._optional():
            self._default_value_()

    @tatsumasu()
    def _default_value_(self):  # noqa
        self._token('=')
        self._value_()

    @tatsumasu()
    def _type_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._named_type_()
                    with self._optional():
                        self._token('!')
                with self._option():
                    self._list_type_()
                    with self._optional():
                        self._token('!')
                self._error(
                    'expecting one of: '
                    "<name> <named_type> '[' <list_type>"
                )
        self.name_last_node('_type')
        self._define(
            ['_type'],
            []
        )

    @tatsumasu()
    def _named_type_(self):  # noqa
        self._name_()

    @tatsumasu()
    def _list_type_(self):  # noqa
        self._token('[')
        self._type_()
        self._token(']')

    @tatsumasu()
    def _directives_(self):  # noqa

        def block0():
            self._directive_()
        self._positive_closure(block0)

    @tatsumasu()
    def _directive_(self):  # noqa
        self._token('@')
        self.name_last_node('_cst__bb')
        self._name_()
        self.name_last_node('_name')
        with self._optional():
            self._arguments_()
        self.name_last_node('_args')
        self._define(
            ['_cst__bb', '_name', '_args'],
            []
        )

    @tatsumasu()
    def _type_system_definition_(self):  # noqa
        with self._choice():
            with self._option():
                self._schema_definition_()
                self.name_last_node('schema_definition')
                self._define(
                    ['schema_definition'],
                    []
                )
            with self._option():
                self._directive_definition_()
                self.name_last_node('directive_definition')
                self._define(
                    ['directive_definition'],
                    []
                )
            with self._option():
                self._interface_type_definition_()
                self.name_last_node('interface_definition')
                self._define(
                    ['interface_definition'],
                    []
                )
            with self._option():
                self._enum_type_definition_()
                self.name_last_node('enum_definition')
                self._define(
                    ['enum_definition'],
                    []
                )
            with self._option():
                self._object_type_definition_()
                self.name_last_node('type_definition')
                self._define(
                    ['type_definition'],
                    []
                )
            with self._option():
                self._type_system_extension_()
                self.name_last_node('extension_definition')
                self._define(
                    ['extension_definition'],
                    []
                )
            with self._option():
                self._input_object_type_definition_()
                self.name_last_node('input_definition')
                self._define(
                    ['input_definition'],
                    []
                )
            with self._option():
                self._union_type_definition_()
                self.name_last_node('union_definition')
                self._define(
                    ['union_definition'],
                    []
                )
            with self._option():
                self._scalar_type_definition_()
                self.name_last_node('scalar_definition')
                self._define(
                    ['scalar_definition'],
                    []
                )
            self._error(
                'expecting one of: '
                "'schema' <schema_definition> 'directive'"
                '<BLOCK_STRING> <STRING> <string_value>'
                '<description> <directive_definition>'
                "'interface' <interface_type_definition>"
                "'enum' <enum_type_definition> 'type'"
                '<object_type_definition>'
                '<schema_extension> <type_extension>'
                "<type_system_extension> 'input'"
                "<input_object_type_definition> 'union'"
                "<union_type_definition> 'scalar'"
                '<scalar_type_definition>'
            )
        self._define(
            ['schema_definition', 'directive_definition', 'interface_definition', 'enum_definition', 'type_definition', 'extension_definition', 'input_definition', 'union_definition', 'scalar_definition'],
            []
        )

    @tatsumasu()
    def _type_system_extension_(self):  # noqa
        with self._choice():
            with self._option():
                self._schema_extension_()
            with self._option():
                self._type_extension_()
            self._error(
                'expecting one of: '
                "'extend' <schema_extension>"
                '<scalar_type_extension>'
                '<object_type_extension>'
                '<interface_type_extension>'
                '<union_type_extension>'
                '<enum_type_extension>'
                '<input_object_type_extension>'
                '<type_extension>'
            )

    @tatsumasu()
    def _schema_definition_(self):  # noqa
        self._token('schema')
        with self._optional():
            self._directives_()
        self._token('{')

        def block0():
            self._root_operation_type_definition_()
        self._positive_closure(block0)
        self._token('}')

    @tatsumasu()
    def _root_operation_type_definition_(self):  # noqa
        self._operation_type_()
        self._token(':')
        self._named_type_()

    @tatsumasu()
    def _schema_extension_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('extend')
                self._token('schema')
                with self._optional():
                    self._directives_()
                self._token('{')

                def block1():
                    self._operation_type_definition_()
                self._positive_closure(block1)
                self._token('}')
            with self._option():
                self._token('extend')
                self._token('schema')
                self._directives_()
            self._error(
                'expecting one of: '
                "'extend'"
            )

    @tatsumasu()
    def _operation_type_definition_(self):  # noqa
        with self._group():
            self._operation_type_()
            self._token(':')
            self._named_type_()
        self.name_last_node('field')
        self._define(
            ['field'],
            []
        )

    @tatsumasu()
    def _description_(self):  # noqa
        self._string_value_()

    @tatsumasu()
    def _type_extension_(self):  # noqa
        with self._choice():
            with self._option():
                self._scalar_type_extension_()
            with self._option():
                self._object_type_extension_()
            with self._option():
                self._interface_type_extension_()
            with self._option():
                self._union_type_extension_()
            with self._option():
                self._enum_type_extension_()
            with self._option():
                self._input_object_type_extension_()
            self._error(
                'expecting one of: '
                "'extends' <scalar_type_extension>"
                "'extend' <object_type_extension>"
                '<interface_type_extension>'
                '<union_type_extension>'
                '<enum_type_extension>'
                '<input_object_type_extension>'
            )

    @tatsumasu()
    def _scalar_type_definition_(self):  # noqa
        with self._optional():
            self._description_()
        self._token('scalar')
        self._name_()
        with self._optional():
            self._directives_()

    @tatsumasu()
    def _scalar_type_extension_(self):  # noqa
        self._token('extends')
        self._token('scalar')
        self._name_()
        self._directives_()

    @tatsumasu()
    def _object_type_definition_(self):  # noqa
        with self._optional():
            self._description_()
        self._token('type')
        self.name_last_node('_cst')
        self._name_()
        self.name_last_node('_name')
        with self._optional():
            self._implements_interfaces_()
        self.name_last_node('_implements')
        with self._optional():
            self._directives_()
        self.name_last_node('_directives')
        with self._optional():
            self._fields_definition_()
        self.name_last_node('_fields')
        self._define(
            ['_cst', '_name', '_implements', '_directives', '_fields'],
            []
        )

    @tatsumasu()
    @leftrec
    def _implements_interfaces_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('implements')
                with self._optional():
                    self._token('&')
                self._named_type_()
            with self._option():
                self._implements_interfaces_()
                self._token('&')
                self._named_type_()
            self._error(
                'expecting one of: '
                "'implements' <implements_interfaces>"
            )

    @tatsumasu()
    def _fields_definition_(self):  # noqa
        self._token('{')

        def block0():
            self.__field_definition_()
        self._positive_closure(block0)
        self._token('}')

    @tatsumasu()
    def __field_definition_(self):  # noqa
        self._field_definition_()
        self.name_last_node('field')
        self._define(
            ['field'],
            []
        )

    @tatsumasu()
    def _field_definition_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._description_()
                self._name_()
                self.name_last_node('_name')
                with self._optional():
                    self._arguments_definition_()
                self.name_last_node('args')
                self._token(':')
                self.name_last_node('_cst')
                self._type_()
                self.name_last_node('_type')
                with self._optional():
                    self._directives_()
                self.name_last_node('_directives')
                self._define(
                    ['_name', 'args', '_cst', '_type', '_directives'],
                    []
                )
            with self._option():
                self._COMMENTS_()
            self._error(
                'expecting one of: '
                '<_name> <name> <BLOCK_STRING> <STRING>'
                '<string_value> \'"""\' \'"\' <description>'
                '<LINE_COMMENT> <DOC> <COMMENTS>'
            )
        self._define(
            ['_name', 'args', '_cst', '_type', '_directives'],
            []
        )

    @tatsumasu()
    def _arguments_definition_(self):  # noqa
        self._token('(')
        self.__input_value_definition_()

        def block0():
            self._token(',')
            self.__input_value_definition_()
        self._closure(block0)
        self._token(')')

    @tatsumasu()
    def __input_value_definition_(self):  # noqa
        self._input_value_definition_()
        self.name_last_node('field')
        self._define(
            ['field'],
            []
        )

    @tatsumasu()
    def _input_value_definition_(self):  # noqa
        with self._optional():
            self._description_()
        self._name_()
        self.name_last_node('_name')
        self._token(':')
        self.name_last_node('_cst')
        self._type_()
        self.name_last_node('_type')
        with self._optional():
            self._default_value_()
        self.name_last_node('_dv')
        with self._optional():
            self._directives_()
        self.name_last_node('_directives')
        self._define(
            ['_name', '_cst', '_type', '_dv', '_directives'],
            []
        )

    @tatsumasu()
    def _object_type_extension_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('extend')
                self._token('type')
                self._name_()
                with self._optional():
                    self._implements_interfaces_()
                with self._optional():
                    self._directives_()
                self._fields_definition_()
            with self._option():
                self._token('extend')
                self._token('type')
                self._name_()
                with self._optional():
                    self._implements_interfaces_()
                self._directives_()
            with self._option():
                self._token('extend')
                self._token('type')
                self._name_()
                self._implements_interfaces_()
            self._error(
                'expecting one of: '
                "'extend'"
            )

    @tatsumasu()
    def _interface_type_definition_(self):  # noqa
        with self._optional():
            self._description_()
        self._token('interface')
        self.name_last_node('_cst')
        self._name_()
        self.name_last_node('_name')
        with self._optional():
            self._directives_()
        self.name_last_node('_directives')
        with self._optional():
            self._fields_definition_()
        self.name_last_node('_fields')
        self._define(
            ['_cst', '_name', '_directives', '_fields'],
            []
        )

    @tatsumasu()
    def _interface_type_extension_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('extend')
                self._token('interface')
                self._name_()
                with self._optional():
                    self._directives_()
                self._fields_definition_()
            with self._option():
                self._token('extend')
                self._token('interface')
                self._name_()
                self._directives_()
            self._error(
                'expecting one of: '
                "'extend'"
            )

    @tatsumasu()
    def _union_type_definition_(self):  # noqa
        with self._optional():
            self._description_()
        self._token('union')
        self._name_()
        with self._optional():
            self._directives_()
        with self._optional():
            self._union_member_types_()

    @tatsumasu()
    def _union_member_types_(self):  # noqa
        self._token('=')
        with self._optional():
            self._token('|')
        self._named_type_()

        def block0():
            self._token('|')
            self._named_type_()
        self._closure(block0)

    @tatsumasu()
    def _union_type_extension_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('extend')
                self._token('union')
                self._name_()
                with self._optional():
                    self._directives_()
                self._union_member_types_()
            with self._option():
                self._token('extend')
                self._token('union')
                self._name_()
                self._directives_()
            self._error(
                'expecting one of: '
                "'extend'"
            )

    @tatsumasu()
    def _enum_type_definition_(self):  # noqa
        with self._optional():
            self._description_()
        self._token('enum')
        self._name_()
        with self._optional():
            self._directives_()
        with self._optional():
            self._enum_values_definition_()

    @tatsumasu()
    def _enum_values_definition_(self):  # noqa
        self._token('{')

        def block0():
            self.__enum_value_definition_()
        self._positive_closure(block0)
        self._token('}')

    @tatsumasu()
    def __enum_value_definition_(self):  # noqa
        self._enum_value_definition_()
        self.name_last_node('field')
        self._define(
            ['field'],
            []
        )

    @tatsumasu()
    def _enum_value_definition_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._description_()
                self._enum_value_()
                with self._optional():
                    self._directives_()
            with self._option():
                self._COMMENTS_()
            self._error(
                'expecting one of: '
                '<name> <_name> <enum_value>'
                '<BLOCK_STRING> <STRING> <string_value>'
                '\'"""\' \'"\' <description> <LINE_COMMENT>'
                '<DOC> <COMMENTS>'
            )

    @tatsumasu()
    def _enum_type_extension_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('extend')
                self._token('enum')
                self._name_()
                with self._optional():
                    self._directives_()
                self._enum_values_definition_()
            with self._option():
                self._token('extend')
                self._token('enum')
                self._name_()
                self._directives_()
            self._error(
                'expecting one of: '
                "'extend'"
            )

    @tatsumasu()
    def _input_object_type_definition_(self):  # noqa
        with self._optional():
            self._description_()
        self._token('input')
        self.name_last_node('_cst')
        self._name_()
        self.name_last_node('_name')
        with self._optional():
            self._directives_()
        self.name_last_node('_directives')
        with self._optional():
            self._input_fields_definition_()
        self.name_last_node('_fields')
        self._define(
            ['_cst', '_name', '_directives', '_fields'],
            []
        )

    @tatsumasu()
    def _input_fields_definition_(self):  # noqa
        self._token('{')

        def block0():
            self.__input_value_definition_()
        self._positive_closure(block0)
        self._token('}')

    @tatsumasu()
    def _input_object_type_extension_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('extend')
                self._token('input')
                self._name_()
                with self._optional():
                    self._directives_()
                self._input_fields_definition_()
            with self._option():
                self._token('extend')
                self._token('input')
                self._name_()
                self._directives_()
            self._error(
                'expecting one of: '
                "'extend'"
            )

    @tatsumasu()
    def _directive_definition_(self):  # noqa
        with self._optional():
            self._description_()
        self._token('directive')
        self.name_last_node('_directive__ba')
        self._token('@')
        self.name_last_node('_cst')
        self._name_()
        self.name_last_node('_name')
        with self._optional():
            self._arguments_definition_()
        self.name_last_node('args')
        self._token('on')
        self.name_last_node('_cst__bs')
        self._directive_locations_()
        self.name_last_node('_locations')
        self._define(
            ['_directive__ba', '_cst', '_name', 'args', '_cst__bs', '_locations'],
            []
        )

    @tatsumasu()
    def _directive_locations_(self):  # noqa
        self._directive_location_()

        def block0():
            self._token('|')
            self._directive_location_()
        self._closure(block0)

    @tatsumasu()
    def _directive_location_(self):  # noqa
        with self._choice():
            with self._option():
                self._type_system_directive_location_()
            with self._option():
                self._executable_directive_location_()
            self._error(
                'expecting one of: '
                "'SCHEMA' 'SCALAR' 'OBJECT'"
                "'FIELD_DEFINITION' 'ARGUMENT_DEFINITION'"
                "'INTERFACE' 'UNION' 'ENUM' 'ENUM_VALUE'"
                "'INPUT_OBJECT' 'INPUT_FIELD_DEFINITION'"
                "<type_system_directive_location> 'QUERY'"
                "'MUTATION' 'SUBSCRIPTION' 'FIELD'"
                "'FRAGMENT_DEFINITION' 'FRAGMENT_SPREAD'"
                "'INLINE_FRAGMENT'"
                '<executable_directive_location>'
            )

    @tatsumasu()
    def _executable_directive_location_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('QUERY')
            with self._option():
                self._token('MUTATION')
            with self._option():
                self._token('SUBSCRIPTION')
            with self._option():
                self._token('FIELD')
            with self._option():
                self._token('FRAGMENT_DEFINITION')
            with self._option():
                self._token('FRAGMENT_SPREAD')
            with self._option():
                self._token('INLINE_FRAGMENT')
            self._error(
                'expecting one of: '
                "'QUERY' 'MUTATION' 'SUBSCRIPTION'"
                "'FIELD' 'FRAGMENT_DEFINITION'"
                "'FRAGMENT_SPREAD' 'INLINE_FRAGMENT'"
            )

    @tatsumasu()
    def _type_system_directive_location_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('SCHEMA')
            with self._option():
                self._token('SCALAR')
            with self._option():
                self._token('OBJECT')
            with self._option():
                self._token('FIELD_DEFINITION')
            with self._option():
                self._token('ARGUMENT_DEFINITION')
            with self._option():
                self._token('INTERFACE')
            with self._option():
                self._token('UNION')
            with self._option():
                self._token('ENUM')
            with self._option():
                self._token('ENUM_VALUE')
            with self._option():
                self._token('INPUT_OBJECT')
            with self._option():
                self._token('INPUT_FIELD_DEFINITION')
            self._error(
                'expecting one of: '
                "'SCHEMA' 'SCALAR' 'OBJECT'"
                "'FIELD_DEFINITION' 'ARGUMENT_DEFINITION'"
                "'INTERFACE' 'UNION' 'ENUM' 'ENUM_VALUE'"
                "'INPUT_OBJECT' 'INPUT_FIELD_DEFINITION'"
            )

    @tatsumasu()
    def _name_(self):  # noqa
        self.__name_()
        self.name_last_node('name')
        self._define(
            ['name'],
            []
        )

    @tatsumasu()
    def __name_(self):  # noqa
        self._pattern('[_A-Za-z][_0-9A-Za-z]*')

    @tatsumasu()
    def _COMMENTS_(self):  # noqa
        with self._choice():
            with self._option():
                self._LINE_COMMENT_()
            with self._option():
                self._DOC_()
            self._error(
                'expecting one of: '
                '<_LINE_COMMENT> <LINE_COMMENT>'
                '<BLOCK_STRING> <DOC>'
            )

    @tatsumasu()
    def _LINE_COMMENT_(self):  # noqa
        self.__LINE_COMMENT_()
        self.name_last_node('comment')
        self._define(
            ['comment'],
            []
        )

    @tatsumasu()
    def __LINE_COMMENT_(self):  # noqa
        self._token('#')
        self._pattern('[^\\r\\n]*')

    @tatsumasu()
    def _DOC_(self):  # noqa
        self._BLOCK_STRING_()
        self.name_last_node('doc')
        self._define(
            ['doc'],
            []
        )

    @tatsumasu()
    def _CHARACTER_(self):  # noqa

        def block1():
            with self._group():
                with self._choice():
                    with self._option():
                        self._ESC_()
                    with self._option():
                        self._pattern('[^"\\\\]')
                    with self._option():
                        self._token('\\"')
                    self._error(
                        'expecting one of: '
                        '<ESC> [^"\\] \'\\\\"\''
                    )
        self._closure(block1)
        self.name_last_node('_join')
        self._define(
            ['_join'],
            []
        )

    @tatsumasu()
    def _STRING_(self):  # noqa
        self._token('"')
        self._CHARACTER_()
        self._token('"')

    @tatsumasu()
    def _BLOCK_STRING_(self):  # noqa
        self._token('"""')

        def sep0():
            with self._group():
                self._pattern('"[^"]|""[^"]')

        def block0():
            self._pattern('[^"]+')
        self._join(block0, sep0)
        self._token('"""')

    @tatsumasu()
    def _ESC_(self):  # noqa
        self._token('\\\\')
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern('[\\"\\\\\\/bfnrt]')
                with self._option():
                    self._UNICODE_()
                self._error(
                    'expecting one of: '
                    '[\\"\\\\/bfnrt] <UNICODE>'
                )

    @tatsumasu()
    def _UNICODE_(self):  # noqa
        self._token('u')
        self._HEX_()
        self._HEX_()
        self._HEX_()
        self._HEX_()

    @tatsumasu()
    def _HEX_(self):  # noqa
        self._pattern('[0-9a-fA-F]')

    @tatsumasu()
    def _NONZERO_DIGIT_(self):  # noqa
        self._pattern('[1-9]')

    @tatsumasu()
    def _DIGIT_(self):  # noqa
        self._pattern('[0-9]')

    @tatsumasu()
    def _FRACTIONAL_PART_(self):  # noqa
        self._token('.')

        def block0():
            self._DIGIT_()
        self._positive_closure(block0)

    @tatsumasu()
    def _EXPONENTIAL_PART_(self):  # noqa
        self._EXPONENT_INDICATOR_()
        with self._optional():
            self._SIGN_()

        def block0():
            self._DIGIT_()
        self._positive_closure(block0)

    @tatsumasu()
    def _EXPONENT_INDICATOR_(self):  # noqa
        self._pattern('[eE]')

    @tatsumasu()
    def _SIGN_(self):  # noqa
        self._pattern('[+-]')

    @tatsumasu()
    def _float_(self):  # noqa
        with self._choice():
            with self._option():
                self._int_()
                self._FRACTIONAL_PART_()
            with self._option():
                self._int_()
                self._EXPONENTIAL_PART_()
            with self._option():
                self._int_()
                self._FRACTIONAL_PART_()
                self._EXPONENTIAL_PART_()
            self._error(
                'expecting one of: '
                "'0' '-' [1-9] <NONZERO_DIGIT> <int>"
            )

    @tatsumasu()
    def _int_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._token('-')
                self._token('0')
            with self._option():
                with self._optional():
                    self._token('-')
                self._NONZERO_DIGIT_()

                def block1():
                    self._DIGIT_()
                self._closure(block1)
            self._error(
                'expecting one of: '
                "'0' '-' [1-9] <NONZERO_DIGIT>"
            )

    @tatsumasu()
    def _punctuator_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('[!$()]')
            with self._option():
                self._token('...')
            with self._option():
                self._pattern('[:=@[]{}|]')
            self._error(
                'expecting one of: '
                "[!$()] '...' [:=@[]{}|]"
            )

    @tatsumasu()
    def _EXP_(self):  # noqa
        self._pattern('[Ee][+\\-]?')
        self._int_()

    @tatsumasu()
    def _ws_(self):  # noqa
        self._pattern('[ \\t\\n\\r]+')

    @tatsumasu()
    def _unicode_bom_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('\\uEFBBBF')
                with self._option():
                    self._token('\\uFEFF')
                with self._option():
                    self._token('\\u0000FEFF')
                self._error(
                    'expecting one of: '
                    "'\\\\uEFBBBF' '\\\\uFEFF' '\\\\u0000FEFF'"
                )


class GRAPHQLSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def definition(self, ast):  # noqa
        return ast

    def executable_definition(self, ast):  # noqa
        return ast

    def operation_definition(self, ast):  # noqa
        return ast

    def operation_type(self, ast):  # noqa
        return ast

    def selection_set(self, ast):  # noqa
        return ast

    def selection(self, ast):  # noqa
        return ast

    def field(self, ast):  # noqa
        return ast

    def arguments(self, ast):  # noqa
        return ast

    def argument(self, ast):  # noqa
        return ast

    def alias(self, ast):  # noqa
        return ast

    def fragment_spread(self, ast):  # noqa
        return ast

    def fragment_definition(self, ast):  # noqa
        return ast

    def fragment_name(self, ast):  # noqa
        return ast

    def type_condition(self, ast):  # noqa
        return ast

    def inline_fragment(self, ast):  # noqa
        return ast

    def value(self, ast):  # noqa
        return ast

    def _value(self, ast):  # noqa
        return ast

    def int_value(self, ast):  # noqa
        return ast

    def float_value(self, ast):  # noqa
        return ast

    def boolean_value(self, ast):  # noqa
        return ast

    def string_value(self, ast):  # noqa
        return ast

    def null_value(self, ast):  # noqa
        return ast

    def enum_value(self, ast):  # noqa
        return ast

    def list_value(self, ast):  # noqa
        return ast

    def object_value(self, ast):  # noqa
        return ast

    def object_field(self, ast):  # noqa
        return ast

    def variable(self, ast):  # noqa
        return ast

    def variable_definitions(self, ast):  # noqa
        return ast

    def variable_definition(self, ast):  # noqa
        return ast

    def default_value(self, ast):  # noqa
        return ast

    def type(self, ast):  # noqa
        return ast

    def named_type(self, ast):  # noqa
        return ast

    def list_type(self, ast):  # noqa
        return ast

    def directives(self, ast):  # noqa
        return ast

    def directive(self, ast):  # noqa
        return ast

    def type_system_definition(self, ast):  # noqa
        return ast

    def type_system_extension(self, ast):  # noqa
        return ast

    def schema_definition(self, ast):  # noqa
        return ast

    def root_operation_type_definition(self, ast):  # noqa
        return ast

    def schema_extension(self, ast):  # noqa
        return ast

    def operation_type_definition(self, ast):  # noqa
        return ast

    def description(self, ast):  # noqa
        return ast

    def type_extension(self, ast):  # noqa
        return ast

    def scalar_type_definition(self, ast):  # noqa
        return ast

    def scalar_type_extension(self, ast):  # noqa
        return ast

    def object_type_definition(self, ast):  # noqa
        return ast

    def implements_interfaces(self, ast):  # noqa
        return ast

    def fields_definition(self, ast):  # noqa
        return ast

    def _field_definition(self, ast):  # noqa
        return ast

    def field_definition(self, ast):  # noqa
        return ast

    def arguments_definition(self, ast):  # noqa
        return ast

    def _input_value_definition(self, ast):  # noqa
        return ast

    def input_value_definition(self, ast):  # noqa
        return ast

    def object_type_extension(self, ast):  # noqa
        return ast

    def interface_type_definition(self, ast):  # noqa
        return ast

    def interface_type_extension(self, ast):  # noqa
        return ast

    def union_type_definition(self, ast):  # noqa
        return ast

    def union_member_types(self, ast):  # noqa
        return ast

    def union_type_extension(self, ast):  # noqa
        return ast

    def enum_type_definition(self, ast):  # noqa
        return ast

    def enum_values_definition(self, ast):  # noqa
        return ast

    def _enum_value_definition(self, ast):  # noqa
        return ast

    def enum_value_definition(self, ast):  # noqa
        return ast

    def enum_type_extension(self, ast):  # noqa
        return ast

    def input_object_type_definition(self, ast):  # noqa
        return ast

    def input_fields_definition(self, ast):  # noqa
        return ast

    def input_object_type_extension(self, ast):  # noqa
        return ast

    def directive_definition(self, ast):  # noqa
        return ast

    def directive_locations(self, ast):  # noqa
        return ast

    def directive_location(self, ast):  # noqa
        return ast

    def executable_directive_location(self, ast):  # noqa
        return ast

    def type_system_directive_location(self, ast):  # noqa
        return ast

    def name(self, ast):  # noqa
        return ast

    def _name(self, ast):  # noqa
        return ast

    def COMMENTS(self, ast):  # noqa
        return ast

    def LINE_COMMENT(self, ast):  # noqa
        return ast

    def _LINE_COMMENT(self, ast):  # noqa
        return ast

    def DOC(self, ast):  # noqa
        return ast

    def CHARACTER(self, ast):  # noqa
        return ast

    def STRING(self, ast):  # noqa
        return ast

    def BLOCK_STRING(self, ast):  # noqa
        return ast

    def ESC(self, ast):  # noqa
        return ast

    def UNICODE(self, ast):  # noqa
        return ast

    def HEX(self, ast):  # noqa
        return ast

    def NONZERO_DIGIT(self, ast):  # noqa
        return ast

    def DIGIT(self, ast):  # noqa
        return ast

    def FRACTIONAL_PART(self, ast):  # noqa
        return ast

    def EXPONENTIAL_PART(self, ast):  # noqa
        return ast

    def EXPONENT_INDICATOR(self, ast):  # noqa
        return ast

    def SIGN(self, ast):  # noqa
        return ast

    def float(self, ast):  # noqa
        return ast

    def int(self, ast):  # noqa
        return ast

    def punctuator(self, ast):  # noqa
        return ast

    def EXP(self, ast):  # noqa
        return ast

    def ws(self, ast):  # noqa
        return ast

    def unicode_bom(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = GRAPHQLParser()
    return parser.parse(
        text,
        rule_name=start,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, GRAPHQLParser, name='GRAPHQL')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
