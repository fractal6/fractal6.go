@@grammar::GRAPHQL
@@comments :: //
@@eol_comments :: //


# Each rule name/marker can be of the form -> name[__code]:
#  * {code} is intrepreded for space control
#  * if name starts with a '_' it is ignored (ie no newline is append),
#  * else, a newline is append.


start
    =
    {definition}+ $
    ;


definition
    =
    COMMENTS | executable_definition | type_system_definition
    ;


executable_definition
    =
    operation_definition | fragment_definition
    ;


operation_definition
    =
    | operation_type [name] [variable_definitions] [directives] selection_set
    | selection_set
    ;


operation_type
    =
    'query' | 'mutation' | 'subscription'
    ;


selection_set
    =
    '{' {selection}+ '}'
    ;


selection
    =
    field | fragment_spread | inline_fragment
    ;


field
    =
    [alias] name [arguments] [directives] [selection_set]
    ;


arguments
    =
    '(' argument {',' argument} ')'
    ;


argument
    =
    #Â allows Dgraph auth directives (| {...})
    {LINE_COMMENT} name ':' (value | '[' value {',' value} ']' )
    ;


alias
    =
    name ':'
    ;


fragment_spread
    =
    '...' fragment_name [directives]
    ;


fragment_definition
    =
    'fragment' fragment_name 'on' type_condition [directives] selection_set
    ;


fragment_name
    =
    name
    ;


type_condition
    =
    'on' named_type
    ;


inline_fragment
    =
    '...' [type_condition] [directives] selection_set
    ;


value = {LINE_COMMENT} _value;

_value
    =
    | variable
    | int_value
    | float_value
    | string_value
    | boolean_value
    | null_value
    | enum_value
    | list_value
    | object_value
    ;


int_value
    =
    _join:int
    ;


float_value
    =
    _join:float
    ;


boolean_value
    =
    'true' | 'false'
    ;


string_value
    =
    BLOCK_STRING | STRING
    ;


null_value
    =
    'null'
    ;


enum_value
    =
    name
    ;


list_value
    =
    '[' value {"," value} ']'
    ;


object_value
    =
    '{' object_field '}'
    ;


object_field
    =
    name ':' value
    ;


variable
    =
    '$' name
    ;


variable_definitions
    =
    '(' {variable_definition}+ ')'
    ;


variable_definition
    =
    variable ':' type [default_value]
    ;


default_value
    =
    '=' value
    ;


type
    =
    _type:(named_type ['!'] | list_type ['!'])
    ;


named_type
    =
    name
    ;


list_type
    =
    '[' type ']'
    ;


directives
    =
    {directive}+
    ;

directive
    =
   _cst__bb:'@' _name:name _args:[arguments] ;


type_system_definition
    =
    | schema_definition:schema_definition
    | directive_definition:directive_definition
    | interface_definition:interface_type_definition
    | enum_definition:enum_type_definition
    | type_definition:object_type_definition
    | extension_definition:type_system_extension
    | input_definition:input_object_type_definition
    | union_definition:union_type_definition
    | scalar_definition:scalar_type_definition
    ;




type_system_extension
    =
    schema_extension | type_extension
    ;


schema_definition
    =
    'schema' [directives] '{' {root_operation_type_definition}+ '}'
    ;


root_operation_type_definition
    =
    operation_type ':' named_type
    ;


schema_extension
    =
    | 'extend' 'schema' [directives] '{' {operation_type_definition}+ '}'
    | 'extend' 'schema' directives
    ;


operation_type_definition
    =
    field:(operation_type ':' named_type)
    ;


description
    =
    string_value
    ;


type_extension
    =
    | scalar_type_extension
    | object_type_extension
    | interface_type_extension
    | union_type_extension
    | enum_type_extension
    | input_object_type_extension
    ;


scalar_type_definition
    =
    [description] 'scalar' name [directives]
    ;


scalar_type_extension
    =
    'extends' 'scalar' name directives
    ;


object_type_definition
    =
    [description] _cst:'type' _name:name _implements:[implements_interfaces] _directives:[directives] _fields:[fields_definition]
    ;


implements_interfaces
    =
    'implements' ['&'] named_type | implements_interfaces '&' named_type
    ;


fields_definition
    =
    '{' {_field_definition}+ '}'
    ;

_field_definition
    =
    field:field_definition
    ;

field_definition
    =
    [description] _name:name args:[arguments_definition] _cst:':' _type:type _directives:[directives]
    | COMMENTS
    ;


arguments_definition
    =
    '(' _input_value_definition {',' _input_value_definition} ')'
    ;

_input_value_definition
    =
    field:input_value_definition
    ;

input_value_definition
    =
    [description] _name:name _cst:':' _type:type _dv:[default_value] _directives:[directives] ;


object_type_extension
    =
     'extend' 'type' name [implements_interfaces] [directives] fields_definition
    |'extend' 'type' name [implements_interfaces] directives
    |'extend' 'type' name implements_interfaces
    ;


interface_type_definition
    =
    [description] _cst:'interface' _name:name _directives:[directives] _fields:[fields_definition]
    ;


interface_type_extension
    =
    | 'extend' 'interface' name [directives] fields_definition
    | 'extend' 'interface' name directives
    ;


union_type_definition
    =
    [description] 'union' name [directives] [union_member_types]
    ;


union_member_types
    =
    '=' ['|'] named_type {'|' named_type}
    ;


union_type_extension
    =
    | 'extend' 'union' name [directives] union_member_types
    | 'extend' 'union' name directives
    ;


enum_type_definition
    =
    [description] 'enum' name [directives] [enum_values_definition]
    ;


enum_values_definition
    =
    '{' {_enum_value_definition}+ '}'
    ;

_enum_value_definition = field:enum_value_definition;

enum_value_definition
    =
    [description] enum_value [directives]
    | COMMENTS
    ;


enum_type_extension
    =
    | 'extend' 'enum' name [directives] enum_values_definition
    | 'extend' 'enum' name directives
    ;


input_object_type_definition
    =
    [description] _cst:'input' _name:name _directives:[directives] _fields:[input_fields_definition]
    ;


input_fields_definition
    =
    '{' {_input_value_definition}+ '}'
    ;


input_object_type_extension
    =
    | 'extend' 'input' name [directives] input_fields_definition
    | 'extend' 'input' name directives
    ;


directive_definition
    =
    [description] _directive__ba:'directive' _cst:'@' _name:name args:[arguments_definition] _cst__bs:'on' _locations:directive_locations
    ;


directive_locations
    =
    directive_location {'|' directive_location}
    ;


directive_location
    =
    type_system_directive_location | executable_directive_location
    ;


executable_directive_location
    =
    | 'QUERY'
    | 'MUTATION'
    | 'SUBSCRIPTION'
    | 'FIELD'
    | 'FRAGMENT_DEFINITION'
    | 'FRAGMENT_SPREAD'
    | 'INLINE_FRAGMENT'
    ;


type_system_directive_location
    =
    | 'SCHEMA'
    | 'SCALAR'
    | 'OBJECT'
    | 'FIELD_DEFINITION'
    | 'ARGUMENT_DEFINITION'
    | 'INTERFACE'
    | 'UNION'
    | 'ENUM'
    | 'ENUM_VALUE'
    | 'INPUT_OBJECT'
    | 'INPUT_FIELD_DEFINITION'
    ;


name = name:_name;

_name
    =
    /[_A-Za-z][_0-9A-Za-z]*/
    ;


COMMENTS
    =
    LINE_COMMENT | DOC
    ;

LINE_COMMENT
    =
    comment:_LINE_COMMENT
    ;

_LINE_COMMENT
    =
    '#' /[^\r\n]*/
    ;

DOC
    =
    doc:BLOCK_STRING
    ;


CHARACTER
    =
    _join:{( ESC | /[^"\\]/ | '\\"' )}
    ;


STRING
    =
    '"' CHARACTER '"'
    ;


BLOCK_STRING
    =
    # (/[\r\n]+|"[^"]|""[^"]|/)%{ /[^\r\n"]/ }*
    '"""' (/"[^"]|""[^"]/)%{ /[^"]+/ }* '"""'
    ;




ESC
    =
    '\\\\' (/[\"\\\/bfnrt]/ | UNICODE)
    ;


UNICODE
    =
    'u' HEX HEX HEX HEX
    ;


HEX
    =
    /[0-9a-fA-F]/
    ;


NONZERO_DIGIT
    =
    /[1-9]/
    ;


DIGIT
    =
    /[0-9]/
    ;


FRACTIONAL_PART
    =
    '.' {DIGIT}+
    ;


EXPONENTIAL_PART
    =
    EXPONENT_INDICATOR [SIGN] {DIGIT}+
    ;


EXPONENT_INDICATOR
    =
    /[eE]/
    ;


SIGN
    =
    /[+-]/
    ;


float
    =
    | int FRACTIONAL_PART
    | int EXPONENTIAL_PART
    | int FRACTIONAL_PART EXPONENTIAL_PART
    ;


int
    =
    ['-'] '0' | ['-'] NONZERO_DIGIT {DIGIT}
    ;


punctuator
    =
    /[!$()]/ | '...' | /[:=@[]{}|]/
    ;


EXP
    =
    /[Ee][+\-]?/ int
    ;


ws
    =
    /[ \t\n\r]+/
    ;

unicode_bom
    =
    ('\\uEFBBBF' | '\\uFEFF' | '\\u0000FEFF')
    ;

