directive @auth(password: AuthRule, query: AuthRule, add: AuthRule, update: AuthRule, delete: AuthRule) on OBJECT | INTERFACE

directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

directive @id on FIELD_DEFINITION

directive @cacheControl(maxAge: Int!) on QUERY

directive @cascade(fields: [String]) on FIELD

directive @hasInverse(field: String!) on FIELD_DEFINITION

directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION

directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION

directive @secret(field: String!, pred: String) on OBJECT | INTERFACE

directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION

directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM

directive @remoteResponse(name: String) on FIELD_DEFINITION

directive @lambda on FIELD_DEFINITION

directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE

directive @generate(query: GenerateQueryParams, mutation: GenerateMutationParams, subscription: Boolean) on OBJECT | INTERFACE

input AddBlobInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  tension: TensionRef!
  blob_type: BlobType!
  pushedFlag: DateTime
  archivedFlag: DateTime
  node: NodeFragmentRef
  md: String
}

type AddBlobPayload {
  blob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  numUids: Int
}

input AddCommentInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  reactions: [ReactionRef!]
}

type AddCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input AddContractInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  contractid: String!
  tension: TensionRef!
  status: ContractStatus!
  contract_type: ContractType!
  closedAt: DateTime
  event: EventFragmentRef!
  participants: [VoteRef!]!
  candidates: [UserRef!]
  pending_candidates: [PendingUserRef!]
  comments: [CommentRef!]
  isValidator: Boolean
}

type AddContractPayload {
  contract(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract]
  numUids: Int
}

input AddEventCountInput {
  unread_events: Int
  pending_contracts: Int
  assigned_tensions: Int
}

type AddEventCountPayload {
  eventCount(filter: EventCountFilter, order: EventCountOrder, first: Int, offset: Int): [EventCount]
  numUids: Int
}

input AddEventFragmentInput {
  event_type: TensionEvent!
  old: String
  new: String
}

type AddEventFragmentPayload {
  eventFragment(filter: EventFragmentFilter, order: EventFragmentOrder, first: Int, offset: Int): [EventFragment]
  numUids: Int
}

input AddEventInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  tension: TensionRef!
  event_type: TensionEvent!
  mentioned: TensionRef
  old: String
  new: String
}

type AddEventPayload {
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  numUids: Int
}

input AddLabelInput {
  rootnameid: String!
  name: String!
  description: String
  color: String
  tensions: [TensionRef!]
  nodes: [NodeRef!]
}

type AddLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  numUids: Int
}

input AddMandateInput {
  purpose: String!
  responsabilities: String
  domains: String
  policies: String
}

type AddMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  numUids: Int
}

input AddNodeFragmentInput {
  nameid: String
  name: String
  about: String
  mandate: MandateRef
  skills: [String!]
  visibility: NodeVisibility
  mode: NodeMode
  type_: NodeType
  first_link: String
  role_ext: String
  role_type: RoleType
  color: String
}

type AddNodeFragmentPayload {
  nodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  numUids: Int
}

input AddNodeInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  nameid: String!
  rootnameid: String!
  source: BlobRef
  name: String!
  about: String
  skills: [String!]
  isRoot: Boolean!
  parent: NodeRef
  type_: NodeType!
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  visibility: NodeVisibility!
  mode: NodeMode!
  rights: Int!
  isArchived: Boolean!
  isPersonal: Boolean
  userCanJoin: Boolean
  guestCanCreateTension: Boolean
  watchers: [UserRef!]
  children: [NodeRef!]
  labels: [LabelRef!]
  roles: [RoleExtRef!]
  projects: [ProjectRef!]
  pinned: [TensionRef!]
  role_ext: RoleExtRef
  role_type: RoleType
  color: String
  first_link: UserRef
  contracts: [VoteRef!]
  events_history: [EventRef!]
}

type AddNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  numUids: Int
}

input AddNotifInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  tension_: TensionRef
  contract: ContractRef
  link: String
}

type AddNotifPayload {
  notif(filter: NotifFilter, order: NotifOrder, first: Int, offset: Int): [Notif]
  numUids: Int
}

input AddOrgaAggInput {
  n_members: Int
  n_guests: Int
}

type AddOrgaAggPayload {
  orgaAgg(filter: OrgaAggFilter, order: OrgaAggOrder, first: Int, offset: Int): [OrgaAgg]
  numUids: Int
}

input AddPendingUserInput {
  updatedAt: DateTime
  username: String!
  password: String
  email: String!
  email_token: String
  token: String
  contracts: [ContractRef!]
  subscribe: Boolean
}

type AddPendingUserPayload {
  pendingUser(filter: PendingUserFilter, order: PendingUserOrder, first: Int, offset: Int): [PendingUser]
  numUids: Int
}

input AddProjectColumnInput {
  name: String!
  about: String
  pos: Int!
  tensions: [ProjectTensionRef!]
  project: ProjectRef!
}

type AddProjectColumnPayload {
  projectColumn(filter: ProjectColumnFilter, order: ProjectColumnOrder, first: Int, offset: Int): [ProjectColumn]
  numUids: Int
}

input AddProjectInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime!
  rootnameid: String!
  parentnameid: String!
  nameid: String!
  name: String!
  description: String
  status: ProjectStatus!
  columns: [ProjectColumnRef!]
  leaders: [NodeRef!]
  nodes: [NodeRef!]
}

type AddProjectPayload {
  project(filter: ProjectFilter, order: ProjectOrder, first: Int, offset: Int): [Project]
  numUids: Int
}

input AddProjectTensionInput {
  tension: TensionRef!
  pos: Int!
  pc: ProjectColumnRef!
}

type AddProjectTensionPayload {
  projectTension(filter: ProjectTensionFilter, order: ProjectTensionOrder, first: Int, offset: Int): [ProjectTension]
  numUids: Int
}

input AddReactionInput {
  reactionid: String!
  user: UserRef!
  comment: CommentRef!
  type_: Int!
}

type AddReactionPayload {
  reaction(filter: ReactionFilter, order: ReactionOrder, first: Int, offset: Int): [Reaction]
  numUids: Int
}

input AddRoleExtInput {
  rootnameid: String!
  name: String!
  about: String
  role_type: RoleType!
  color: String
  mandate: MandateRef
  roles: [NodeRef!]
  nodes: [NodeRef!]
}

type AddRoleExtPayload {
  roleExt(filter: RoleExtFilter, order: RoleExtOrder, first: Int, offset: Int): [RoleExt]
  numUids: Int
}

input AddTensionInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  emitter: NodeRef!
  emitterid: String!
  receiver: NodeRef!
  receiverid: String!
  title: String!
  type_: TensionType!
  status: TensionStatus!
  action: TensionAction
  assignees: [UserRef!]
  labels: [LabelRef!]
  comments: [CommentRef!]
  blobs: [BlobRef!]
  history: [EventRef!]
  mentions: [EventRef!]
  contracts: [ContractRef!]
  subscribers: [UserRef!]
  projects: [ProjectTensionRef!]
  n_comments: Int
}

type AddTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  numUids: Int
}

input AddUserEventInput {
  createdAt: DateTime!
  isRead: Boolean!
  user: UserRef!
  event: [EventKindRef!]
}

type AddUserEventPayload {
  userEvent(filter: UserEventFilter, order: UserEventOrder, first: Int, offset: Int): [UserEvent]
  numUids: Int
}

input AddUserInput {
  createdAt: DateTime!
  lastAck: DateTime!
  username: String!
  name: String
  email: String!
  password: String!
  bio: String
  location: String
  utc: String
  links: [String!]
  skills: [String!]
  notifyByEmail: Boolean!
  lang: Lang!
  subscriptions: [TensionRef!]
  watching: [NodeRef!]
  rights: UserRightsRef!
  roles: [NodeRef!]
  tensions_created: [TensionRef!]
  tensions_assigned: [TensionRef!]
  contracts: [ContractRef!]
  reactions: [ReactionRef!]
  events: [UserEventRef!]
  markAllAsRead: String
  event_count: EventCountRef
}

type AddUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input AddUserRightsInput {
  type_: UserType!
  canLogin: Boolean!
  canCreateRoot: Boolean!
  maxPublicOrga: Int!
  maxPrivateOrga: Int!
  hasEmailNotifications: Boolean!
}

type AddUserRightsPayload {
  userRights(filter: UserRightsFilter, order: UserRightsOrder, first: Int, offset: Int): [UserRights]
  numUids: Int
}

input AddVoteInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  voteid: String!
  contract: ContractRef!
  node: NodeRef!
  data: [Int!]!
}

type AddVotePayload {
  vote(filter: VoteFilter, order: VoteOrder, first: Int, offset: Int): [Vote]
  numUids: Int
}

input AuthRule {
  and: [AuthRule]
  or: [AuthRule]
  not: AuthRule
  rule: String
}

type Blob implements Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  tension(filter: TensionFilter): Tension!
  blob_type: BlobType!
  pushedFlag: DateTime
  archivedFlag: DateTime
  node(filter: NodeFragmentFilter): NodeFragment
  md: String
}

type BlobAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  messageMin: String
  messageMax: String
  pushedFlagMin: DateTime
  pushedFlagMax: DateTime
  archivedFlagMin: DateTime
  archivedFlagMax: DateTime
  mdMin: String
  mdMax: String
}

input BlobFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  blob_type: BlobType_hash
  pushedFlag: DateTimeFilter
  archivedFlag: DateTimeFilter
  has: [BlobHasFilter]
  and: [BlobFilter]
  or: [BlobFilter]
  not: BlobFilter
}

enum BlobHasFilter {
  createdBy
  createdAt
  updatedAt
  message
  tension
  blob_type
  pushedFlag
  archivedFlag
  node
  md
}

input BlobOrder {
  asc: BlobOrderable
  desc: BlobOrderable
  then: BlobOrder
}

enum BlobOrderable {
  createdAt
  updatedAt
  message
  pushedFlag
  archivedFlag
  md
}

input BlobPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  blob_type: BlobType
  pushedFlag: DateTime
  archivedFlag: DateTime
  node: NodeFragmentRef
  md: String
}

input BlobRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  blob_type: BlobType
  pushedFlag: DateTime
  archivedFlag: DateTime
  node: NodeFragmentRef
  md: String
}

enum BlobType {
  OnNode
  OnAbout
  OnMandate
  OnAboutAndMandate
  OnDoc
}

input BlobType_hash {
  eq: BlobType
  in: [BlobType]
}

type Comment implements Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  reactions(filter: ReactionFilter, order: ReactionOrder, first: Int, offset: Int): [Reaction!]
  reactionsAggregate(filter: ReactionFilter): ReactionAggregateResult
}

type CommentAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  messageMin: String
  messageMax: String
}

input CommentFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  has: [CommentHasFilter]
  and: [CommentFilter]
  or: [CommentFilter]
  not: CommentFilter
}

enum CommentHasFilter {
  createdBy
  createdAt
  updatedAt
  message
  reactions
}

input CommentOrder {
  asc: CommentOrderable
  desc: CommentOrderable
  then: CommentOrder
}

enum CommentOrderable {
  createdAt
  updatedAt
  message
}

input CommentPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  reactions: [ReactionRef!]
}

input CommentRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  reactions: [ReactionRef!]
}

input ContainsFilter {
  point: PointRef
  polygon: PolygonRef
}

type Contract implements Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  contractid: String!
  tension(filter: TensionFilter): Tension!
  status: ContractStatus!
  contract_type: ContractType!
  closedAt: DateTime
  event(filter: EventFragmentFilter): EventFragment!
  participants(filter: VoteFilter, order: VoteOrder, first: Int, offset: Int): [Vote!]!
  candidates(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User!]
  pending_candidates(filter: PendingUserFilter, order: PendingUserOrder, first: Int, offset: Int): [PendingUser!]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment!]
  isValidator: Boolean
  participantsAggregate(filter: VoteFilter): VoteAggregateResult
  candidatesAggregate(filter: UserFilter): UserAggregateResult
  pending_candidatesAggregate(filter: PendingUserFilter): PendingUserAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type ContractAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  messageMin: String
  messageMax: String
  contractidMin: String
  contractidMax: String
  closedAtMin: DateTime
  closedAtMax: DateTime
}

input ContractFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  contractid: StringHashFilter
  status: ContractStatus_hash
  contract_type: ContractType_hash
  closedAt: DateTimeFilter
  has: [ContractHasFilter]
  and: [ContractFilter]
  or: [ContractFilter]
  not: ContractFilter
}

enum ContractHasFilter {
  createdBy
  createdAt
  updatedAt
  message
  contractid
  tension
  status
  contract_type
  closedAt
  event
  participants
  candidates
  pending_candidates
  comments
  isValidator
}

input ContractOrder {
  asc: ContractOrderable
  desc: ContractOrderable
  then: ContractOrder
}

enum ContractOrderable {
  createdAt
  updatedAt
  message
  contractid
  closedAt
}

input ContractPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  status: ContractStatus
  contract_type: ContractType
  closedAt: DateTime
  event: EventFragmentRef
  participants: [VoteRef!]
  candidates: [UserRef!]
  pending_candidates: [PendingUserRef!]
  comments: [CommentRef!]
  isValidator: Boolean
}

input ContractRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  contractid: String
  tension: TensionRef
  status: ContractStatus
  contract_type: ContractType
  closedAt: DateTime
  event: EventFragmentRef
  participants: [VoteRef!]
  candidates: [UserRef!]
  pending_candidates: [PendingUserRef!]
  comments: [CommentRef!]
  isValidator: Boolean
}

enum ContractStatus {
  Open
  Closed
  Canceled
}

input ContractStatus_hash {
  eq: ContractStatus
  in: [ContractStatus]
}

enum ContractType {
  AnyCoordoDual
  AnyCandidates
  AnyCoordoSource
  AnyCoordoTarget
}

input ContractType_hash {
  eq: ContractType
  in: [ContractType]
}

input CustomHTTP {
  url: String!
  method: HTTPMethod!
  body: String
  graphql: String
  mode: Mode
  forwardHeaders: [String!]
  secretHeaders: [String!]
  introspectionHeaders: [String!]
  skipIntrospection: Boolean
}

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 mins 50.52 secs after the 23rd hour of Apr 12th 1985 in UTC.
"""
scalar DateTime

input DateTimeFilter {
  eq: DateTime
  in: [DateTime]
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  between: DateTimeRange
}

input DateTimeRange {
  min: DateTime!
  max: DateTime!
}

type DeleteBlobPayload {
  blob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  msg: String
  numUids: Int
}

type DeleteCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  msg: String
  numUids: Int
}

type DeleteContractPayload {
  contract(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract]
  msg: String
  numUids: Int
}

type DeleteEventCountPayload {
  eventCount(filter: EventCountFilter, order: EventCountOrder, first: Int, offset: Int): [EventCount]
  msg: String
  numUids: Int
}

type DeleteEventFragmentPayload {
  eventFragment(filter: EventFragmentFilter, order: EventFragmentOrder, first: Int, offset: Int): [EventFragment]
  msg: String
  numUids: Int
}

type DeleteEventPayload {
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  msg: String
  numUids: Int
}

type DeleteLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  msg: String
  numUids: Int
}

type DeleteMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  msg: String
  numUids: Int
}

type DeleteNodeFragmentPayload {
  nodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  msg: String
  numUids: Int
}

type DeleteNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  msg: String
  numUids: Int
}

type DeleteNotifPayload {
  notif(filter: NotifFilter, order: NotifOrder, first: Int, offset: Int): [Notif]
  msg: String
  numUids: Int
}

type DeleteOrgaAggPayload {
  orgaAgg(filter: OrgaAggFilter, order: OrgaAggOrder, first: Int, offset: Int): [OrgaAgg]
  msg: String
  numUids: Int
}

type DeletePendingUserPayload {
  pendingUser(filter: PendingUserFilter, order: PendingUserOrder, first: Int, offset: Int): [PendingUser]
  msg: String
  numUids: Int
}

type DeletePostPayload {
  post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  msg: String
  numUids: Int
}

type DeleteProjectColumnPayload {
  projectColumn(filter: ProjectColumnFilter, order: ProjectColumnOrder, first: Int, offset: Int): [ProjectColumn]
  msg: String
  numUids: Int
}

type DeleteProjectPayload {
  project(filter: ProjectFilter, order: ProjectOrder, first: Int, offset: Int): [Project]
  msg: String
  numUids: Int
}

type DeleteProjectTensionPayload {
  projectTension(filter: ProjectTensionFilter, order: ProjectTensionOrder, first: Int, offset: Int): [ProjectTension]
  msg: String
  numUids: Int
}

type DeleteReactionPayload {
  reaction(filter: ReactionFilter, order: ReactionOrder, first: Int, offset: Int): [Reaction]
  msg: String
  numUids: Int
}

type DeleteRoleExtPayload {
  roleExt(filter: RoleExtFilter, order: RoleExtOrder, first: Int, offset: Int): [RoleExt]
  msg: String
  numUids: Int
}

type DeleteTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  msg: String
  numUids: Int
}

type DeleteUserEventPayload {
  userEvent(filter: UserEventFilter, order: UserEventOrder, first: Int, offset: Int): [UserEvent]
  msg: String
  numUids: Int
}

type DeleteUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  msg: String
  numUids: Int
}

type DeleteUserRightsPayload {
  userRights(filter: UserRightsFilter, order: UserRightsOrder, first: Int, offset: Int): [UserRights]
  msg: String
  numUids: Int
}

type DeleteVotePayload {
  vote(filter: VoteFilter, order: VoteOrder, first: Int, offset: Int): [Vote]
  msg: String
  numUids: Int
}

enum DgraphIndex {
  int
  int64
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
  geo
}

enum ErrorBla {
  ContactCoordo
  OrgaLimitReached
  MemberLimitReached
  EmailLimitReached
  StorageLimitReached
}

type Event implements Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  tension(filter: TensionFilter): Tension!
  event_type: TensionEvent!
  mentioned(filter: TensionFilter): Tension
  old: String
  new: String
}

type EventAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  messageMin: String
  messageMax: String
  oldMin: String
  oldMax: String
  newMin: String
  newMax: String
}

type EventCount {
  unread_events: Int
  pending_contracts: Int
  assigned_tensions: Int
}

type EventCountAggregateResult {
  count: Int
  unread_eventsMin: Int
  unread_eventsMax: Int
  unread_eventsSum: Int
  unread_eventsAvg: Float
  pending_contractsMin: Int
  pending_contractsMax: Int
  pending_contractsSum: Int
  pending_contractsAvg: Float
  assigned_tensionsMin: Int
  assigned_tensionsMax: Int
  assigned_tensionsSum: Int
  assigned_tensionsAvg: Float
}

input EventCountFilter {
  has: [EventCountHasFilter]
  and: [EventCountFilter]
  or: [EventCountFilter]
  not: EventCountFilter
}

enum EventCountHasFilter {
  unread_events
  pending_contracts
  assigned_tensions
}

input EventCountOrder {
  asc: EventCountOrderable
  desc: EventCountOrderable
  then: EventCountOrder
}

enum EventCountOrderable {
  unread_events
  pending_contracts
  assigned_tensions
}

input EventCountPatch {
  unread_events: Int
  pending_contracts: Int
  assigned_tensions: Int
}

input EventCountRef {
  unread_events: Int
  pending_contracts: Int
  assigned_tensions: Int
}

input EventFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  event_type: TensionEvent_hash
  has: [EventHasFilter]
  and: [EventFilter]
  or: [EventFilter]
  not: EventFilter
}

type EventFragment {
  event_type: TensionEvent!
  old: String
  new: String
}

type EventFragmentAggregateResult {
  count: Int
  oldMin: String
  oldMax: String
  newMin: String
  newMax: String
}

input EventFragmentFilter {
  event_type: TensionEvent_hash
  has: [EventFragmentHasFilter]
  and: [EventFragmentFilter]
  or: [EventFragmentFilter]
  not: EventFragmentFilter
}

enum EventFragmentHasFilter {
  event_type
  old
  new
}

input EventFragmentOrder {
  asc: EventFragmentOrderable
  desc: EventFragmentOrderable
  then: EventFragmentOrder
}

enum EventFragmentOrderable {
  old
  new
}

input EventFragmentPatch {
  event_type: TensionEvent
  old: String
  new: String
}

input EventFragmentRef {
  event_type: TensionEvent
  old: String
  new: String
}

enum EventHasFilter {
  createdBy
  createdAt
  updatedAt
  message
  tension
  event_type
  mentioned
  old
  new
}

union EventKind = Event | Contract | Notif

input EventKindFilter {
  memberTypes: [EventKindType!]
  eventFilter: EventFilter
  contractFilter: ContractFilter
  notifFilter: NotifFilter
}

input EventKindRef {
  eventRef: EventRef
  contractRef: ContractRef
  notifRef: NotifRef
}

enum EventKindType {
  Event
  Contract
  Notif
}

input EventOrder {
  asc: EventOrderable
  desc: EventOrderable
  then: EventOrder
}

enum EventOrderable {
  createdAt
  updatedAt
  message
  old
  new
}

input EventPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  event_type: TensionEvent
  mentioned: TensionRef
  old: String
  new: String
}

input EventRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  event_type: TensionEvent
  mentioned: TensionRef
  old: String
  new: String
}

input FloatFilter {
  eq: Float
  in: [Float]
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: FloatRange
}

input FloatRange {
  min: Float!
  max: Float!
}

input GenerateMutationParams {
  add: Boolean
  update: Boolean
  delete: Boolean
}

input GenerateQueryParams {
  get: Boolean
  query: Boolean
  password: Boolean
  aggregate: Boolean
}

enum HTTPMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

input Int64Filter {
  eq: Int64
  in: [Int64]
  le: Int64
  lt: Int64
  ge: Int64
  gt: Int64
  between: Int64Range
}

input Int64Range {
  min: Int64!
  max: Int64!
}

input IntersectsFilter {
  polygon: PolygonRef
  multiPolygon: MultiPolygonRef
}

input IntFilter {
  eq: Int
  in: [Int]
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: IntRange
}

input IntRange {
  min: Int!
  max: Int!
}

type Label {
  id: ID!
  rootnameid: String!
  name: String!
  description: String
  color: String
  tensions(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]
  nodes(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  tensionsAggregate(filter: TensionFilter): TensionAggregateResult
  nodesAggregate(filter: NodeFilter): NodeAggregateResult
}

type LabelAggregateResult {
  count: Int
  rootnameidMin: String
  rootnameidMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
  colorMin: String
  colorMax: String
}

input LabelFilter {
  id: [ID!]
  rootnameid: StringHashFilter
  name: StringHashFilter_StringTermFilter
  has: [LabelHasFilter]
  and: [LabelFilter]
  or: [LabelFilter]
  not: LabelFilter
}

enum LabelHasFilter {
  rootnameid
  name
  description
  color
  tensions
  nodes
}

input LabelOrder {
  asc: LabelOrderable
  desc: LabelOrderable
  then: LabelOrder
}

enum LabelOrderable {
  rootnameid
  name
  description
  color
}

input LabelPatch {
  rootnameid: String
  name: String
  description: String
  color: String
  tensions: [TensionRef!]
  nodes: [NodeRef!]
}

input LabelRef {
  id: ID
  rootnameid: String
  name: String
  description: String
  color: String
  tensions: [TensionRef!]
  nodes: [NodeRef!]
}

enum Lang {
  EN
  FR
}

type Mandate {
  id: ID!
  purpose: String!
  responsabilities: String
  domains: String
  policies: String
}

type MandateAggregateResult {
  count: Int
  purposeMin: String
  purposeMax: String
  responsabilitiesMin: String
  responsabilitiesMax: String
  domainsMin: String
  domainsMax: String
  policiesMin: String
  policiesMax: String
}

input MandateFilter {
  id: [ID!]
  purpose: StringFullTextFilter
  has: [MandateHasFilter]
  and: [MandateFilter]
  or: [MandateFilter]
  not: MandateFilter
}

enum MandateHasFilter {
  purpose
  responsabilities
  domains
  policies
}

input MandateOrder {
  asc: MandateOrderable
  desc: MandateOrderable
  then: MandateOrder
}

enum MandateOrderable {
  purpose
  responsabilities
  domains
  policies
}

input MandatePatch {
  purpose: String
  responsabilities: String
  domains: String
  policies: String
}

input MandateRef {
  id: ID
  purpose: String
  responsabilities: String
  domains: String
  policies: String
}

enum Mode {
  BATCH
  SINGLE
}

type MultiPolygon {
  polygons: [Polygon!]!
}

input MultiPolygonRef {
  polygons: [PolygonRef!]!
}

type Mutation {
  addNode(input: [AddNodeInput!]!, upsert: Boolean): AddNodePayload
  updateNode(input: UpdateNodeInput!): UpdateNodePayload
  deleteNode(filter: NodeFilter!): DeleteNodePayload
  addNodeFragment(input: [AddNodeFragmentInput!]!): AddNodeFragmentPayload
  updateNodeFragment(input: UpdateNodeFragmentInput!): UpdateNodeFragmentPayload
  deleteNodeFragment(filter: NodeFragmentFilter!): DeleteNodeFragmentPayload
  addMandate(input: [AddMandateInput!]!): AddMandatePayload
  updateMandate(input: UpdateMandateInput!): UpdateMandatePayload
  deleteMandate(filter: MandateFilter!): DeleteMandatePayload
  addLabel(input: [AddLabelInput!]!): AddLabelPayload
  updateLabel(input: UpdateLabelInput!): UpdateLabelPayload
  deleteLabel(filter: LabelFilter!): DeleteLabelPayload
  addRoleExt(input: [AddRoleExtInput!]!): AddRoleExtPayload
  updateRoleExt(input: UpdateRoleExtInput!): UpdateRoleExtPayload
  deleteRoleExt(filter: RoleExtFilter!): DeleteRoleExtPayload
  addProject(input: [AddProjectInput!]!): AddProjectPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  deleteProject(filter: ProjectFilter!): DeleteProjectPayload
  addProjectTension(input: [AddProjectTensionInput!]!): AddProjectTensionPayload
  updateProjectTension(input: UpdateProjectTensionInput!): UpdateProjectTensionPayload
  deleteProjectTension(filter: ProjectTensionFilter!): DeleteProjectTensionPayload
  addProjectColumn(input: [AddProjectColumnInput!]!, upsert: Boolean): AddProjectColumnPayload
  updateProjectColumn(input: UpdateProjectColumnInput!): UpdateProjectColumnPayload
  deleteProjectColumn(filter: ProjectColumnFilter!): DeleteProjectColumnPayload
  addOrgaAgg(input: [AddOrgaAggInput!]!): AddOrgaAggPayload
  updateOrgaAgg(input: UpdateOrgaAggInput!): UpdateOrgaAggPayload
  deleteOrgaAgg(filter: OrgaAggFilter!): DeleteOrgaAggPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  deletePost(filter: PostFilter!): DeletePostPayload
  addTension(input: [AddTensionInput!]!): AddTensionPayload
  updateTension(input: UpdateTensionInput!): UpdateTensionPayload
  deleteTension(filter: TensionFilter!): DeleteTensionPayload
  addComment(input: [AddCommentInput!]!): AddCommentPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  deleteComment(filter: CommentFilter!): DeleteCommentPayload
  addReaction(input: [AddReactionInput!]!, upsert: Boolean): AddReactionPayload
  updateReaction(input: UpdateReactionInput!): UpdateReactionPayload
  deleteReaction(filter: ReactionFilter!): DeleteReactionPayload
  addBlob(input: [AddBlobInput!]!): AddBlobPayload
  updateBlob(input: UpdateBlobInput!): UpdateBlobPayload
  deleteBlob(filter: BlobFilter!): DeleteBlobPayload
  addEvent(input: [AddEventInput!]!): AddEventPayload
  updateEvent(input: UpdateEventInput!): UpdateEventPayload
  deleteEvent(filter: EventFilter!): DeleteEventPayload
  addEventFragment(input: [AddEventFragmentInput!]!): AddEventFragmentPayload
  updateEventFragment(input: UpdateEventFragmentInput!): UpdateEventFragmentPayload
  deleteEventFragment(filter: EventFragmentFilter!): DeleteEventFragmentPayload
  addContract(input: [AddContractInput!]!, upsert: Boolean): AddContractPayload
  updateContract(input: UpdateContractInput!): UpdateContractPayload
  deleteContract(filter: ContractFilter!): DeleteContractPayload
  addVote(input: [AddVoteInput!]!, upsert: Boolean): AddVotePayload
  updateVote(input: UpdateVoteInput!): UpdateVotePayload
  deleteVote(filter: VoteFilter!): DeleteVotePayload
  addUser(input: [AddUserInput!]!, upsert: Boolean): AddUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(filter: UserFilter!): DeleteUserPayload
  addPendingUser(input: [AddPendingUserInput!]!, upsert: Boolean): AddPendingUserPayload
  updatePendingUser(input: UpdatePendingUserInput!): UpdatePendingUserPayload
  deletePendingUser(filter: PendingUserFilter!): DeletePendingUserPayload
  addUserRights(input: [AddUserRightsInput!]!): AddUserRightsPayload
  updateUserRights(input: UpdateUserRightsInput!): UpdateUserRightsPayload
  deleteUserRights(filter: UserRightsFilter!): DeleteUserRightsPayload
  addUserEvent(input: [AddUserEventInput!]!): AddUserEventPayload
  updateUserEvent(input: UpdateUserEventInput!): UpdateUserEventPayload
  deleteUserEvent(filter: UserEventFilter!): DeleteUserEventPayload
  addNotif(input: [AddNotifInput!]!): AddNotifPayload
  updateNotif(input: UpdateNotifInput!): UpdateNotifPayload
  deleteNotif(filter: NotifFilter!): DeleteNotifPayload
  addEventCount(input: [AddEventCountInput!]!): AddEventCountPayload
  updateEventCount(input: UpdateEventCountInput!): UpdateEventCountPayload
  deleteEventCount(filter: EventCountFilter!): DeleteEventCountPayload
}

input NearFilter {
  distance: Float!
  coordinate: PointRef!
}

type Node {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime
  nameid: String!
  rootnameid: String!
  source(filter: BlobFilter): Blob
  name: String!
  about: String
  skills: [String!]
  isRoot: Boolean!
  parent(filter: NodeFilter): Node
  type_: NodeType!
  tensions_out(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]
  tensions_in(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]
  visibility: NodeVisibility!
  mode: NodeMode!
  rights: Int!
  isArchived: Boolean!
  isPersonal: Boolean
  userCanJoin: Boolean
  guestCanCreateTension: Boolean
  watchers(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User!]
  children(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  labels(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label!]
  roles(filter: RoleExtFilter, order: RoleExtOrder, first: Int, offset: Int): [RoleExt!]
  projects(filter: ProjectFilter, order: ProjectOrder, first: Int, offset: Int): [Project!]
  pinned(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]
  role_ext(filter: RoleExtFilter): RoleExt
  role_type: RoleType
  color: String
  first_link(filter: UserFilter): User
  contracts(filter: VoteFilter, order: VoteOrder, first: Int, offset: Int): [Vote!]
  events_history(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event!]
  tensions_outAggregate(filter: TensionFilter): TensionAggregateResult
  tensions_inAggregate(filter: TensionFilter): TensionAggregateResult
  watchersAggregate(filter: UserFilter): UserAggregateResult
  childrenAggregate(filter: NodeFilter): NodeAggregateResult
  labelsAggregate(filter: LabelFilter): LabelAggregateResult
  rolesAggregate(filter: RoleExtFilter): RoleExtAggregateResult
  projectsAggregate(filter: ProjectFilter): ProjectAggregateResult
  pinnedAggregate(filter: TensionFilter): TensionAggregateResult
  contractsAggregate(filter: VoteFilter): VoteAggregateResult
  events_historyAggregate(filter: EventFilter): EventAggregateResult
}

type NodeAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  nameidMin: String
  nameidMax: String
  rootnameidMin: String
  rootnameidMax: String
  nameMin: String
  nameMax: String
  aboutMin: String
  aboutMax: String
  rightsMin: Int
  rightsMax: Int
  rightsSum: Int
  rightsAvg: Float
  colorMin: String
  colorMax: String
}

input NodeFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  nameid: StringHashFilter_StringRegExpFilter
  rootnameid: StringHashFilter_StringRegExpFilter
  name: StringFullTextFilter
  about: StringFullTextFilter
  skills: StringTermFilter
  isRoot: Boolean
  type_: NodeType_hash
  visibility: NodeVisibility_hash
  mode: NodeMode_hash
  isArchived: Boolean
  isPersonal: Boolean
  role_type: RoleType_hash
  has: [NodeHasFilter]
  and: [NodeFilter]
  or: [NodeFilter]
  not: NodeFilter
}

type NodeFragment {
  id: ID!
  nameid: String
  name: String
  about: String
  mandate(filter: MandateFilter): Mandate
  skills: [String!]
  visibility: NodeVisibility
  mode: NodeMode
  type_: NodeType
  first_link: String
  role_ext: String
  role_type: RoleType
  color: String
}

type NodeFragmentAggregateResult {
  count: Int
  nameidMin: String
  nameidMax: String
  nameMin: String
  nameMax: String
  aboutMin: String
  aboutMax: String
  first_linkMin: String
  first_linkMax: String
  role_extMin: String
  role_extMax: String
  colorMin: String
  colorMax: String
}

input NodeFragmentFilter {
  id: [ID!]
  has: [NodeFragmentHasFilter]
  and: [NodeFragmentFilter]
  or: [NodeFragmentFilter]
  not: NodeFragmentFilter
}

enum NodeFragmentHasFilter {
  nameid
  name
  about
  mandate
  skills
  visibility
  mode
  type_
  first_link
  role_ext
  role_type
  color
}

input NodeFragmentOrder {
  asc: NodeFragmentOrderable
  desc: NodeFragmentOrderable
  then: NodeFragmentOrder
}

enum NodeFragmentOrderable {
  nameid
  name
  about
  first_link
  role_ext
  color
}

input NodeFragmentPatch {
  nameid: String
  name: String
  about: String
  mandate: MandateRef
  skills: [String!]
  visibility: NodeVisibility
  mode: NodeMode
  type_: NodeType
  first_link: String
  role_ext: String
  role_type: RoleType
  color: String
}

input NodeFragmentRef {
  id: ID
  nameid: String
  name: String
  about: String
  mandate: MandateRef
  skills: [String!]
  visibility: NodeVisibility
  mode: NodeMode
  type_: NodeType
  first_link: String
  role_ext: String
  role_type: RoleType
  color: String
}

enum NodeHasFilter {
  createdBy
  createdAt
  updatedAt
  nameid
  rootnameid
  source
  name
  about
  skills
  isRoot
  parent
  type_
  tensions_out
  tensions_in
  visibility
  mode
  rights
  isArchived
  isPersonal
  userCanJoin
  guestCanCreateTension
  watchers
  children
  labels
  roles
  projects
  pinned
  role_ext
  role_type
  color
  first_link
  contracts
  events_history
}

enum NodeMode {
  Coordinated
  Agile
}

input NodeMode_hash {
  eq: NodeMode
  in: [NodeMode]
}

input NodeOrder {
  asc: NodeOrderable
  desc: NodeOrderable
  then: NodeOrder
}

enum NodeOrderable {
  createdAt
  updatedAt
  nameid
  rootnameid
  name
  about
  rights
  color
}

input NodePatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  rootnameid: String
  source: BlobRef
  name: String
  about: String
  skills: [String!]
  isRoot: Boolean
  parent: NodeRef
  type_: NodeType
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  visibility: NodeVisibility
  mode: NodeMode
  rights: Int
  isArchived: Boolean
  isPersonal: Boolean
  userCanJoin: Boolean
  guestCanCreateTension: Boolean
  watchers: [UserRef!]
  children: [NodeRef!]
  labels: [LabelRef!]
  roles: [RoleExtRef!]
  projects: [ProjectRef!]
  pinned: [TensionRef!]
  role_ext: RoleExtRef
  role_type: RoleType
  color: String
  first_link: UserRef
  contracts: [VoteRef!]
  events_history: [EventRef!]
}

input NodeRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  nameid: String
  rootnameid: String
  source: BlobRef
  name: String
  about: String
  skills: [String!]
  isRoot: Boolean
  parent: NodeRef
  type_: NodeType
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  visibility: NodeVisibility
  mode: NodeMode
  rights: Int
  isArchived: Boolean
  isPersonal: Boolean
  userCanJoin: Boolean
  guestCanCreateTension: Boolean
  watchers: [UserRef!]
  children: [NodeRef!]
  labels: [LabelRef!]
  roles: [RoleExtRef!]
  projects: [ProjectRef!]
  pinned: [TensionRef!]
  role_ext: RoleExtRef
  role_type: RoleType
  color: String
  first_link: UserRef
  contracts: [VoteRef!]
  events_history: [EventRef!]
}

enum NodeType {
  Circle
  Role
}

input NodeType_hash {
  eq: NodeType
  in: [NodeType]
}

enum NodeVisibility {
  Public
  Private
  Secret
}

input NodeVisibility_hash {
  eq: NodeVisibility
  in: [NodeVisibility]
}

type Notif implements Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  tension_(filter: TensionFilter): Tension
  contract(filter: ContractFilter): Contract
  link: String
}

type NotifAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  messageMin: String
  messageMax: String
  linkMin: String
  linkMax: String
}

input NotifFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  has: [NotifHasFilter]
  and: [NotifFilter]
  or: [NotifFilter]
  not: NotifFilter
}

enum NotifHasFilter {
  createdBy
  createdAt
  updatedAt
  message
  tension_
  contract
  link
}

input NotifOrder {
  asc: NotifOrderable
  desc: NotifOrderable
  then: NotifOrder
}

enum NotifOrderable {
  createdAt
  updatedAt
  message
  link
}

input NotifPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension_: TensionRef
  contract: ContractRef
  link: String
}

input NotifRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension_: TensionRef
  contract: ContractRef
  link: String
}

type OrgaAgg {
  n_members: Int
  n_guests: Int
}

type OrgaAggAggregateResult {
  count: Int
  n_membersMin: Int
  n_membersMax: Int
  n_membersSum: Int
  n_membersAvg: Float
  n_guestsMin: Int
  n_guestsMax: Int
  n_guestsSum: Int
  n_guestsAvg: Float
}

input OrgaAggFilter {
  has: [OrgaAggHasFilter]
  and: [OrgaAggFilter]
  or: [OrgaAggFilter]
  not: OrgaAggFilter
}

enum OrgaAggHasFilter {
  n_members
  n_guests
}

input OrgaAggOrder {
  asc: OrgaAggOrderable
  desc: OrgaAggOrderable
  then: OrgaAggOrder
}

enum OrgaAggOrderable {
  n_members
  n_guests
}

input OrgaAggPatch {
  n_members: Int
  n_guests: Int
}

input OrgaAggRef {
  n_members: Int
  n_guests: Int
}

type PendingUser {
  id: ID!
  updatedAt: DateTime
  username: String!
  password: String
  email: String!
  email_token: String
  token: String
  contracts(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract!]
  subscribe: Boolean
  contractsAggregate(filter: ContractFilter): ContractAggregateResult
}

type PendingUserAggregateResult {
  count: Int
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  usernameMin: String
  usernameMax: String
  passwordMin: String
  passwordMax: String
  emailMin: String
  emailMax: String
  email_tokenMin: String
  email_tokenMax: String
  tokenMin: String
  tokenMax: String
}

input PendingUserFilter {
  id: [ID!]
  username: StringHashFilter
  email: StringHashFilter
  email_token: StringHashFilter
  token: StringHashFilter
  has: [PendingUserHasFilter]
  and: [PendingUserFilter]
  or: [PendingUserFilter]
  not: PendingUserFilter
}

enum PendingUserHasFilter {
  updatedAt
  username
  password
  email
  email_token
  token
  contracts
  subscribe
}

input PendingUserOrder {
  asc: PendingUserOrderable
  desc: PendingUserOrderable
  then: PendingUserOrder
}

enum PendingUserOrderable {
  updatedAt
  username
  password
  email
  email_token
  token
}

input PendingUserPatch {
  updatedAt: DateTime
  password: String
  email_token: String
  token: String
  contracts: [ContractRef!]
  subscribe: Boolean
}

input PendingUserRef {
  id: ID
  updatedAt: DateTime
  username: String
  password: String
  email: String
  email_token: String
  token: String
  contracts: [ContractRef!]
  subscribe: Boolean
}

type Point {
  longitude: Float!
  latitude: Float!
}

input PointGeoFilter {
  near: NearFilter
  within: WithinFilter
}

type PointList {
  points: [Point!]!
}

input PointListRef {
  points: [PointRef!]!
}

input PointRef {
  longitude: Float!
  latitude: Float!
}

type Polygon {
  coordinates: [PointList!]!
}

input PolygonGeoFilter {
  near: NearFilter
  within: WithinFilter
  contains: ContainsFilter
  intersects: IntersectsFilter
}

input PolygonRef {
  coordinates: [PointListRef!]!
}

interface Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
}

type PostAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  messageMin: String
  messageMax: String
}

input PostFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  has: [PostHasFilter]
  and: [PostFilter]
  or: [PostFilter]
  not: PostFilter
}

enum PostHasFilter {
  createdBy
  createdAt
  updatedAt
  message
}

input PostOrder {
  asc: PostOrderable
  desc: PostOrderable
  then: PostOrder
}

enum PostOrderable {
  createdAt
  updatedAt
  message
}

input PostPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
}

input PostRef {
  id: ID!
}

type Project {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime!
  rootnameid: String!
  parentnameid: String!
  nameid: String!
  name: String!
  description: String
  status: ProjectStatus!
  columns(filter: ProjectColumnFilter, order: ProjectColumnOrder, first: Int, offset: Int): [ProjectColumn!]
  leaders(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  nodes(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  columnsAggregate(filter: ProjectColumnFilter): ProjectColumnAggregateResult
  leadersAggregate(filter: NodeFilter): NodeAggregateResult
  nodesAggregate(filter: NodeFilter): NodeAggregateResult
}

type ProjectAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  rootnameidMin: String
  rootnameidMax: String
  parentnameidMin: String
  parentnameidMax: String
  nameidMin: String
  nameidMax: String
  nameMin: String
  nameMax: String
  descriptionMin: String
  descriptionMax: String
}

type ProjectColumn {
  id: ID!
  name: String!
  about: String
  pos: Int!
  tensions(filter: ProjectTensionFilter, order: ProjectTensionOrder, first: Int, offset: Int): [ProjectTension!]
  project(filter: ProjectFilter): Project!
  tensionsAggregate(filter: ProjectTensionFilter): ProjectTensionAggregateResult
}

type ProjectColumnAggregateResult {
  count: Int
  nameMin: String
  nameMax: String
  aboutMin: String
  aboutMax: String
  posMin: Int
  posMax: Int
  posSum: Int
  posAvg: Float
}

input ProjectColumnFilter {
  id: [ID!]
  name: StringHashFilter
  has: [ProjectColumnHasFilter]
  and: [ProjectColumnFilter]
  or: [ProjectColumnFilter]
  not: ProjectColumnFilter
}

enum ProjectColumnHasFilter {
  name
  about
  pos
  tensions
  project
}

input ProjectColumnOrder {
  asc: ProjectColumnOrderable
  desc: ProjectColumnOrderable
  then: ProjectColumnOrder
}

enum ProjectColumnOrderable {
  name
  about
  pos
}

input ProjectColumnPatch {
  about: String
  pos: Int
  tensions: [ProjectTensionRef!]
  project: ProjectRef
}

input ProjectColumnRef {
  id: ID
  name: String
  about: String
  pos: Int
  tensions: [ProjectTensionRef!]
  project: ProjectRef
}

input ProjectFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  rootnameid: StringHashFilter
  parentnameid: StringHashFilter
  nameid: StringHashFilter
  name: StringFullTextFilter
  status: ProjectStatus_hash
  has: [ProjectHasFilter]
  and: [ProjectFilter]
  or: [ProjectFilter]
  not: ProjectFilter
}

enum ProjectHasFilter {
  createdBy
  createdAt
  updatedAt
  rootnameid
  parentnameid
  nameid
  name
  description
  status
  columns
  leaders
  nodes
}

input ProjectOrder {
  asc: ProjectOrderable
  desc: ProjectOrderable
  then: ProjectOrder
}

enum ProjectOrderable {
  createdAt
  updatedAt
  rootnameid
  parentnameid
  nameid
  name
  description
}

input ProjectPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  rootnameid: String
  parentnameid: String
  nameid: String
  name: String
  description: String
  status: ProjectStatus
  columns: [ProjectColumnRef!]
  leaders: [NodeRef!]
  nodes: [NodeRef!]
}

input ProjectRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  rootnameid: String
  parentnameid: String
  nameid: String
  name: String
  description: String
  status: ProjectStatus
  columns: [ProjectColumnRef!]
  leaders: [NodeRef!]
  nodes: [NodeRef!]
}

enum ProjectStatus {
  Open
  Closed
}

input ProjectStatus_hash {
  eq: ProjectStatus
  in: [ProjectStatus]
}

type ProjectTension {
  id: ID!
  tension(filter: TensionFilter): Tension!
  pos: Int!
  pc(filter: ProjectColumnFilter): ProjectColumn!
}

type ProjectTensionAggregateResult {
  count: Int
  posMin: Int
  posMax: Int
  posSum: Int
  posAvg: Float
}

input ProjectTensionFilter {
  id: [ID!]
  has: [ProjectTensionHasFilter]
  and: [ProjectTensionFilter]
  or: [ProjectTensionFilter]
  not: ProjectTensionFilter
}

enum ProjectTensionHasFilter {
  tension
  pos
  pc
}

input ProjectTensionOrder {
  asc: ProjectTensionOrderable
  desc: ProjectTensionOrderable
  then: ProjectTensionOrder
}

enum ProjectTensionOrderable {
  pos
}

input ProjectTensionPatch {
  tension: TensionRef
  pos: Int
  pc: ProjectColumnRef
}

input ProjectTensionRef {
  id: ID
  tension: TensionRef
  pos: Int
  pc: ProjectColumnRef
}

type Query {
  getNode(id: ID, nameid: String): Node
  queryNode(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  aggregateNode(filter: NodeFilter): NodeAggregateResult
  getNodeFragment(id: ID!): NodeFragment
  queryNodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  aggregateNodeFragment(filter: NodeFragmentFilter): NodeFragmentAggregateResult
  getMandate(id: ID!): Mandate
  queryMandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  aggregateMandate(filter: MandateFilter): MandateAggregateResult
  getLabel(id: ID!): Label
  queryLabel(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  aggregateLabel(filter: LabelFilter): LabelAggregateResult
  getRoleExt(id: ID!): RoleExt
  queryRoleExt(filter: RoleExtFilter, order: RoleExtOrder, first: Int, offset: Int): [RoleExt]
  aggregateRoleExt(filter: RoleExtFilter): RoleExtAggregateResult
  getProject(id: ID!): Project
  queryProject(filter: ProjectFilter, order: ProjectOrder, first: Int, offset: Int): [Project]
  aggregateProject(filter: ProjectFilter): ProjectAggregateResult
  getProjectTension(id: ID!): ProjectTension
  queryProjectTension(filter: ProjectTensionFilter, order: ProjectTensionOrder, first: Int, offset: Int): [ProjectTension]
  aggregateProjectTension(filter: ProjectTensionFilter): ProjectTensionAggregateResult
  getProjectColumn(id: ID, name: String): ProjectColumn
  queryProjectColumn(filter: ProjectColumnFilter, order: ProjectColumnOrder, first: Int, offset: Int): [ProjectColumn]
  aggregateProjectColumn(filter: ProjectColumnFilter): ProjectColumnAggregateResult
  queryOrgaAgg(filter: OrgaAggFilter, order: OrgaAggOrder, first: Int, offset: Int): [OrgaAgg]
  aggregateOrgaAgg(filter: OrgaAggFilter): OrgaAggAggregateResult
  getPost(id: ID!): Post
  queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  aggregatePost(filter: PostFilter): PostAggregateResult
  getTension(id: ID!): Tension
  queryTension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  aggregateTension(filter: TensionFilter): TensionAggregateResult
  getComment(id: ID!): Comment
  queryComment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  aggregateComment(filter: CommentFilter): CommentAggregateResult
  getReaction(id: ID, reactionid: String): Reaction
  queryReaction(filter: ReactionFilter, order: ReactionOrder, first: Int, offset: Int): [Reaction]
  aggregateReaction(filter: ReactionFilter): ReactionAggregateResult
  getBlob(id: ID!): Blob
  queryBlob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  aggregateBlob(filter: BlobFilter): BlobAggregateResult
  getEvent(id: ID!): Event
  queryEvent(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  aggregateEvent(filter: EventFilter): EventAggregateResult
  queryEventFragment(filter: EventFragmentFilter, order: EventFragmentOrder, first: Int, offset: Int): [EventFragment]
  aggregateEventFragment(filter: EventFragmentFilter): EventFragmentAggregateResult
  getContract(id: ID, contractid: String): Contract
  queryContract(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract]
  aggregateContract(filter: ContractFilter): ContractAggregateResult
  getVote(id: ID, voteid: String): Vote
  queryVote(filter: VoteFilter, order: VoteOrder, first: Int, offset: Int): [Vote]
  aggregateVote(filter: VoteFilter): VoteAggregateResult
  getUser(id: ID, username: String, email: String): User
  queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  aggregateUser(filter: UserFilter): UserAggregateResult
  getPendingUser(id: ID, username: String, email: String): PendingUser
  queryPendingUser(filter: PendingUserFilter, order: PendingUserOrder, first: Int, offset: Int): [PendingUser]
  aggregatePendingUser(filter: PendingUserFilter): PendingUserAggregateResult
  queryUserRights(filter: UserRightsFilter, order: UserRightsOrder, first: Int, offset: Int): [UserRights]
  aggregateUserRights(filter: UserRightsFilter): UserRightsAggregateResult
  getUserEvent(id: ID!): UserEvent
  queryUserEvent(filter: UserEventFilter, order: UserEventOrder, first: Int, offset: Int): [UserEvent]
  aggregateUserEvent(filter: UserEventFilter): UserEventAggregateResult
  getNotif(id: ID!): Notif
  queryNotif(filter: NotifFilter, order: NotifOrder, first: Int, offset: Int): [Notif]
  aggregateNotif(filter: NotifFilter): NotifAggregateResult
  queryEventCount(filter: EventCountFilter, order: EventCountOrder, first: Int, offset: Int): [EventCount]
  aggregateEventCount(filter: EventCountFilter): EventCountAggregateResult
}

type Reaction {
  id: ID!
  reactionid: String!
  user(filter: UserFilter): User!
  comment(filter: CommentFilter): Comment!
  type_: Int!
}

type ReactionAggregateResult {
  count: Int
  reactionidMin: String
  reactionidMax: String
  type_Min: Int
  type_Max: Int
  type_Sum: Int
  type_Avg: Float
}

input ReactionFilter {
  id: [ID!]
  reactionid: StringHashFilter
  has: [ReactionHasFilter]
  and: [ReactionFilter]
  or: [ReactionFilter]
  not: ReactionFilter
}

enum ReactionHasFilter {
  reactionid
  user
  comment
  type_
}

input ReactionOrder {
  asc: ReactionOrderable
  desc: ReactionOrderable
  then: ReactionOrder
}

enum ReactionOrderable {
  reactionid
  type_
}

input ReactionPatch {
  user: UserRef
  comment: CommentRef
  type_: Int
}

input ReactionRef {
  id: ID
  reactionid: String
  user: UserRef
  comment: CommentRef
  type_: Int
}

type RoleExt {
  id: ID!
  rootnameid: String!
  name: String!
  about: String
  role_type: RoleType!
  color: String
  mandate(filter: MandateFilter): Mandate
  roles(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  nodes(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  rolesAggregate(filter: NodeFilter): NodeAggregateResult
  nodesAggregate(filter: NodeFilter): NodeAggregateResult
}

type RoleExtAggregateResult {
  count: Int
  rootnameidMin: String
  rootnameidMax: String
  nameMin: String
  nameMax: String
  aboutMin: String
  aboutMax: String
  colorMin: String
  colorMax: String
}

input RoleExtFilter {
  id: [ID!]
  rootnameid: StringHashFilter
  name: StringHashFilter_StringTermFilter
  has: [RoleExtHasFilter]
  and: [RoleExtFilter]
  or: [RoleExtFilter]
  not: RoleExtFilter
}

enum RoleExtHasFilter {
  rootnameid
  name
  about
  role_type
  color
  mandate
  roles
  nodes
}

input RoleExtOrder {
  asc: RoleExtOrderable
  desc: RoleExtOrderable
  then: RoleExtOrder
}

enum RoleExtOrderable {
  rootnameid
  name
  about
  color
}

input RoleExtPatch {
  rootnameid: String
  name: String
  about: String
  role_type: RoleType
  color: String
  mandate: MandateRef
  roles: [NodeRef!]
  nodes: [NodeRef!]
}

input RoleExtRef {
  id: ID
  rootnameid: String
  name: String
  about: String
  role_type: RoleType
  color: String
  mandate: MandateRef
  roles: [NodeRef!]
  nodes: [NodeRef!]
}

enum RoleType {
  Owner
  Member
  Guest
  Retired
  Pending
  Coordinator
  Peer
  Bot
}

input RoleType_hash {
  eq: RoleType
  in: [RoleType]
}

input StringExactFilter {
  eq: String
  in: [String]
  le: String
  lt: String
  ge: String
  gt: String
  between: StringRange
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringHashFilter {
  eq: String
  in: [String]
}

input StringHashFilter_StringRegExpFilter {
  eq: String
  in: [String]
  regexp: String
}

input StringHashFilter_StringTermFilter {
  eq: String
  in: [String]
  allofterms: String
  anyofterms: String
}

input StringRange {
  min: String!
  max: String!
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

type Tension implements Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  emitter(filter: NodeFilter): Node!
  emitterid: String!
  receiver(filter: NodeFilter): Node!
  receiverid: String!
  title: String!
  type_: TensionType!
  status: TensionStatus!
  action: TensionAction
  assignees(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User!]
  labels(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label!]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment!]
  blobs(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob!]
  history(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event!]
  mentions(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event!]
  contracts(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract!]
  subscribers(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User!]
  projects(filter: ProjectTensionFilter, order: ProjectTensionOrder, first: Int, offset: Int): [ProjectTension!]
  n_comments: Int
  assigneesAggregate(filter: UserFilter): UserAggregateResult
  labelsAggregate(filter: LabelFilter): LabelAggregateResult
  commentsAggregate(filter: CommentFilter): CommentAggregateResult
  blobsAggregate(filter: BlobFilter): BlobAggregateResult
  historyAggregate(filter: EventFilter): EventAggregateResult
  mentionsAggregate(filter: EventFilter): EventAggregateResult
  contractsAggregate(filter: ContractFilter): ContractAggregateResult
  subscribersAggregate(filter: UserFilter): UserAggregateResult
  projectsAggregate(filter: ProjectTensionFilter): ProjectTensionAggregateResult
}

enum TensionAction {
  NewRole
  NewCircle
  NewMd
  EditRole
  EditCircle
  EditMd
  ArchivedRole
  ArchivedCircle
  ArchivedMd
}

type TensionAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  messageMin: String
  messageMax: String
  emitteridMin: String
  emitteridMax: String
  receiveridMin: String
  receiveridMax: String
  titleMin: String
  titleMax: String
  n_commentsMin: Int
  n_commentsMax: Int
  n_commentsSum: Int
  n_commentsAvg: Float
}

enum TensionEvent {
  Created
  Reopened
  Closed
  TitleUpdated
  TypeUpdated
  CommentPushed
  AssigneeAdded
  AssigneeRemoved
  LabelAdded
  LabelRemoved
  BlobCreated
  BlobCommitted
  Mentioned
  Pinned
  Unpinned
  BlobPushed
  BlobArchived
  BlobUnarchived
  UserJoined
  UserLeft
  MemberLinked
  MemberUnlinked
  Authority
  Visibility
  Moved
}

input TensionEvent_hash {
  eq: TensionEvent
  in: [TensionEvent]
}

input TensionFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  emitterid: StringHashFilter_StringRegExpFilter
  receiverid: StringHashFilter_StringRegExpFilter
  title: StringFullTextFilter
  type_: TensionType_hash
  status: TensionStatus_hash
  has: [TensionHasFilter]
  and: [TensionFilter]
  or: [TensionFilter]
  not: TensionFilter
}

enum TensionHasFilter {
  createdBy
  createdAt
  updatedAt
  message
  emitter
  emitterid
  receiver
  receiverid
  title
  type_
  status
  action
  assignees
  labels
  comments
  blobs
  history
  mentions
  contracts
  subscribers
  projects
  n_comments
}

input TensionOrder {
  asc: TensionOrderable
  desc: TensionOrderable
  then: TensionOrder
}

enum TensionOrderable {
  createdAt
  updatedAt
  message
  emitterid
  receiverid
  title
  n_comments
}

input TensionPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  emitter: NodeRef
  emitterid: String
  receiver: NodeRef
  receiverid: String
  title: String
  type_: TensionType
  status: TensionStatus
  action: TensionAction
  assignees: [UserRef!]
  labels: [LabelRef!]
  comments: [CommentRef!]
  blobs: [BlobRef!]
  history: [EventRef!]
  mentions: [EventRef!]
  contracts: [ContractRef!]
  subscribers: [UserRef!]
  projects: [ProjectTensionRef!]
  n_comments: Int
}

input TensionRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  emitter: NodeRef
  emitterid: String
  receiver: NodeRef
  receiverid: String
  title: String
  type_: TensionType
  status: TensionStatus
  action: TensionAction
  assignees: [UserRef!]
  labels: [LabelRef!]
  comments: [CommentRef!]
  blobs: [BlobRef!]
  history: [EventRef!]
  mentions: [EventRef!]
  contracts: [ContractRef!]
  subscribers: [UserRef!]
  projects: [ProjectTensionRef!]
  n_comments: Int
}

enum TensionStatus {
  Open
  Closed
}

input TensionStatus_hash {
  eq: TensionStatus
  in: [TensionStatus]
}

enum TensionType {
  Operational
  Governance
  Help
  Alert
  Announcement
}

input TensionType_hash {
  eq: TensionType
  in: [TensionType]
}

input UpdateBlobInput {
  filter: BlobFilter!
  set: BlobPatch
  remove: BlobPatch
}

type UpdateBlobPayload {
  blob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  numUids: Int
}

input UpdateCommentInput {
  filter: CommentFilter!
  set: CommentPatch
  remove: CommentPatch
}

type UpdateCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input UpdateContractInput {
  filter: ContractFilter!
  set: ContractPatch
  remove: ContractPatch
}

type UpdateContractPayload {
  contract(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract]
  numUids: Int
}

input UpdateEventCountInput {
  filter: EventCountFilter!
  set: EventCountPatch
  remove: EventCountPatch
}

type UpdateEventCountPayload {
  eventCount(filter: EventCountFilter, order: EventCountOrder, first: Int, offset: Int): [EventCount]
  numUids: Int
}

input UpdateEventFragmentInput {
  filter: EventFragmentFilter!
  set: EventFragmentPatch
  remove: EventFragmentPatch
}

type UpdateEventFragmentPayload {
  eventFragment(filter: EventFragmentFilter, order: EventFragmentOrder, first: Int, offset: Int): [EventFragment]
  numUids: Int
}

input UpdateEventInput {
  filter: EventFilter!
  set: EventPatch
  remove: EventPatch
}

type UpdateEventPayload {
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  numUids: Int
}

input UpdateLabelInput {
  filter: LabelFilter!
  set: LabelPatch
  remove: LabelPatch
}

type UpdateLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  numUids: Int
}

input UpdateMandateInput {
  filter: MandateFilter!
  set: MandatePatch
  remove: MandatePatch
}

type UpdateMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  numUids: Int
}

input UpdateNodeFragmentInput {
  filter: NodeFragmentFilter!
  set: NodeFragmentPatch
  remove: NodeFragmentPatch
}

type UpdateNodeFragmentPayload {
  nodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  numUids: Int
}

input UpdateNodeInput {
  filter: NodeFilter!
  set: NodePatch
  remove: NodePatch
}

type UpdateNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  numUids: Int
}

input UpdateNotifInput {
  filter: NotifFilter!
  set: NotifPatch
  remove: NotifPatch
}

type UpdateNotifPayload {
  notif(filter: NotifFilter, order: NotifOrder, first: Int, offset: Int): [Notif]
  numUids: Int
}

input UpdateOrgaAggInput {
  filter: OrgaAggFilter!
  set: OrgaAggPatch
  remove: OrgaAggPatch
}

type UpdateOrgaAggPayload {
  orgaAgg(filter: OrgaAggFilter, order: OrgaAggOrder, first: Int, offset: Int): [OrgaAgg]
  numUids: Int
}

input UpdatePendingUserInput {
  filter: PendingUserFilter!
  set: PendingUserPatch
  remove: PendingUserPatch
}

type UpdatePendingUserPayload {
  pendingUser(filter: PendingUserFilter, order: PendingUserOrder, first: Int, offset: Int): [PendingUser]
  numUids: Int
}

input UpdatePostInput {
  filter: PostFilter!
  set: PostPatch
  remove: PostPatch
}

type UpdatePostPayload {
  post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  numUids: Int
}

input UpdateProjectColumnInput {
  filter: ProjectColumnFilter!
  set: ProjectColumnPatch
  remove: ProjectColumnPatch
}

type UpdateProjectColumnPayload {
  projectColumn(filter: ProjectColumnFilter, order: ProjectColumnOrder, first: Int, offset: Int): [ProjectColumn]
  numUids: Int
}

input UpdateProjectInput {
  filter: ProjectFilter!
  set: ProjectPatch
  remove: ProjectPatch
}

type UpdateProjectPayload {
  project(filter: ProjectFilter, order: ProjectOrder, first: Int, offset: Int): [Project]
  numUids: Int
}

input UpdateProjectTensionInput {
  filter: ProjectTensionFilter!
  set: ProjectTensionPatch
  remove: ProjectTensionPatch
}

type UpdateProjectTensionPayload {
  projectTension(filter: ProjectTensionFilter, order: ProjectTensionOrder, first: Int, offset: Int): [ProjectTension]
  numUids: Int
}

input UpdateReactionInput {
  filter: ReactionFilter!
  set: ReactionPatch
  remove: ReactionPatch
}

type UpdateReactionPayload {
  reaction(filter: ReactionFilter, order: ReactionOrder, first: Int, offset: Int): [Reaction]
  numUids: Int
}

input UpdateRoleExtInput {
  filter: RoleExtFilter!
  set: RoleExtPatch
  remove: RoleExtPatch
}

type UpdateRoleExtPayload {
  roleExt(filter: RoleExtFilter, order: RoleExtOrder, first: Int, offset: Int): [RoleExt]
  numUids: Int
}

input UpdateTensionInput {
  filter: TensionFilter!
  set: TensionPatch
  remove: TensionPatch
}

type UpdateTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  numUids: Int
}

input UpdateUserEventInput {
  filter: UserEventFilter!
  set: UserEventPatch
  remove: UserEventPatch
}

type UpdateUserEventPayload {
  userEvent(filter: UserEventFilter, order: UserEventOrder, first: Int, offset: Int): [UserEvent]
  numUids: Int
}

input UpdateUserInput {
  filter: UserFilter!
  set: UserPatch
  remove: UserPatch
}

type UpdateUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input UpdateUserRightsInput {
  filter: UserRightsFilter!
  set: UserRightsPatch
  remove: UserRightsPatch
}

type UpdateUserRightsPayload {
  userRights(filter: UserRightsFilter, order: UserRightsOrder, first: Int, offset: Int): [UserRights]
  numUids: Int
}

input UpdateVoteInput {
  filter: VoteFilter!
  set: VotePatch
  remove: VotePatch
}

type UpdateVotePayload {
  vote(filter: VoteFilter, order: VoteOrder, first: Int, offset: Int): [Vote]
  numUids: Int
}

type User {
  id: ID!
  createdAt: DateTime!
  lastAck: DateTime!
  username: String!
  name: String
  email: String!
  password: String!
  bio: String
  location: String
  utc: String
  links: [String!]
  skills: [String!]
  notifyByEmail: Boolean!
  lang: Lang!
  subscriptions(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]
  watching(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  rights(filter: UserRightsFilter): UserRights!
  roles(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  tensions_created(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]
  tensions_assigned(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]
  contracts(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract!]
  reactions(filter: ReactionFilter, order: ReactionOrder, first: Int, offset: Int): [Reaction!]
  events(filter: UserEventFilter, order: UserEventOrder, first: Int, offset: Int): [UserEvent!]
  markAllAsRead: String
  event_count(filter: EventCountFilter): EventCount
  subscriptionsAggregate(filter: TensionFilter): TensionAggregateResult
  watchingAggregate(filter: NodeFilter): NodeAggregateResult
  rolesAggregate(filter: NodeFilter): NodeAggregateResult
  tensions_createdAggregate(filter: TensionFilter): TensionAggregateResult
  tensions_assignedAggregate(filter: TensionFilter): TensionAggregateResult
  contractsAggregate(filter: ContractFilter): ContractAggregateResult
  reactionsAggregate(filter: ReactionFilter): ReactionAggregateResult
  eventsAggregate(filter: UserEventFilter): UserEventAggregateResult
}

type UserAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  lastAckMin: DateTime
  lastAckMax: DateTime
  usernameMin: String
  usernameMax: String
  nameMin: String
  nameMax: String
  emailMin: String
  emailMax: String
  passwordMin: String
  passwordMax: String
  bioMin: String
  bioMax: String
  locationMin: String
  locationMax: String
  utcMin: String
  utcMax: String
  markAllAsReadMin: String
  markAllAsReadMax: String
}

type UserEvent {
  id: ID!
  createdAt: DateTime!
  isRead: Boolean!
  user(filter: UserFilter): User!
  event(filter: EventKindFilter, first: Int, offset: Int): [EventKind!]
}

type UserEventAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
}

input UserEventFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  isRead: Boolean
  has: [UserEventHasFilter]
  and: [UserEventFilter]
  or: [UserEventFilter]
  not: UserEventFilter
}

enum UserEventHasFilter {
  createdAt
  isRead
  user
  event
}

input UserEventOrder {
  asc: UserEventOrderable
  desc: UserEventOrderable
  then: UserEventOrder
}

enum UserEventOrderable {
  createdAt
}

input UserEventPatch {
  createdAt: DateTime
  isRead: Boolean
  user: UserRef
  event: [EventKindRef!]
}

input UserEventRef {
  id: ID
  createdAt: DateTime
  isRead: Boolean
  user: UserRef
  event: [EventKindRef!]
}

input UserFilter {
  id: [ID!]
  username: StringHashFilter_StringRegExpFilter
  name: StringRegExpFilter
  email: StringHashFilter
  has: [UserHasFilter]
  and: [UserFilter]
  or: [UserFilter]
  not: UserFilter
}

enum UserHasFilter {
  createdAt
  lastAck
  username
  name
  email
  password
  bio
  location
  utc
  links
  skills
  notifyByEmail
  lang
  subscriptions
  watching
  rights
  roles
  tensions_created
  tensions_assigned
  contracts
  reactions
  events
  markAllAsRead
  event_count
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}

enum UserOrderable {
  createdAt
  lastAck
  username
  name
  email
  password
  bio
  location
  utc
  markAllAsRead
}

input UserPatch {
  createdAt: DateTime
  lastAck: DateTime
  name: String
  password: String
  bio: String
  location: String
  utc: String
  links: [String!]
  skills: [String!]
  notifyByEmail: Boolean
  lang: Lang
  subscriptions: [TensionRef!]
  watching: [NodeRef!]
  rights: UserRightsRef
  roles: [NodeRef!]
  tensions_created: [TensionRef!]
  tensions_assigned: [TensionRef!]
  contracts: [ContractRef!]
  reactions: [ReactionRef!]
  events: [UserEventRef!]
  markAllAsRead: String
  event_count: EventCountRef
}

input UserRef {
  id: ID
  createdAt: DateTime
  lastAck: DateTime
  username: String
  name: String
  email: String
  password: String
  bio: String
  location: String
  utc: String
  links: [String!]
  skills: [String!]
  notifyByEmail: Boolean
  lang: Lang
  subscriptions: [TensionRef!]
  watching: [NodeRef!]
  rights: UserRightsRef
  roles: [NodeRef!]
  tensions_created: [TensionRef!]
  tensions_assigned: [TensionRef!]
  contracts: [ContractRef!]
  reactions: [ReactionRef!]
  events: [UserEventRef!]
  markAllAsRead: String
  event_count: EventCountRef
}

type UserRights {
  type_: UserType!
  canLogin: Boolean!
  canCreateRoot: Boolean!
  maxPublicOrga: Int!
  maxPrivateOrga: Int!
  hasEmailNotifications: Boolean!
}

type UserRightsAggregateResult {
  count: Int
  maxPublicOrgaMin: Int
  maxPublicOrgaMax: Int
  maxPublicOrgaSum: Int
  maxPublicOrgaAvg: Float
  maxPrivateOrgaMin: Int
  maxPrivateOrgaMax: Int
  maxPrivateOrgaSum: Int
  maxPrivateOrgaAvg: Float
}

input UserRightsFilter {
  has: [UserRightsHasFilter]
  and: [UserRightsFilter]
  or: [UserRightsFilter]
  not: UserRightsFilter
}

enum UserRightsHasFilter {
  type_
  canLogin
  canCreateRoot
  maxPublicOrga
  maxPrivateOrga
  hasEmailNotifications
}

input UserRightsOrder {
  asc: UserRightsOrderable
  desc: UserRightsOrderable
  then: UserRightsOrder
}

enum UserRightsOrderable {
  maxPublicOrga
  maxPrivateOrga
}

input UserRightsPatch {
  type_: UserType
  canLogin: Boolean
  canCreateRoot: Boolean
  maxPublicOrga: Int
  maxPrivateOrga: Int
  hasEmailNotifications: Boolean
}

input UserRightsRef {
  type_: UserType
  canLogin: Boolean
  canCreateRoot: Boolean
  maxPublicOrga: Int
  maxPrivateOrga: Int
  hasEmailNotifications: Boolean
}

enum UserType {
  Regular
  Pro
  Root
}

type Vote implements Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  voteid: String!
  contract(filter: ContractFilter): Contract!
  node(filter: NodeFilter): Node!
  data: [Int!]!
}

type VoteAggregateResult {
  count: Int
  createdAtMin: DateTime
  createdAtMax: DateTime
  updatedAtMin: DateTime
  updatedAtMax: DateTime
  messageMin: String
  messageMax: String
  voteidMin: String
  voteidMax: String
}

input VoteFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  voteid: StringHashFilter
  has: [VoteHasFilter]
  and: [VoteFilter]
  or: [VoteFilter]
  not: VoteFilter
}

enum VoteHasFilter {
  createdBy
  createdAt
  updatedAt
  message
  voteid
  contract
  node
  data
}

input VoteOrder {
  asc: VoteOrderable
  desc: VoteOrderable
  then: VoteOrder
}

enum VoteOrderable {
  createdAt
  updatedAt
  message
  voteid
}

input VotePatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  contract: ContractRef
  node: NodeRef
  data: [Int!]
}

input VoteRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  voteid: String
  contract: ContractRef
  node: NodeRef
  data: [Int!]
}

input WithinFilter {
  polygon: PolygonRef!
}

