


enum ErrorBla {
  ContactCoordo
  OrgaLimitReached
  MemberLimitReached
  EmailLimitReached
  StorageLimitReached
}

type Node @auth(query:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($OWNIDS: [String]) {
        queryNode(filter: {visibility: {eq: Public}, or: [{rootnameid: {in: $OWNIDS}}]}) { id }
    }"""
},{ rule:"""query ($ROOTIDS: [String]) {
        queryNode(filter: {visibility: {eq: Private}, and: [{rootnameid: {in: $ROOTIDS}}]}) { id }
    }"""
},{ rule:"""query ($USERNAME: String!) {
        queryNode(filter: {visibility: {eq: Secret}}) {
          children {
            first_link(filter: {username: {eq: $USERNAME}}) { username }
          }
        }
    }"""
},{ rule:"""query ($USERNAME: String!) {
        queryNode(filter: {visibility: {eq: Secret}}) {
          parent {
            children {
              first_link(filter: {username: {eq: $USERNAME}}) { username }
            }
          }
        }
    }"""
},{ rule:"""query ($USERNAME: String!) {
      queryNode {
        tensions_in {
          contracts(filter: {status: {eq: Open}}) {
            candidates(filter: {username: {eq: $USERNAME}}) { username }
          }
        }
      }
    }"""
},{ rule:"""query ($USERNAME: String!) {
      queryNode {
        parent {
          tensions_in {
            contracts(filter: {status: {eq: Open}}) {
              candidates(filter: {username: {eq: $USERNAME}}) { username }
            }
          }
        }
      }
    }"""
},{ rule:"""query {
        queryNode {
          children(filter: {role_type: {eq: Bot}}) { id }
        }
    }"""
},{ rule:"""query {
        queryNode(filter: {role_type: {eq: Bot}, not: {visibility: {eq: Secret}}}) { id }
    }"""
}]
}, add:{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
}, update:{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
}, delete:{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
}) {
  id: ID!
  createdBy: User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  nameid: String! @search(by:[hash, regexp]) @id
  rootnameid: String! @search(by:[hash, regexp])
  source: Blob
  name: String! @search(by:[fulltext])
  about: String @search(by:[fulltext])
  skills: [String!] @search(by:[term])
  isRoot: Boolean! @search
  parent: Node
  type_: NodeType! @search
  tensions_out: [Tension!] @hasInverse(field: emitter)
  tensions_in: [Tension!] @hasInverse(field: receiver)
  visibility: NodeVisibility! @search
  mode: NodeMode! @search
  rights: Int!
  isArchived: Boolean! @search
  isPersonal: Boolean @search
  userCanJoin: Boolean
  guestCanCreateTension: Boolean
  watchers: [User!] @hasInverse(field: watching)
  children: [Node!] @hasInverse(field: parent)
  labels: [Label!]
  roles: [RoleExt!]
  projects: [Project!]
  pinned: [Tension!]
  role_ext: RoleExt
  role_type: RoleType @search
  color: String
  first_link: User
  contracts: [Vote!] @hasInverse(field: node)
  events_history: [Event!]
}

type NodeFragment {
  id: ID!
  nameid: String
  name: String
  about: String
  mandate: Mandate
  skills: [String!]
  visibility: NodeVisibility
  mode: NodeMode
  type_: NodeType
  first_link: String
  role_ext: String
  role_type: RoleType
  color: String
}

type Mandate {
  id: ID!
  purpose: String! @search(by:[fulltext])
  responsabilities: String
  domains: String
  policies: String
}

type Label @auth(query:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query {
        queryLabel {
          nodes(filter: {visibility: {eq: Public}}) { id }
        }
    }"""
},{ rule:"""query ($ROOTIDS: [String]) {
        queryLabel(filter: {rootnameid: {in: $ROOTIDS}}) { id }
    }"""
}]
}) {
  id: ID!
  rootnameid: String! @search(by:[hash])
  name: String! @search(by:[hash, term])
  description: String
  color: String
  tensions: [Tension!] @hasInverse(field: labels)
  nodes: [Node!] @hasInverse(field: labels)
}

type RoleExt @auth(query:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query {
        queryRoleExt {
          nodes(filter: {visibility: {eq: Public}}) { id }
        }
    }"""
},{ rule:"""query ($ROOTIDS: [String]) {
        queryRoleExt(filter: {rootnameid: {in: $ROOTIDS}}) { id }
    }"""
}]
}) {
  id: ID!
  rootnameid: String! @search(by:[hash])
  name: String! @search(by:[hash, term])
  about: String
  role_type: RoleType!
  color: String
  mandate: Mandate
  roles: [Node!] @hasInverse(field: role_ext)
  nodes: [Node!] @hasInverse(field: roles)
}

type Project @auth(query:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query {
        queryProject {
          nodes(filter: {visibility: {eq: Public}}) { id }
        }
    }"""
},{ rule:"""query ($ROOTIDS: [String]) {
        queryProject(filter: {rootnameid: {in: $ROOTIDS}}) { id }
    }"""
}]
}) {
  id: ID!
  createdBy: User!
  createdAt: DateTime! @search
  updatedAt: DateTime!
  rootnameid: String! @search(by:[hash])
  parentnameid: String! @search(by:[hash])
  nameid: String! @search(by:[hash])
  name: String! @search(by:[fulltext])
  description: String
  status: ProjectStatus! @search
  columns: [ProjectColumn!] @hasInverse(field: project)
  leaders: [Node!]
  nodes: [Node!] @hasInverse(field: projects)
}

type ProjectTension {
  id: ID!
  tension: Tension!
  pos: Int!
  pc: ProjectColumn!
}

type ProjectColumn {
  id: ID!
  name: String! @id
  about: String
  pos: Int!
  tensions: [ProjectTension!] @hasInverse(field: pc)
  project: Project!
}

type OrgaAgg {
  n_members: Int
  n_guests: Int
}

interface Post @auth(add:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($USERNAME: String!) {
      queryPost {
        createdBy(filter: {username: {eq: $USERNAME}}) { username }
      }
    }"""
}]
}) {
  id: ID!
  createdBy: User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by:[fulltext])
}

type Tension implements Post @auth(query:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($USERNAME: String!) {
      queryTension {
        createdBy(filter: {username: {eq: $USERNAME}}) { username }
      }
    }"""
},{ rule:"""query ($OWNIDS: [String]) {
        queryTension {
          receiver(filter: {visibility: {eq: Public}, or: [{rootnameid: {in: $OWNIDS}}]}) { id }
        }
    }"""
},{ rule:"""query ($ROOTIDS: [String]) {
        queryTension {
          receiver(filter: {visibility: {eq: Private}, and: [{rootnameid: {in: $ROOTIDS}}]}) { id }
        }
    }"""
},{ rule:"""query ($USERNAME: String!) {
        queryTension {
          receiver(filter: {visibility: {eq: Secret}}) {
            children {
              first_link(filter: {username: {eq: $USERNAME}}) { username }
            }
          }
        }
    }"""
},{ rule:"""query ($USERNAME: String!) {
      queryTension {
        contracts(filter: {status: {eq: Open}}) {
          candidates(filter: {username: {eq: $USERNAME}}) { username }
        }
      }
    }"""
}]
}, add:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($USERNAME: String!) {
        queryTension {
          emitter {
            first_link(filter: {username: {eq: $USERNAME}}) { username }
          }
        }
    }"""
},{ rule:"""query {
        queryTension {
          emitter(filter: {role_type: {eq: Bot}}) { id }
        }
    }"""
}]
}) {
  emitter: Node!
  emitterid: String! @search(by:[hash, regexp])
  receiver: Node!
  receiverid: String! @search(by:[hash, regexp])
  title: String! @search(by:[fulltext])
  type_: TensionType! @search
  status: TensionStatus! @search
  action: TensionAction
  assignees: [User!]
  labels: [Label!]
  comments: [Comment!]
  blobs: [Blob!] @hasInverse(field: tension)
  history: [Event!] @hasInverse(field: tension)
  mentions: [Event!] @hasInverse(field: mentioned)
  contracts: [Contract!] @hasInverse(field: tension)
  subscribers: [User!] @hasInverse(field: subscriptions)
  projects: [ProjectTension!] @hasInverse(field: tension)
  n_comments: Int
}

type Comment implements Post @auth(update:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($USERNAME: String!) {
      queryComment {
        createdBy(filter: {username: {eq: $USERNAME}}) { username }
      }
    }"""
}]
}) {
  reactions: [Reaction!] @hasInverse(field: comment)
}

type Reaction @auth(add:{ rule:"""query ($USERNAME: String!) {
      queryReaction {
        user(filter: {username: {eq: $USERNAME}}) { username }
      }
    }"""
}, update:{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
}, delete:{ rule:"""query ($USERNAME: String!) {
      queryReaction {
        user(filter: {username: {eq: $USERNAME}}) { username }
      }
    }"""
}) {
  id: ID!
  reactionid: String! @id
  user: User!
  comment: Comment!
  type_: Int!
}

type Blob implements Post {
  tension: Tension!
  blob_type: BlobType! @search
  pushedFlag: DateTime @search
  archivedFlag: DateTime @search
  node: NodeFragment
  md: String
}

type Event implements Post {
  tension: Tension!
  event_type: TensionEvent! @search
  mentioned: Tension
  old: String
  new: String
}

type EventFragment {
  event_type: TensionEvent! @search
  old: String
  new: String
}

type Contract implements Post @auth(query:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($USERNAME: String!) {
      queryContract {
        createdBy(filter: {username: {eq: $USERNAME}}) { username }
      }
    }"""
},{ rule:"""query ($USERNAME: String!) {
      queryContract {
        candidates(filter: {username: {eq: $USERNAME}}) { username }
      }
    }"""
},{ rule:"""query ($OWNIDS: [String]) {
        queryContract {
          tension { receiver(filter: {visibility: {eq: Public}, or: [{rootnameid: {in: $OWNIDS}}]}) { id } }
        }
    }"""
},{ rule:"""query ($ROOTIDS: [String]) {
        queryContract {
          tension { receiver(filter: {visibility: {eq: Private}, and: [{rootnameid: {in: $ROOTIDS}}]}) { id } }
        }
    }"""
},{ rule:"""query ($USERNAME: String!) {
        queryContract {
          tension {
            receiver(filter: {visibility: {eq: Secret}}) {
              children {
                first_link(filter: {username: {eq: $USERNAME}}) { username }
              }
            }
          }
        }
    }"""
}]
}) {
  contractid: String! @id
  tension: Tension!
  status: ContractStatus! @search
  contract_type: ContractType! @search
  closedAt: DateTime @search
  event: EventFragment!
  participants: [Vote!]! @hasInverse(field: contract)
  candidates: [User!] @hasInverse(field: contracts)
  pending_candidates: [PendingUser!]
  comments: [Comment!]
  isValidator: Boolean
}

type Vote implements Post @auth(add:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($USERNAME: String!) {
      queryVote {
        node { first_link(filter: {username: {eq: $USERNAME}}) { username } }
      }
    }"""
}]
}) {
  voteid: String! @id
  contract: Contract!
  node: Node!
  data: [Int!]!
}

type User @auth(add:{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
}, update:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($USERNAME: String!) {
      queryUser (filter: {username: {eq: $USERNAME}}) { username }
    }"""
}]
}, delete:{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
}) {
  id: ID!
  createdAt: DateTime!
  lastAck: DateTime!
  username: String! @id @search(by:[hash, regexp])
  name: String @search(by:[regexp])
  email: String! @id @search(by:[hash])
  password: String!
  bio: String
  location: String
  utc: String
  links: [String!]
  skills: [String!]
  notifyByEmail: Boolean!
  lang: Lang!
  subscriptions: [Tension!] @hasInverse(field: subscribers)
  watching: [Node!] @hasInverse(field: watchers)
  rights: UserRights!
  roles: [Node!] @hasInverse(field: first_link)
  tensions_created: [Tension!] @hasInverse(field: createdBy)
  tensions_assigned: [Tension!] @hasInverse(field: assignees)
  contracts: [Contract!] @hasInverse(field: candidates)
  reactions: [Reaction!] @hasInverse(field: user)
  events: [UserEvent!] @hasInverse(field: user)
  markAllAsRead: String
  event_count: EventCount
}

type PendingUser {
  id: ID!
  updatedAt: DateTime
  username: String! @id
  password: String
  email: String! @id
  email_token: String @search(by:[hash])
  token: String @search(by:[hash])
  contracts: [Contract!]
  subscribe: Boolean
}

type UserRights {
  type_: UserType!
  canLogin: Boolean!
  canCreateRoot: Boolean!
  maxPublicOrga: Int!
  maxPrivateOrga: Int!
  hasEmailNotifications: Boolean!
}

type UserEvent @auth(add:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($USERNAME: String!) {
      queryUserEvent {
        user(filter: {username: {eq: $USERNAME}}) { username }
      }
    }"""
}]
}, update:{ or:[{ rule:"{ $USERTYPE: {eq: \"Root\"} }"
},{ rule:"""query ($USERNAME: String!) {
      queryUserEvent {
        user(filter: {username: {eq: $USERNAME}}) { username }
      }
    }"""
}]
}) {
  id: ID!
  createdAt: DateTime! @search
  isRead: Boolean! @search
  user: User!
  event: [EventKind!]
}

union EventKind= Event| Contract| Notif

type Notif implements Post {
  tension_: Tension
  contract: Contract
  link: String
}

type EventCount {
  unread_events: Int
  pending_contracts: Int
  assigned_tensions: Int
}

enum NodeType {
  Circle
  Role
}

enum RoleType {


  Owner

  Member

  Guest

  Retired

  Pending


  Coordinator

  Peer

  Bot

}

enum NodeVisibility {
  Public

  Private

  Secret

}

enum NodeMode {
  Coordinated

  Agile

}

enum TensionStatus {
  Open
  Closed
}

enum TensionType {
  Operational
  Governance
  Help
  Alert
  Announcement

}

enum TensionAction {

  NewRole
  NewCircle
  NewMd

  EditRole
  EditCircle
  EditMd

  ArchivedRole
  ArchivedCircle
  ArchivedMd




}

enum TensionEvent {

  Created
  Reopened
  Closed
  TitleUpdated
  TypeUpdated
  CommentPushed
  AssigneeAdded
  AssigneeRemoved
  LabelAdded
  LabelRemoved
  BlobCreated
  BlobCommitted
  Mentioned
  Pinned
  Unpinned

  BlobPushed
  BlobArchived
  BlobUnarchived
  UserJoined
  UserLeft
  MemberLinked
  MemberUnlinked
  Authority
  Visibility
  Moved
}

enum BlobType {

  OnNode
  OnAbout
  OnMandate
  OnAboutAndMandate

  OnDoc

}

enum ProjectStatus {
  Open
  Closed
}

enum ContractStatus {
  Open
  Closed
  Canceled
}

enum ContractType {


  AnyCoordoDual

  AnyCandidates


  AnyCoordoSource

  AnyCoordoTarget
}

enum UserType {
  Regular

  Pro

  Root

}

enum Lang {
  EN
  FR
}

# Dgraph.Authorization {"Header":"X-Frac6-Auth","Namespace":"https://fractale.co/jwt/claims","Algo":"RS256","VerificationKey":"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqfBbJAanlwf2mYlBszBA\nxgHw3hTu6gZ9nmej+5fCCdyA85IXhw14+F14o+vLogPe/giFuPMpG9eCOPWKvL/T\nGyahW5Lm8TRB4Pf54fZq5+VKdf5/i9u2e8CelpFvT+zLRdBmNVy9H9MitOF9mSGK\nHviPH1nHzU6TGvuVf44s60LAKliiwagALF+T/3ReDFhoqdLb1J3w4JkxFO6Guw5p\n3aDT+RMjjz9W8XpT3+k8IHocWxcEsuWMKdhuNwOHX2l7yU+/yLOrK1nuAMH7KewC\nCT4gJOan1qFO8NKe37jeQgsuRbhtF5C+L6CKs3n+B2A3ZOYB4gzdJfMLXxW/wwr1\nRQIDAQAB\n-----END PUBLIC KEY-----"}
